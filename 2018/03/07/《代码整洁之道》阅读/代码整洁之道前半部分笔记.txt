极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #165-175的标注 | 添加于 2018年1月23日星期二 上午12:23:19

我们读过汤姆·迪马克的《人件》，的确是一本好书，但它并不是一本专门教工程师怎么与人高效合作的著作，而是一本教管理人员怎么带领团队成功的著作。 目录    封面    扉页    内容提要    致谢    本书宗旨    对本书的赞誉    前言    第一章 天才程序员的传说       帮我把代码藏起来       天才的传说
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #165-166的标注 | 添加于 2018年1月23日星期二 上午12:23:32

我们读过汤姆·迪马克的《人件》，的确是一本好书，但它并不是一本专门教工程师怎么与人高效合作的著作，而是一本教管理人员怎么带领团队成功的著作。
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #224-225的标注 | 添加于 2018年1月23日星期二 上午12:25:20

要在团队里获得成功，你必须以谦虚、尊重和信任为核心原则。
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #269-270的标注 | 添加于 2018年1月23日星期二 上午12:34:08

很多程序员都害怕和别人分享他刚刚开始做的东西，因为这意味着同行会看到他们的错误，从而知道这些代码背后的作者并非天才。
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #291-292的标注 | 添加于 2018年1月23日星期二 上午12:36:28

一开始就踏错步的概率总是很高的，越早征求意见和反馈，就越能把风险降低
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #294-295的标注 | 添加于 2018年1月23日星期二 上午12:36:54

尽早分享不仅仅可以防止一开始就步入歧途和检验创意，它还可以强化所谓的“公车因子”。
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #316-317的标注 | 添加于 2018年1月23日星期二 上午12:39:51

说法是，“足够多双眼
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #317-318的标注 | 添加于 2018年1月23日星期二 上午12:39:56

闭门造车的结果往往是当实现最初的创意后，却发现世界已经完全改变，原本的产品已经失去意义了。
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #326-328的标注 | 添加于 2018年1月23日星期二 上午12:42:16

假如你有事找玛丽谈，你要说，“breakpoint 玛丽”。如果玛丽正好有空档可以停下来，她就会转过来和你谈。要是她正在忙，她会说“ack”表示知道了，然后你就先去忙其他事情吧，她那边忙完了就会来找你。
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #334-339的标注 | 添加于 2018年1月23日星期二 上午12:43:20

令人遗憾的是，这种“创意要保密”的想法并非软件行业独有的，所有领域都普遍存在这个问题。就拿学术界来说，科学原本应该是自由开放、信息共享的。但是“不发表即灭亡”的迫切需求，以及对基金拨款的竞争却造成了反效果。学者们不再乐于分享。他们小心翼翼地保护着自己的想法，秘密地进行研究，把犯过的错误都掩盖起来，使最终发表的论文看起来似乎得来全不费功夫一般。其结果往往都是灾难性的：要么不小心重复了前人的工作，要么在一开始就不知不觉犯下了错误，最糟糕的是创造了一些原本有趣，但现在完全过时无用的东西。其中浪费的时间和精力都是无法估量的。
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #339 的笔记 | 添加于 2018年1月23日星期二 上午12:43:59

深有体会
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #348 的书签 | 添加于 2018年1月23日星期二 上午12:46:01


==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #358-362的标注 | 添加于 2018年1月23日星期二 上午12:48:08

谦虚 没有人是宇宙中心。谁也不是万能的，谁都会犯错。你必须不断地提高自己。 尊重 你必须真心实意地关心同事。他们都是活生生的人，他们的能力和成绩都需要得到肯定。 信任 要相信别人的能力和判断力，在适当的时候懂得放权5。
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #435-436的标注 | 添加于 2018年1月23日星期二 下午7:53:58

讨论的范围被限定在代码上，没有涉及任何人的价值观或是编程技术。
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #457-461的标注 | 添加于 2018年1月23日星期二 下午7:56:32

一份出色的事后检讨应该包含以下内容： ? 简要 ? 事件的时间线，从发现到调查，再到最终结果 ? 事件发生的主因 ? 影响和损失评估 ? 立即修正问题的步骤 ? 防止事件再次发生的步骤 ? 得到的教训
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #436-437的标注 | 添加于 2018年1月23日星期二 下午7:56:40

快速失败；学习；迭代 商业界里有一个著名的（也
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #436-437的标注 | 添加于 2018年1月23日星期二 下午7:56:52

快速失败；学习；迭代
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #479-479的标注 | 添加于 2018年1月23日星期二 下午8:00:22

你越是容易受影响，你就越能影响别人；你越是示弱，你就越强壮。
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #571-572的标注 | 添加于 2018年1月24日星期三 下午12:42:15

如果一个人在参加Google的面试中各方面都像是超级明星工程师一样，却无法和团队合作，或是要求非常结构化的环境的话，面试官还是一样会在反馈里亮起红灯。
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #596-597的标注 | 添加于 2018年1月26日星期五 上午12:51:03

所谓的“共识”，是指每个人都对产品的成功抱有强烈的主人翁精神和责任感，同时团队的领袖也真的愿意倾听团队的意见（即HRT中“尊重”的部分）。
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #619-620的标注 | 添加于 2018年1月26日星期五 上午12:56:04

因此随和的团队文化要特别小心这一点，不要被激进的新人牵着鼻子走，特别是要避免和这样的人发生激烈的冲突。
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #630-631的标注 | 添加于 2018年1月26日星期五 上午12:58:11

沟通的指导原则之一就是在同步沟通的时候（比如开会），人越少越好。而在异步沟通的时候（比如E-mail），涉及的听众越多越好。
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #661-662的标注 | 添加于 2018年1月26日星期五 上午1:03:33

撰写任务宗旨强迫他们在产品的走向上求同存异，否则到时候一定会拖缓（甚至停滞）开发进度。
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #694-697的标注 | 添加于 2018年1月27日星期六 上午1:08:46

有关开会的五条小贴士： 1．只邀请一定要参加的人； 2．开会前要决定好议程，而且要事先通知所有人； 3．达成目的后应提早散会； 4．注意别跑题； 5．尽量把会议安排在休息时间前后（比如午饭时间，下班前等）。
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #735-736的标注 | 添加于 2018年1月28日星期日 下午12:06:26

很多非常成功的项目都有好几个邮件列表，把开发讨论、代码审查、用户讨论、公告发布、调度邮件，以及各种管理琐事区分开来。
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #790-791的标注 | 添加于 2018年1月28日星期日 下午12:12:05

注释应该尽量解释为什么代码要那么写，而不是去解释代码做了什么。
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #810-810的标注 | 添加于 2018年1月28日星期日 下午12:15:04

在源文件里留下名字绝对是弊大于利。
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #957-957的标注 | 添加于 2018年1月28日星期日 下午6:11:10

作为主管，不要忘记你创造的是不同的价值
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #980-981的标注 | 添加于 2018年1月28日星期日 下午6:14:12

反模式：雇佣听话的人
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #986-987的标注 | 添加于 2018年1月28日星期日 下午6:15:14

其实，你应该努力去雇佣那些比你聪明、可以替代你的人。
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #990-991的标注 | 添加于 2018年1月28日星期日 下午6:17:38

反模式：无视表现不佳的人
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #1049-1050的标注 | 添加于 2018年1月31日星期三 下午2:34:03

反模式：把团队当小孩子
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #1039-1040的标注 | 添加于 2018年1月31日星期三 下午2:34:12

反模式：降低招聘标准
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #1031-1031的标注 | 添加于 2018年1月31日星期三 下午2:34:18

对大家都有好处。 反
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #1031-1032的标注 | 添加于 2018年1月31日星期三 下午2:34:23

反模式：和谁都是朋友 大多数工程师在进入领导行列后遇到的第一个难关就是他从团队的成员变成了团队的领袖。
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #1031-1032的标注 | 添加于 2018年1月31日星期三 下午2:34:30

反模式：和谁都是朋友
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #1015-1015的标注 | 添加于 2018年1月31日星期三 下午2:34:42

反模式：无视人际关系
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #1108-1114的标注 | 添加于 2018年1月31日星期三 下午3:01:57

这引出了禅式管理的另一个秘诀：提问。当队员来向你寻求建议的时候，通常都是很让人兴奋的，终于有机会来修复点什么东西了！在担任领导职务前，你已经在这行干了好多年了，所以很多时候你会直接跳到解题模式，但是其实最不应该的就是这么做。工程师来问你建议通常不是要你去解决他的问题，而是要你帮助他解决问题，所以最简单的方法应该是问问题。这不是说要你把自己变成魔法八号球12，这反而会适得其反。正确的做法应该是在HRT的原则下，帮助他解析分析问题，从而达到让他自己解决问题的目的。这通常能引导工程师得出答案13，最重要的是，这是他自己想出来的答案，因此也就回到了本章开头所讲的主人翁精神和责任感。
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #1108-1115的标注 | 添加于 2018年1月31日星期三 下午3:02:13

这引出了禅式管理的另一个秘诀：提问。当队员来向你寻求建议的时候，通常都是很让人兴奋的，终于有机会来修复点什么东西了！在担任领导职务前，你已经在这行干了好多年了，所以很多时候你会直接跳到解题模式，但是其实最不应该的就是这么做。工程师来问你建议通常不是要你去解决他的问题，而是要你帮助他解决问题，所以最简单的方法应该是问问题。这不是说要你把自己变成魔法八号球12，这反而会适得其反。正确的做法应该是在HRT的原则下，帮助他解析分析问题，从而达到让他自己解决问题的目的。这通常能引导工程师得出答案13，最重要的是，这是他自己想出来的答案，因此也就回到了本章开头所讲的主人翁精神和责任感。不管你是不是知道答案，这种办法几乎总是能让工程师觉得其实你早就知道答案了。是不是很难相信？苏格拉底会为你骄傲的。
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #1119-1119的标注 | 添加于 2018年1月31日星期三 下午3:03:31

团队主管最经常要做的事情之一就是引导大家达成共识。
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #1125-1127的标注 | 添加于 2018年1月31日星期三 下午3:04:29

有些障碍对于你的队员来说几乎无法逾越，对你来说却是小菜一碟，让你的团队了解到你帮助他们解决障碍的意愿和能力是非常有价值的事情。
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #1131-1132的标注 | 添加于 2018年1月31日星期三 下午3:05:22

在帮忙扫除障碍的时候，你用不着通晓一切，往往认识能解决问题的人就足够了。很多时候认识正确的人比知道正确答案要有价值得多。
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #1176-1178的标注 | 添加于 2018年2月1日星期四 上午7:49:13

时候。大多数管理学教材的建议是采用所谓的“三明治赞美法”来缓和批评的冲击力。这里是一段三明治赞美法的例子：
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #1229-1230的标注 | 添加于 2018年2月2日星期五 下午8:46:31

不必事事躬亲，但也不能当甩手掌柜。
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #1236-1237的标注 | 添加于 2018年2月2日星期五 下午8:47:26

寻找接班人。
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #1243-1243的标注 | 添加于 2018年2月2日星期五 下午8:48:28

知道什么时候要做恶人。
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #1251-1251的标注 | 添加于 2018年2月2日星期五 下午8:49:37

保护团队不受混乱干扰。
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #1287-1288的标注 | 添加于 2018年2月3日星期六 下午1:08:21

最能让人开心、充满活力的并不是来自外部的激励（比如砸一堆钱给他），而是设法从内心激励他们。丹
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #1287-1289的标注 | 添加于 2018年2月3日星期六 下午1:08:35

丹·平克在他的畅销书《驱动力18》里说道，最能让人开心、充满活力的并不是来自外部的激励（比如砸一堆钱给他），而是设法从内心激励他们。丹宣称，只要能给予以下三样东西就可以达到内部激励的目的：自主、精通、目标19。
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #1415-1415的标注 | 添加于 2018年2月6日星期二 下午7:16:45

不尊重别人的时间
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #1423-1424的标注 | 添加于 2018年2月6日星期二 下午7:17:03

这里“自负”可能不是最恰当的词，我们想要表达的是那种无法接受多数人
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #1423-1425的标注 | 添加于 2018年2月6日星期二 下午7:17:10

这里“自负”可能不是最恰当的词，我们想要表达的是那种无法接受多数人决议，无法倾听和尊重其他观点，以及不愿作出妥协的人。
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #1436-1436的标注 | 添加于 2018年2月6日星期二 下午7:18:44

过分索求
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #1445-1445的标注 | 添加于 2018年2月6日星期二 下午7:19:42

幼稚或是莫名其妙的交流
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #1455-1455的标注 | 添加于 2018年2月6日星期二 下午7:21:35

完美主义
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #1458-1460的标注 | 添加于 2018年2月6日星期二 下午7:21:43

非常出色，代码和测试的质量也很高，人也非常容易相处。但是每当要设计新软件的时候，他就会无休止地调整、改进自己的设计。他从不满足，好像永远也不会开始写代码一样。
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #1458-1460的标注 | 添加于 2018年2月6日星期二 下午7:21:54

他做的设计非常出色，代码和测试的质量也很高，人也非常容易相处。但是每当要设计新软件的时候，他就会无休止地调整、改进自己的设计。他从不满足，好像永远也不会开始写代码一样。
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #1415 的笔记 | 添加于 2018年2月6日星期二 下午7:24:03

不好的行为
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #1474 的笔记 | 添加于 2018年2月6日星期二 下午7:24:52

应对不好的行为
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #1474-1474的标注 | 添加于 2018年2月6日星期二 下午7:24:52

策略。
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #1600-1601的标注 | 添加于 2018年2月8日星期四 下午5:40:22

尽管在工作中不冒险可以降低失败发生的概率，但也表示大获成功的机会随之变少。
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #1606-1606的标注 | 添加于 2018年2月8日星期四 下午6:01:44

对不确定的事情提出疑问。
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #1723-1726的标注 | 添加于 2018年2月8日星期四 下午6:21:14

不管你是经理还是负责具体工作的人，都有必要花点时间在向上管理上。这就是说，你要尽可能确保你的经理以及团队之外的人不但知道你在干嘛，还要知道你干得很棒。有些工程师不太喜欢这种“自卖自夸”的东西，事实也的确如此，但这样做的好处却是大大的。
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #1729-1735的标注 | 添加于 2018年2月8日星期四 下午6:22:15

身为工程师，应该把精力放在发布产品上，而不是其他的事情上面。发布产品比任何事情都能在公司内部提升你的信誉、声望，以及政治资本。发布产品是曝光率极高的大事，能充分展示你的成果。尽管在清理代码和重构上面花大力气是非常有诱惑力的想法，但是经验教训告诉我们，不要花太多时间在这种防御性的工作上，很少有人看重这些，到时候你会发现自己的处境很尴尬，因为花了那么多时间，你却拿不出什么（政治上）看起来很重要的成果8。这样你不但得不到别人的认可，还很容易导致自己的项目被取消。
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #1740-1746的标注 | 添加于 2018年2月8日星期四 下午6:23:19

本开始把所有的工作分成“进取性”和“防御性”两大类。进取性的工作通常是指用户看得见的新功能——在外人眼里这些都是很炫、很令人兴奋的东西，或是能展现产品优势的地方（比如，界面改进、速度提升，或是互操作性的增强等）。而防御性的工作主要是着重产品长期的健康状况（比如，代码重构、特性重写、修改数据库模式、数据迁移，或是改进紧急监控等）。这些防御工作能让产品更稳定可靠，可维护性更强。然而尽管这些工作至关重要，却得不到任何政治上的好处。所以你要是把时间都花在这上面，在外人看来，你的项目就好像停滞了一样。套用一句成语就是“先入为主”啊！9
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #1746-1747的标注 | 添加于 2018年2月8日星期四 下午6:23:41

不管技术债务有多少，团队也永远不应该花超过三分之一甚至一半的时间和精力去做防御性的工作，否则就等于政治自杀。
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #1747-1748的标注 | 添加于 2018年2月8日星期四 下午6:29:16

运气和互惠的经济学
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #1768-1768的标注 | 添加于 2018年2月8日星期四 下午6:32:01

晋升到一个安全的位置上
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #1785-1785的标注 | 添加于 2018年2月8日星期四 下午6:33:35

事实上高层的助理在公司里也是有极大的权力和影响力的，
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #1789-1790的标注 | 添加于 2018年2月8日星期四 下午6:33:54

万一发生什么坏事，你的位置越高，全身而退的希望就越大。
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #1817-1818的标注 | 添加于 2018年2月8日星期四 下午6:36:26

经过多年的试错后，我们发现越短的邮件就越有机会得到回复。
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #1820-1821的标注 | 添加于 2018年2月8日星期四 下午8:35:24

写得好的三个论点和一个行动的邮件（最多）包含三个点，让你解释问题的细节，然后一个（只能有一个）行动请求，绝不能有其他的内容。
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #1953-1953的标注 | 添加于 2018年2月8日星期四 下午9:49:55

承诺的时候要谨言，做产品的时候要超出预期
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #1973-1975的标注 | 添加于 2018年2月8日星期四 下午9:52:30

关注用户，其他的东西自会随之而来。 用户才应该是你关注的焦点 听起来是不是很做作？
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #1962-1962的标注 | 添加于 2018年2月8日星期四 下午9:52:38

发生相应的改变。而工程师却往往非常厌恶这种力量，以及
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #1973-1974的标注 | 添加于 2018年2月8日星期四 下午9:53:00

Google有一句非常著名的格言： 关注用户，其他的东西自会随之而来。
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #2204-2205的标注 | 添加于 2018年2月9日星期五 下午2:56:24

不是为了自己，不是为了团队，也不是为了公司，而是为了给用户带来方便。
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #2226-2227的标注 | 添加于 2018年2月9日星期五 下午2:57:08

有经验的领导会为团队服务，而不是让团队为自己服务。
==========
﻿极客与团队 (菲茨帕特里克(Brian W. Fitzpatrick))
- 您在位置 #2222-2222的标注 | 添加于 2018年2月9日星期五 下午2:57:21

只要记住HRT就好了：谦虚、尊重、信任。
==========
﻿人人都是产品经理 version 1.1 (苏杰)
- 您在位置 #627-628的标注 | 添加于 2018年2月9日星期五 下午3:13:06

随处可见。但我们工作中所做的产品，绝大多数都是在人们的需求，即用户目标和公司的商业目标之间寻找平衡。
==========
﻿人人都是产品经理 version 1.1 (苏杰)
- 您在位置 #628-628的标注 | 添加于 2018年2月9日星期五 下午3:13:13

即用户目标和公司的商业目标之间寻找平衡。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #327-329的标注 | 添加于 2018年2月12日星期一 上午10:37:06

这意味着对代码诚实、对同僚坦承代码现状，最重要的是在代码问题上不自欺。是否已尽全力“把露营地清理得比来时还干净”？签入代码前是否已做重构？这可不是皮毛小事，它正高卧于敏捷价值的正中位置。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #484-484的标注 | 添加于 2018年2月17日星期六 上午9:08:25

花时间保持代码整洁不但有关效率，还有关生存。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #504-505的标注 | 添加于 2018年2月18日星期日 下午2:46:51

制造混乱无助于赶上期限。混乱只会立刻拖慢你，叫你错过期限。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #537-537的标注 | 添加于 2018年2月18日星期日 下午2:50:21

整洁的代码从不隐藏设计者的意图，充满了干净利落的抽象和直截了当的控制语句。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #572-574的标注 | 添加于 2018年2月18日星期日 下午3:30:14

如果同一段代码反复出现，就表示某种想法未在代码中得到良好的体现。我尽力去找出到底那是什么，然后再尽力更清晰地表达出来。 在我看来，有意义的命名是体现表达力的一种方式，
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #572-573的标注 | 添加于 2018年2月18日星期日 下午3:30:27

如果同一段代码反复出现，就表示某种想法未在代码中得到良好的体现。我尽力去找出到底那是什么，然后再尽力更清晰地表达出来。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #644-646的标注 | 添加于 2018年2月19日星期一 上午11:28:37

从许多角度看，本书都是我 2002 年写那本 Agile Software Development：Principles，Patterns，and Practices（中译版《敏捷软件开发：原则、模式与实践》，简称PPP）的“前传”。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #675-675的标注 | 添加于 2018年2月19日星期一 下午2:22:26

注意命名，而且一旦发现有更好的名称，就换掉旧的。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #711-712的标注 | 添加于 2018年2月19日星期一 下午3:03:01

别用accountList来指称一组账号，除非它真的是List类型。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #714-715的标注 | 添加于 2018年2月19日星期一 下午3:03:16

提防使用不同之处较小的名称。想区分模块中某处的XYZControllerFor EfficientHandlingOfStrings和另一处的XYZControllerForEfficientStorageOfStrings，会花多长时间呢？这两个词外形实在太相似了。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #731-732的标注 | 添加于 2018年2月19日星期一 下午3:10:14

以数字系列命名（a1、a2，……aN）是依义命名的对立面。这样的名称纯属误导——完全没有提供正确信息；
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #746-747的标注 | 添加于 2018年2月19日星期一 下午3:12:15

如果缺少明确约定，变量 moneyAmount 就与 money 没区别，customerInfo 与 customer没区别，accountData与account没区别，theMessage也与message没区别。要区分名称，就要以读者能鉴别不同之处的方式来区分。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #748-748的标注 | 添加于 2018年2月19日星期一 下午7:53:53

使用读得出来的名称
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #766-766的标注 | 添加于 2018年2月19日星期一 下午7:54:53

使用可搜索的名称
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #771-772的标注 | 添加于 2018年2月19日星期一 下午7:55:59

窃以为单字母名称仅用于短方法中的本地变量。名称长短应与其作用域大小相对应[N5]。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #782-782的标注 | 添加于 2018年2月19日星期一 下午7:59:46

把类型或作用域编进名称里面，徒然增加了解码的负担。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #796-797的标注 | 添加于 2018年2月19日星期一 下午8:00:06

也不必用 m_前缀来标明成员变量。应当把类和函数做得足够小，消除对成员前缀的需要。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #810-811的标注 | 添加于 2018年2月19日星期一 下午8:02:23

如果接口和实现必须选一个来编码的话，我宁肯选择实现。ShapeFactoryImp，甚至是丑陋的CShapeFactory，都比对接口名称编码来得好。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #821-822的标注 | 添加于 2018年2月19日星期一 下午8:04:21

类名和对象名应该是名词或名词短语，如Customer、WikiPage、Account和AddressParser。避免使用Manager、Processor、Data或Info这样的类名。类名不应当是动词。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #823-823的标注 | 添加于 2018年2月19日星期一 下午8:04:44

方法名应当是动词或动词短语，如postPayment、deletePage或save。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #828-829的标注 | 添加于 2018年2月19日星期一 下午8:06:12

可以考虑将相应的构造器设置为private，强制使用这种命名手段。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #829-829的标注 | 添加于 2018年2月19日星期一 下午8:07:00

别扮可爱
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #833-834的标注 | 添加于 2018年2月19日星期一 下午8:07:16

扮可爱的做法在代码中经常体现为使用俗话或俚语。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #837-838的标注 | 添加于 2018年2月19日星期一 下午8:08:39

给每个抽象概念选一个词，并且一以贯之。例如，使用fetch、retrieve和get来给在多个类中的同种方法命名。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #837-837的标注 | 添加于 2018年2月19日星期一 下午8:08:55

给每个抽象概念选一个词，并且一以贯之。例如，
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #837-837的标注 | 添加于 2018年2月19日星期一 下午8:09:05

给每个抽象概念选一个词，并且一以贯之。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #846-846的标注 | 添加于 2018年2月19日星期一 下午8:11:39

别用双关语
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #856-857的标注 | 添加于 2018年2月19日星期一 下午8:12:52

记住，只有程序员才会读你的代码。所以，尽管用那些计算机科学（Computer Science，CS）术语、算法名、模式名、数学术语吧。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #913-913的标注 | 添加于 2018年2月19日星期一 下午10:51:15

不要添加没用的语境
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1006-1007的标注 | 添加于 2018年2月21日星期三 下午5:38:32

函数的第一规则是要短小。第二条规则是还要更短小。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1031-1032的标注 | 添加于 2018年2月22日星期四 下午1:15:39

函数应该做一件事。做好这件事。只做这一件事。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1057-1058的标注 | 添加于 2018年2月25日星期日 上午9:08:08

程序就像是一系列 TO起头的段落，每一段都描述当前抽象层级，并引用位于下一抽象层级的后续TO起头段落。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1049-1050的标注 | 添加于 2018年2月25日星期日 上午9:08:26

要确保函数只做一件事，函数中的语句都要在同一抽象层级上。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1121-1122的标注 | 添加于 2018年2月25日星期日 上午9:49:45

最理想的参数数量是零（零参数函数），其次是一（单参数函数），再次是二（双参数函数），应尽量避免三（三参数函数）。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1138-1140的标注 | 添加于 2018年2月25日星期日 上午10:00:42

还有一种虽不那么普遍但仍极有用的单参数函数形式，那就是事件（event）。在这种形式中，有输入参数而无输出参数。程序将函数看作是一个事件，使用该参数修改系统状态，例如void passwordAttemptFailedNtimes(int attempts)。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1138-1140的标注 | 添加于 2018年2月26日星期一 上午10:31:34

还有一种虽不那么普遍但仍极有用的单参数函数形式，那就是事件（event）。在这种形式中，有输入参数而无输出参数。程序将函数看作是一个事件，使用该参数修改系统状态，例如void passwordAttemptFailedNtimes(int attempts)。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1158-1160的标注 | 添加于 2018年3月1日星期四 下午7:11:22

二元函数不算恶劣，而且你当然也会编写二元函数。不过，你得小心，使用二元函数要付出代价。你应该尽量利用一些机制将其转换成一元函数。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1169-1170的标注 | 添加于 2018年3月1日星期四 下午7:13:26

如果函数看来需要两个、三个或三个以上参数，就说明其中一些参数应该封装为类了。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1182-1182的标注 | 添加于 2018年3月1日星期四 下午7:16:06

函数和参数应当形成一种非常良好的动词/名词对形式。例如，write(name)就相当令人认同。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1184-1186的标注 | 添加于 2018年3月1日星期四 下午7:16:49

我们把参数的名称编码成了函数名。例如，assertEqual改成assertExpectedEqualsActual(expected, actual)可能会好些。这大大减轻了记忆参数顺序的负担。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1201-1202的标注 | 添加于 2018年3月2日星期五 上午9:43:41

副作用就在于对Session.initialize( )的调用。checkPassword函数，顾名思义，就是用来检查密码的。该名称并未暗示它会初始化该次会话。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1206-1207的标注 | 添加于 2018年3月2日星期五 上午9:43:57

在本例中，可以重命名函数为checkPasswordAndInitializeSession，虽然那还是违反了“只做一件事”的规则。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1214-1215的标注 | 添加于 2018年3月2日星期五 上午9:46:51

普遍而言，应避免使用输出参数。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1225-1227的标注 | 添加于 2018年3月2日星期五 上午9:49:16

真正的解决方案是把指令与询问分隔开来，防止混淆的发生： if (attributeExists("username")) { setAttribute("username", "unclebob"); ... }
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1240-1245的标注 | 添加于 2018年3月2日星期五 上午9:52:13

如果使用异常替代返回错误码，错误处理代码就能从主路径代码中分离出来，得到简化： try { deletePage(page); registry.deleteReference(page.name); configKeys.deleteKey(page.name.makeKey()); } catch (Exception e) { logger.log(e.getMessage()); }
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1245-1245的标注 | 添加于 2018年3月2日星期五 上午9:55:46

抽离Try/Catch代码块
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1245 的笔记 | 添加于 2018年3月2日星期五 上午9:56:15

这个例子很不错
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1258-1260的标注 | 添加于 2018年3月2日星期五 上午9:57:01

函数应该只做一件事。错误处理就是一件事。因此，处理错误的函数不该做其他事。这意味着（如上例所示）如果关键字try在某个函数中存在，它就该是这个函数的第一个单词，而且在catch/finally代码块后面也不该有其他内容。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1269-1270的标注 | 添加于 2018年3月3日星期六 下午7:51:34

使用异常替代错误码，新异常就可以从异常类派生出来，无需重新编译或重新部署[
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1270 的笔记 | 添加于 2018年3月3日星期六 下午7:52:23

巩固异常类的创建
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #996 的书签 | 添加于 2018年3月3日星期六 下午7:56:29


==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #941 的书签 | 添加于 2018年3月3日星期六 下午7:56:43


==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1288-1295的标注 | 添加于 2018年3月3日星期六 下午7:59:59

3.12 如何写出这样的函数 写代码和写别的东西很像。在写论文或文章时，你先想什么就写什么，然后再打磨它。初稿也许粗陋无序，你就斟酌推敲，直至达到你心目中的样子。 我写函数时，一开始都冗长而复杂。有太多缩进和嵌套循环。有过长的参数列表。名称是随意取的，也会有重复的代码。不过我会配上一套单元测试，覆盖每行丑陋的代码。 然后我打磨这些代码，分解函数、修改名称、消除重复。我缩短和重新安置方法。有时我还拆散类。同时保持测试通过。 最后，遵循本章列出的规则，我组装好这些函数。 我并不从一开始就按照规则写函数。我想没人做得到。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1288-1288的标注 | 添加于 2018年3月3日星期六 下午8:00:08

如何写出这样的函数
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1288 的书签 | 添加于 2018年3月3日星期六 下午8:00:11


==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1296-1297的标注 | 添加于 2018年3月3日星期六 下午8:00:55

函数是语言的动词，类是名词。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1298-1299的标注 | 添加于 2018年3月3日星期六 下午8:01:40

大师级程序员把系统当作故事来讲，而不是当作程序来写。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1304 的书签 | 添加于 2018年3月3日星期六 下午8:02:20


==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1387-1388的标注 | 添加于 2018年3月3日星期六 下午8:04:11

什么也不会比乱七八糟的注释更有本事搞乱一个模块。什么也不会比陈旧、提供错误信息的注释更有破坏性。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1412-1413的标注 | 添加于 2018年3月5日星期一 上午10:04:51

与其花时间编写解释你搞出的糟糕的代码的注释，不如花时间清洁那堆糟糕的代码。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1437-1437的标注 | 添加于 2018年3月5日星期一 上午10:16:07

对意图的解释
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1470-1470的标注 | 添加于 2018年3月5日星期一 上午10:18:22

assertTrue(a.compareTo(b) != 0); // a != b
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1480-1481的标注 | 添加于 2018年3月5日星期一 上午10:18:37

有时，用于警告其他程序员会出现某种后果的注释也是有用的。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1498-1499的标注 | 添加于 2018年3月6日星期二 下午7:26:00

有理由用//TODO 形式在源代码中放置要做的工作列表。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1507-1508的标注 | 添加于 2018年3月6日星期二 下午7:26:46

注释可以用来放大某种看来不合理之物的重要性。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1515-1516的标注 | 添加于 2018年3月6日星期二 下午7:27:36

坏注释
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1420-1420的标注 | 添加于 2018年3月6日星期二 下午7:27:55

好注释
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1535-1535的标注 | 添加于 2018年3月6日星期二 下午7:32:18

多余的注释
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1535 的笔记 | 添加于 2018年3月6日星期二 下午7:32:59

不要为了格式好看去写多余的注释
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1591-1592的标注 | 添加于 2018年3月6日星期二 下午7:34:01

误导性注释 有时，尽管初衷可嘉，程序员还是会写出不够精确的注释。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1598-1599的标注 | 添加于 2018年3月6日星期二 下午7:34:41

所谓每个函数都要有 Javadoc 或每个变量都要有注释的规矩全然是愚蠢可笑的。这类注释徒然让代码变得散乱，满口胡言，令人迷惑不解。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1611-1611的标注 | 添加于 2018年3月6日星期二 下午7:35:58

日志式注释
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1612-1612的标注 | 添加于 2018年3月6日星期二 下午7:36:08

这类注释就像是一种记录每次修改的日志。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1612-1612的标注 | 添加于 2018年3月6日星期二 下午7:36:15

有人会在每次编辑代码时，在模块开始处添加一条注释。这类注释就像是一种记录每次修改的日志。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1612-1612的标注 | 添加于 2018年3月6日星期二 下午7:36:33

有人会在每次编辑代码时，在模块开始处添加一条注释。这类注释就像是一种记录每次修改的日志。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1627-1628的标注 | 添加于 2018年3月6日星期二 下午7:38:58

废话注释
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1682-1682的标注 | 添加于 2018年3月6日星期二 下午7:42:50

位置标记
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1687-1687的标注 | 添加于 2018年3月6日星期二 下午7:43:52

括号后面的注释
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1689-1689的标注 | 添加于 2018年3月6日星期二 下午7:44:04

如果你发现自己想标记右括号，其实应该做的是缩短函数。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1705-1706的标注 | 添加于 2018年3月6日星期二 下午7:45:27

归属与署名 /* Added by Rick */
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1710-1710的标注 | 添加于 2018年3月6日星期二 下午7:45:53

直接把代码注释掉是讨厌的做法。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1714-1715的标注 | 添加于 2018年3月6日星期二 下午7:46:05

其他人不敢删除注释掉的代码。他们会想，代码依然放在那儿，一定有其原因，而且这段代码很重要，不能删除。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1727-1727的标注 | 添加于 2018年3月6日星期二 下午11:54:30

源代码注释中的HTML标记是一种厌物，
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1746-1747的标注 | 添加于 2018年3月7日星期三 上午12:02:47

假如你一定要写注释，请确保它描述了离它最近的代码。别在本地注释的上下文环境中给出系统级的信息。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1749-1751的标注 | 添加于 2018年3月7日星期三 上午12:02:59

/** * Port on which fitnesse would run. Defaults to <b>8082</b>.* * @param fitnessePort */
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1754-1755的标注 | 添加于 2018年3月7日星期三 上午12:03:31

别在注释中添加有趣的历史性话题或者无关的细节描述。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1769-1770的标注 | 添加于 2018年3月7日星期三 上午9:22:19

注释及其描述的代码之间的联系应该显而易见。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1769-1770的标注 | 添加于 2018年3月7日星期三 上午9:22:25

注释及其描述的代码之间的联系应该显而易见。如果你不嫌麻烦要写注释，至少让读者能看着注释和代码，并且理解注释所谈何物。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1777-1778的标注 | 添加于 2018年3月7日星期三 上午9:22:50

短函数不需要太多描述。为只做一件事的短函数选个好名字，通常要比写函数头注释要好。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1888 的书签 | 添加于 2018年3月7日星期三 下午7:17:51


==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1896-1897的标注 | 添加于 2018年3月8日星期四 下午4:49:39

代码格式关乎沟通，而沟通是专业开发者的头等大事。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1898-1899的标注 | 添加于 2018年3月8日星期四 下午4:50:49

你今天编写的功能，极有可能在下一版本中被修改，但代码的可读性却会对以后可能发生的修改行为产生深远影响。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1912-1912的标注 | 添加于 2018年3月8日星期四 下午5:01:23

意味着有可能用大多数为200行、最长500行的单个文件构造出色的系统（
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1917-1919的标注 | 添加于 2018年3月8日星期四 下午7:57:57

源文件也要像报纸文章那样。名称应当简单且一目了然。名称本身应该足够告诉我们是否在正确的模块中。源文件最顶部应该给出高层次概念和算法。细节应该往下渐次展开，直至找到源文件中最底层的函数和细节。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1922-1923的标注 | 添加于 2018年3月8日星期四 下午7:59:32

几乎所有的代码都是从上往下读，从左往右读。每行展现一个表达式或一个子句，每组代码行展示一条完整的思路。这些思路用空白行区隔开来。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1954-1955的标注 | 添加于 2018年3月8日星期四 下午8:01:49

紧密相关的代码应该互相靠近。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1955-1955的标注 | 添加于 2018年3月15日星期四 上午8:28:12

中的注释是如何割断两个实体变量间的联系的。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1974-1975的标注 | 添加于 2018年3月15日星期四 上午8:29:04

除非有很好的理由，否则就不要把关系密切的概念放到不同的文件中。实际上，这也是避免使用protected变量的理由之一。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1974-1975的标注 | 添加于 2018年3月15日星期四 上午8:29:22

除非有很好的理由，否则就不要把关系密切的概念放到不同的文件中。实际上，这也是避免使用protected变量的理由之一。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1976-1977的标注 | 添加于 2018年3月15日星期四 上午8:29:26

应避免迫使读者在源文件和类中跳来跳去。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1977-1977的标注 | 添加于 2018年3月15日星期四 上午8:30:27

变量声明应尽可能靠近其使用位置。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1978-1978的标注 | 添加于 2018年3月15日星期四 上午8:30:32

本地变量应该在函数的顶部出现，
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #1987-1987的标注 | 添加于 2018年3月15日星期四 下午4:22:34

循环中的控制变量应该总是在循环语句中声明，
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #2001-2001的标注 | 添加于 2018年3月15日星期四 下午4:23:43

实体变量应该在类的顶部声明。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #2001-2002的标注 | 添加于 2018年3月15日星期四 下午4:23:56

实体变量应该在类的顶部声明。这应该不会增加变量的垂直距离，因为在设计良好的类中，它们如果不是被该类的所有方法也是被大多数方法所用。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #2025-2026的标注 | 添加于 2018年3月15日星期四 下午4:25:25

若某个函数调用了另外一个，就应该把它们放到一起，而且调用者应该尽可能放在被调用者上面。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #2073 的笔记 | 添加于 2018年3月23日星期五 下午7:05:08

有共同讴的命名模式应该放一起
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #2073-2073的标注 | 添加于 2018年3月23日星期五 下午7:05:08

因为他们拥有共同的命名模式，
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #2075-2076的标注 | 添加于 2018年3月23日星期五 下午7:06:21

一般而言，我们想自上向下展示函数调用依赖顺序。也就是说，被调用的函数应该放在执行调用的函数下面[
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #2077-2078的标注 | 添加于 2018年3月23日星期五 下午7:07:24

像报纸文章一般，我们指望最重要的概念先出来，指望以包括最少细节的方式表述它们。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #2082-2083的标注 | 添加于 2018年3月23日星期五 下午7:10:32

，45 个字符左右的宽度分布尤为如此。其实，20～60的每个尺寸，都代表全部代码行数的1%。也就是总共40%！
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #2086-2088的标注 | 添加于 2018年3月23日星期五 下午7:11:56

应该尽力保持代码行短小。死守80个字符的上限有点僵化，而且我也并不反对代码行长度达到100个字符或120个字符。再多的话，大抵就是肆意妄为了。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #2091-2092的标注 | 添加于 2018年3月23日星期五 下午7:14:26

也用空格字符把相关性较弱的事物分隔开。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #2150-2150的标注 | 添加于 2018年3月23日星期五 下午7:16:55

源文件是一种继承结构，而不是一种大纲结构。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #2177-2178的标注 | 添加于 2018年3月27日星期二 上午8:55:43

有时，会忍不住想要在短小的if 语句、while 循环或小函数中违反缩进规则。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #2177-2179的标注 | 添加于 2018年3月27日星期二 上午8:55:51

有时，会忍不住想要在短小的if 语句、while 循环或小函数中违反缩进规则。一旦这么做了，我多数时候还是会回头加上缩进。这样就避免了出现以下这种范围层级坍塌到一行的情况：
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #2194-2195的标注 | 添加于 2018年3月27日星期二 上午8:58:30

每个程序员都有自己喜欢的格式规则，但如果在一个团队中工作，就是团队说了算[
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #2264-2265的标注 | 添加于 2018年3月27日星期二 上午9:00:48

将变量设置为私有（private）有一个理由：我们不想其他人依赖这些变量。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #2281-2283的标注 | 添加于 2018年3月27日星期二 上午9:03:48

隐藏实现并非只是在变量之间放上一个函数层那么简单。隐藏实现关乎抽象！类并不简单地用取值器和赋值器将其变量推向外间，而是曝露抽象接口，以便用户无需了解数据的实现就能操作数据本体。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #2276-2277的标注 | 添加于 2018年3月27日星期二 上午9:04:15

代码清单6-2的漂亮之处在于，你不知道该实现会是在矩形坐标系中还是在极坐标系中。可能两个都不是！然而，该接口还是明白无误地呈现了一种数据结构。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #2291-2291的标注 | 添加于 2018年3月27日星期二 上午9:05:25

要以最好的方式呈现某个对象包含的数据，需要做严肃的思考。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #2292 的笔记 | 添加于 2018年3月27日星期二 下午7:34:21

这一节可以理解为面向过程和面向对象的区别
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #2292-2292的标注 | 添加于 2018年3月27日星期二 下午7:34:21

数据、对象的反对称性
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #2335-2336的标注 | 添加于 2018年3月27日星期二 下午7:34:38

过程式代码（使用数据结构的代码）便于在不改动既有数据结构的前提下添加新函数。面向对象代码便于在不改动既有函数的前提下添加新类。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #2347-2347的标注 | 添加于 2018年3月27日星期二 下午7:41:12

方法不应调用由任何函数返回的对象的方法。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #2342-2343的标注 | 添加于 2018年3月27日星期二 下午7:41:16

著名的得墨忒耳律（The Law of Demeter）[2]认为，模块不应了解它所操作对象的内部情形。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #2350-2350的标注 | 添加于 2018年3月27日星期二 下午7:41:39

final String outputDir = ctxt.getOptions().getScratchDir().getAbsolutePath();
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #2361-2363的标注 | 添加于 2018年3月27日星期二 下午7:42:29

final String outputDir = ctxt.options.scratchDir.absolutePath; 如果数据结构只简单地拥有公共变量，没有函数，而对象则拥有私有变量和公共函数，这个问题就不那么混淆。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #2361-2361的标注 | 添加于 2018年3月27日星期二 下午7:42:40

final String outputDir = ctxt.options.scratchDir.absolutePat
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #2361-2361的标注 | 添加于 2018年3月27日星期二 下午7:42:45

final String outputDir = ctxt.options.scratchDir.absolutePat
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #2361-2362的标注 | 添加于 2018年3月27日星期二 下午7:42:49

final String outputDir = ctxt.options.scratchDir.absolutePath;
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #2380-2382的标注 | 添加于 2018年3月27日星期二 下午7:47:10

我们发现，取得临时目录绝对路径的初衷是为了创建指定名称的临时文件。 所以，直接让ctxt对象来做这事如何？ BufferedOutputStream bos = ctxt.createScratchFileStream(classFileName);
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #2384-2385的标注 | 添加于 2018年3月28日星期三 上午10:15:58

最为精练的数据结构，是一个只有公共变量、没有函数的类。这种数据结构有时被称为数据传送对象，或DTO（Data Transfer
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #2384-2385的标注 | 添加于 2018年3月28日星期三 上午10:16:06

最为精练的数据结构，是一个只有公共变量、没有函数的类。这种数据结构有时被称为数据传送对象，或DTO（Data Transfer Objects）。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #2409-2410的标注 | 添加于 2018年3月28日星期三 上午10:16:59

我们不幸经常发现开发者往这类数据结构中塞进业务规则方法，把这类数据结构当成对象来用。这是不智的行为，因为它导致了数据结构和对象的混杂体。
==========
代码整洁之道 (马丁(Robert C. Martin))
- 您在位置 #2432-2432的标注 | 添加于 2018年3月28日星期三 上午10:19:10

使用异常而非返回码
==========
