<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Calvin</title>
  
  <subtitle>subtitle</subtitle>
  <link href="https://chewenkai.github.io/atom.xml" rel="self"/>
  
  <link href="https://chewenkai.github.io/"/>
  <updated>2020-03-15T11:21:28.000Z</updated>
  <id>https://chewenkai.github.io/</id>
  
  <author>
    <name>calvinche</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>每日单词计划</title>
    <link href="https://chewenkai.github.io/uncategorized/%E6%AF%8F%E6%97%A5%E5%8D%95%E8%AF%8D%E8%AE%A1%E5%88%92/"/>
    <id>https://chewenkai.github.io/uncategorized/%E6%AF%8F%E6%97%A5%E5%8D%95%E8%AF%8D%E8%AE%A1%E5%88%92/</id>
    <published>2020-03-15T11:21:28.000Z</published>
    <updated>2020-03-15T11:21:28.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>工作后很难过的发现自己学了那么多年的英语正在一点点的还给老师。日常工作之余会每天记录几个遇到的生疏单词，<em>本篇主要记录下我平时背过的单词，以便日后查询。本文不会给出释义。</em></p><p>由于19年的单词都是抄在纸上的，未能按天归类，20年2月26号开始按天归类。</p><span id="more"></span><hr><h3 id="标签示意："><a href="#标签示意：" class="headerlink" title="标签示意："></a><strong>标签示意</strong>：</h3><blockquote><p>这种表示易混淆词汇，无论是词型、词意还是发音上易混淆的词都会使用引用的形式包裹。</p></blockquote><p><code>phrase</code> 这种是短语标签</p><p><code>hard</code> 这种表示是较难记住的词，或者生僻词</p><hr><h3 id="·2019"><a href="#·2019" class="headerlink" title="·2019"></a><code>·2019</code></h3><hr><blockquote><p>delectate</p><p>delectable</p></blockquote><p>·</p><blockquote><p>urban</p><p>suburb</p><p>outskirt</p><p>rural</p></blockquote><p>·</p><blockquote><p>latent</p><p>potent</p><p>content</p><p>contend</p><p>intent</p><p>intend</p></blockquote><p>·</p><blockquote><p>parliament</p><p>congress</p></blockquote><p>·</p><blockquote><p>herd</p><p>herb</p></blockquote><p>·</p><blockquote><p>courier</p><p>career</p><p>carrier</p></blockquote><p>·</p><blockquote><p>poise</p><p>poison</p></blockquote><p>·</p><blockquote><p>cartoon</p><p>canteen</p></blockquote><p>·</p><blockquote><p>slander</p><p>slender</p></blockquote><p>·</p><blockquote><p>divident</p><p>divide</p><p>evident</p><p>evidence</p></blockquote><p>·</p><blockquote><p>seclude</p><p>include</p><p>exclude</p></blockquote><p>·</p><blockquote><p>doll</p><p>loll</p><p>dull</p><p>lull</p><p>roll</p><p>toll</p><p>poll</p></blockquote><p>·</p><blockquote><p>vein</p><p>vain</p></blockquote><p>·</p><blockquote><p>steward</p><p>coward</p><p>reward/award</p></blockquote><p>·</p><blockquote><p>squair</p><p>squirrel</p></blockquote><p>·</p><blockquote><p>majority</p><p>minority</p></blockquote><p>·</p><blockquote><p>linger</p><p>malinger</p></blockquote><p>·</p><blockquote><p>counsel</p><p>council</p><p>console</p><p>consult</p></blockquote><p>·</p><blockquote><p>crown</p><p>clown</p><p>crawl</p><p>sprawl</p></blockquote><p>·</p><blockquote><p>achieve</p><p>archive</p><p>archaic</p></blockquote><p>·</p><blockquote><p>carbon</p><p>carton</p><p>oxygen</p><p>hydrogen</p></blockquote><p>·</p><blockquote><p>sympathetic</p><p>synthetic</p><p>autentic</p></blockquote><p>·</p><blockquote><p>cruel</p><p>crucial</p></blockquote><p>·</p><blockquote><p>fable</p><p>parable</p></blockquote><p>·</p><blockquote><p>despair</p><p>desperate</p></blockquote><p>·</p><blockquote><p>convene</p><p>summon</p></blockquote><p>·</p><blockquote><p>resort</p><p>retort</p></blockquote><p>·</p><blockquote><p>fatuous</p><p>fabulous</p></blockquote><p>·</p><blockquote><p>scenario</p><p>scene</p></blockquote><p>·</p><blockquote><p>devastate</p><p>destroy</p></blockquote><p>·</p><blockquote><p>ambient adj.</p><p>ambience n.</p><p>obedient adj.</p><p>obedience n.</p></blockquote><p>·</p><blockquote><p>barn</p><p>storage</p><p>repository</p><p>warehouse</p></blockquote><p>·</p><blockquote><p>ordinate</p><p>ordinary</p></blockquote><p>·</p><blockquote><p>persist</p><p>insist</p></blockquote><p>·</p><blockquote><p>humility</p><p>modest</p><p>humble</p></blockquote><p>·</p><blockquote><p>peddle/peddler</p><p>pedal</p><p>petal</p><p>meddle</p><p>muddle</p><p>saddle</p></blockquote><p>·</p><blockquote><p>pervade</p><p>persuade</p></blockquote><p>·</p><blockquote><p>skeleton</p><p>sketch</p><p>singleton</p></blockquote><p>·</p><blockquote><p>brake</p><p>break</p><p>brick</p></blockquote><p>·</p><blockquote><p>bride</p><p>bridge</p></blockquote><p>·</p><blockquote><p>house</p><p>horse</p></blockquote><p>·</p><blockquote><p>distinct</p><p>distinctive</p></blockquote><p>·</p><blockquote><p>rush</p><p>rash</p><p>dash</p></blockquote><p>·</p><blockquote><p>roost</p><p>rooster/hen</p></blockquote><p>·</p><blockquote><p>sediment</p><p>sentiment</p></blockquote><p>·</p><blockquote><p>lease/rent</p><p>tease</p><p>release</p></blockquote><p>·</p><blockquote><p>carpet</p><p>parpenter</p></blockquote><p>·</p><blockquote><p>subtract</p><p>deduct</p><p>minus</p></blockquote><p>·</p><blockquote><p>patent</p><p>pattern</p></blockquote><p>·</p><blockquote><p>outright</p><p>thoroughly</p></blockquote><p>·</p><blockquote><p>impale</p><p>pierce</p><p>puncture</p></blockquote><p>·</p><blockquote><p>impetus</p><p>impede</p><p>impel</p></blockquote><p>·</p><blockquote><p>revolve</p><p>evolve</p><p>revive</p></blockquote><p>·</p><blockquote><p>clay</p><p>clan</p><p>claw</p></blockquote><p>·</p><blockquote><p>bolt</p><p>jolt</p><p>bulb</p><p>bald</p></blockquote><p>·</p><blockquote><p>laud</p><p>belaud</p><p>laudaroty</p><p>laudable</p><p>applaud</p><p>applause</p></blockquote><p>·</p><blockquote><p>stuff</p><p>staff</p><p>stiff</p></blockquote><p>·</p><p>-scribe</p><blockquote><p>scribe</p><p>scribble</p><p>script</p><p>ascribe (to)</p><p>conscribe/conscript</p><p>describe</p><p>inscribe</p><p>prescribe</p><p>transcribe</p></blockquote><p>·</p><blockquote><p><code>phrase</code> feel like doing (want to do)</p></blockquote><p>·</p><blockquote><p>nuance</p><p>nuisance</p></blockquote><p>·</p><blockquote><p>revenge</p><p>vengeance</p></blockquote><p>·</p><blockquote><p>rage</p><p>page</p><p>cage</p><p>sage</p><p>wage(salary)</p></blockquote><p>·</p><blockquote><p>jail</p><p>gaol</p><p>goal</p></blockquote><p>·</p><blockquote><p>explicit</p><p>implicit</p><p>explicate</p></blockquote><p>·</p><blockquote><p>haul</p><p>hall</p><p>hell</p><p>hail</p><p>halt</p></blockquote><p>·</p><blockquote><p>avert</p><p>advert</p><p>divert</p></blockquote><p>·</p><blockquote><p>shaver</p><p>shiver</p><p>quiver</p></blockquote><p>·</p><blockquote><p>majesty</p><p>magistrate</p></blockquote><p>·</p><blockquote><p>amateur</p><p>mature</p></blockquote><p>·</p><blockquote><p>collide</p><p>collision</p><p>crash</p></blockquote><p>·</p><blockquote><p>corpse</p><p>corps</p></blockquote><p>·</p><blockquote><p>zeal</p><p>zebra</p></blockquote><p>·</p><blockquote><p>deliver</p><p>liver</p></blockquote><p>·</p><blockquote><p>waist</p><p>waive</p></blockquote><p>·</p><blockquote><p>fault</p><p><strong>faculty</strong></p></blockquote><p>·</p><p>-spir</p><blockquote><p>perspire</p><p>inspire</p><p><strong>aspire</strong></p><p>conspire</p><p>respire</p></blockquote><p>·</p><blockquote><p>fanatic</p><p><strong>frantic</strong></p><p><strong>erratic</strong></p><p>terrific</p></blockquote><p>·</p><blockquote><p>compliment</p><p>complement</p><p>implement</p><p><strong>complacent</strong></p></blockquote><p>·</p><blockquote><p><strong>mandatory</strong></p><p><strong>laudatory</strong></p><p><strong>migratory</strong></p><p><strong>minatory</strong></p><p><strong>predatory</strong></p></blockquote><p>·</p><blockquote><p>proclaim</p><p>announce</p></blockquote><p>·</p><blockquote><p>prompt</p><p>promote</p></blockquote><p>·</p><blockquote><p>slash</p><p>slack</p><p>slander</p></blockquote><p>·</p><blockquote><p>exasperate</p><p>exaggerate</p></blockquote><p>·</p><blockquote><p>rig</p><p>rip</p><p>ripe</p><p>rape</p></blockquote><p>·</p><blockquote><p>casual</p><p>casualty</p></blockquote><p>·</p><blockquote><p>budge</p><p>bulge</p><p>budget</p><p>badge</p></blockquote><p>·</p><blockquote><p>gush</p><p>gust</p><p>gutter</p><p>rush</p><p>bush</p><p>push</p><p>hush</p></blockquote><p>·</p><blockquote><p>economic</p><p>academic</p></blockquote><p>·</p><blockquote><p>suspicious</p><p>auspicious</p><p>conspicous</p></blockquote><p>·</p><blockquote><p>medal</p><p>badge</p><p>metal</p></blockquote><p>·</p><blockquote><p>venerage</p><p>generate</p><p>enervate</p></blockquote><p>·</p><blockquote><p>freight</p><p>height</p></blockquote><p>·</p><blockquote><p>debt</p><p>loan</p><p>debit</p><p>credit</p><p>debris</p></blockquote><p>·</p><blockquote><p>petition</p><p>position</p></blockquote><p>·</p><blockquote><p>illuminate</p><p>illustrate</p><p>eliminate</p><p>culminate</p><p>fulminate</p></blockquote><p>·</p><blockquote><p>constituent</p><p>constitution</p></blockquote><p>·</p><blockquote><p>imminent</p><p>immanent</p><p>immigrant</p></blockquote><p>·</p><blockquote><p>potent</p><p>content</p><p>contend</p><p>latent</p></blockquote><p>·</p><blockquote><p>owe</p><p>own</p></blockquote><p>·</p><blockquote><p>liver</p><p>deliver</p><p>delivery</p><p>deliberate</p></blockquote><p>·</p><blockquote><p>feat</p><p>defeat</p></blockquote><p>·</p><blockquote><p>pump</p><p>bump</p><p>dump</p><p>dumb</p><p>lamp</p><p>damp</p></blockquote><p>·</p><blockquote><p>concert</p><p>cancer</p></blockquote><p>·</p><blockquote><p>instant/instantly</p><p>instantaneous/instantaneously</p></blockquote><p>·</p><blockquote><p>contaminate</p><p>contagious/ly/ness</p></blockquote><p>·</p><blockquote><p>revelation / reveal</p><p>revolution / revolt</p><p>prevalent</p></blockquote><p>·</p><blockquote><p>evaculate</p><p>evaluate</p></blockquote><p>·</p><blockquote><p>contemplate</p><p>temptation</p><p>contempt</p><p>contemporary</p><p>temporary</p></blockquote><p>·</p><blockquote><p>meditation</p><p>medication</p><p>mitigation</p></blockquote><p>·</p><blockquote><p>puncture</p><p>punctuate/punctuation</p><p>punctual</p><p>fluctuate/fluctuation</p></blockquote><p>·</p><blockquote><p>extinguish/extinction</p><p>distinguish/distinction</p><p>conspicuous</p></blockquote><p>·</p><blockquote><p>tacit</p><p>tactic</p></blockquote><p>·</p><blockquote><p>culminate</p><p>climax</p><p>orgasm</p></blockquote><p>·</p><blockquote><p>culminate</p><p>cumulate</p></blockquote><p>·</p><blockquote><p>trifle</p><p>ruffle</p><p>rifle</p></blockquote><p>·</p><blockquote><p>sanity</p><p>sanitary</p></blockquote><p>·</p><blockquote><p>tamper</p><p>hamper</p><p>pamper</p><p>temper</p><p>damp</p></blockquote><p>·</p><blockquote><p>jagged</p><p>stagger</p></blockquote><p>·</p><blockquote><p>indignant</p><p>indigenous</p><p>indignity</p></blockquote><p>·</p><blockquote><p>rub</p><p>rob</p></blockquote><p>·</p><blockquote><p>paradox</p><p>paradise</p><p>parasite</p><p>parallel</p><p>parachute</p><p>paradrop</p></blockquote><p>·</p><blockquote><p>comprise</p><p>consist</p><p>compose</p></blockquote><p>·</p><blockquote><p>sponge</p><p>sponser</p></blockquote><p>·</p><blockquote><p>impel</p><p>compel</p></blockquote><p>·</p><blockquote><p>prohibit</p><p>inhibit</p></blockquote><p>·</p><blockquote><p>monopoly</p><p>monotony</p></blockquote><p>·</p><blockquote><p>mitigate</p><p>alleviate</p><p>abbreviate</p><p>deviate</p></blockquote><p><code>phrase</code> </p><p>courting death</p><p>count on sb</p><p>so long</p><p>take time off from work</p><p>Out of the blue</p><p>Come back to roost</p><p>be dying to do sth</p><p><code>hard</code> </p><p>indiginous</p><p>prestige</p><p>lament</p><p>deficit</p><hr><h3 id="·2020"><a href="#·2020" class="headerlink" title="·2020"></a><code>·2020</code></h3><hr><h5 id="20-2-26"><a href="#20-2-26" class="headerlink" title="20.2.26"></a><code>20.2.26</code></h5><p>·</p><blockquote><p>wrench</p></blockquote><blockquote><p>wretch</p></blockquote><blockquote><p>wreck</p></blockquote><blockquote><p>drench</p><p>French</p></blockquote><p>·</p><blockquote><p>comic</p></blockquote><blockquote><p>costic</p></blockquote><p>·</p><blockquote><p>fidelity</p></blockquote><p>·</p><blockquote><p>repel</p></blockquote><blockquote><p>repeal</p></blockquote><blockquote><p>compel</p></blockquote><p>·</p><blockquote><p>defer refer infer</p></blockquote><blockquote><p>concerted</p></blockquote><p>·</p><blockquote><p>shimmer</p></blockquote><blockquote><p>glimmer</p></blockquote><p>·</p><blockquote><p>grave</p></blockquote><blockquote><p>gravel</p></blockquote><p>·</p><blockquote><p>insolvent</p></blockquote><blockquote><p>insolvancy</p></blockquote><blockquote><p>insipid</p></blockquote><p>·</p><blockquote><p>correct</p></blockquote><blockquote><p>rectify</p></blockquote><blockquote><p>revise</p></blockquote><p>·</p><blockquote><p>receipt p不发音</p></blockquote><blockquote><p>recipe e发音</p></blockquote><p>·</p><blockquote><p>slab</p></blockquote><blockquote><p>slate</p></blockquote><hr><h5 id="20-2-27"><a href="#20-2-27" class="headerlink" title="20.2.27"></a><code>20.2.27</code></h5><blockquote><p>allegiance</p></blockquote><blockquote><p>alligiant</p></blockquote><blockquote><p>allege</p></blockquote><blockquote><p>allegation</p></blockquote><p>·</p><blockquote><p>stress</p></blockquote><blockquote><p>distress</p></blockquote><blockquote><p>mistress</p></blockquote><p>·</p><blockquote><p>chaste</p></blockquote><blockquote><p>chasm</p></blockquote><p>·</p><blockquote><p>strategic (stre ti gic)</p></blockquote><p>·</p><blockquote><p>excess adj.</p></blockquote><blockquote><p>excessive adj.</p></blockquote><blockquote><p>exceed v.</p></blockquote><p>·</p><blockquote><p>organism</p></blockquote><blockquote><p>orgasm</p></blockquote><p>·</p><blockquote><p>owe</p></blockquote><blockquote><p>own</p></blockquote><blockquote><p>owl</p></blockquote><blockquote><p>awe</p></blockquote><p>·</p><blockquote><p>timidity</p></blockquote><blockquote><p>humidity</p></blockquote><blockquote><p>humility</p></blockquote><p>·</p><blockquote><p>adjacent</p></blockquote><hr><h5 id="20-2-28"><a href="#20-2-28" class="headerlink" title="20.2.28"></a><code>20.2.28</code></h5><blockquote><p>bold</p></blockquote><blockquote><p>bald</p></blockquote><p>·</p><blockquote><p>disguise</p></blockquote><blockquote><p>disgust</p></blockquote><p>·</p><blockquote><p>gloom</p></blockquote><blockquote><p>bloom</p></blockquote><p>·</p><blockquote><p>category</p></blockquote><blockquote><p>catalog</p></blockquote><p>·</p><blockquote><p>intend</p></blockquote><blockquote><p>intent</p></blockquote><p>·</p><blockquote><p>mediate</p></blockquote><blockquote><p>immediate</p></blockquote><blockquote><p>intermediate</p></blockquote><p>·</p><blockquote><p>rivet</p></blockquote><blockquote><p>pivot</p></blockquote><hr><h5 id="20-2-29"><a href="#20-2-29" class="headerlink" title="20.2.29"></a><code>20.2.29</code></h5><blockquote><p>sew</p></blockquote><blockquote><p>sewer</p></blockquote><p>·</p><blockquote><p>dizzy</p></blockquote><blockquote><p>dazzle</p></blockquote><blockquote><p>fussy</p></blockquote><p>·</p><blockquote><p>peril</p></blockquote><blockquote><p>hazard</p></blockquote><p>·</p><blockquote><p>register</p></blockquote><blockquote><p>registrar</p></blockquote><p>·</p><blockquote><p>duplicate</p></blockquote><blockquote><p>duplicity (Not same as repetition)</p></blockquote><p>·</p><blockquote><p>substitute</p></blockquote><blockquote><p>supersede</p></blockquote><hr><h5 id="20-3-1"><a href="#20-3-1" class="headerlink" title="20.3.1"></a><code>20.3.1</code></h5><blockquote><p>intimate</p></blockquote><blockquote><p>imitate</p></blockquote><p>·</p><blockquote><p>We are drasticlly, massively, manumentally different people.</p></blockquote><p>·</p><blockquote><p>slab</p></blockquote><blockquote><p>plank</p></blockquote><blockquote><p>slate</p></blockquote><blockquote><p>plate</p></blockquote><p>·</p><blockquote><p>porch</p></blockquote><blockquote><p>torch</p><p>torture</p></blockquote><p>·</p><blockquote><p>handbook</p></blockquote><blockquote><p>specification</p></blockquote><p>·</p><blockquote><p>exquisite</p></blockquote><blockquote><p>inquisitive</p></blockquote><p>·</p><blockquote><p>swear an oath</p></blockquote><p>·</p><blockquote><p>be at fault for</p></blockquote><p>·</p><blockquote><p>prerogative</p></blockquote><blockquote><p>provocative</p></blockquote><p>·</p><blockquote><p>fort</p></blockquote><blockquote><p>fortnight</p></blockquote><p>·</p><blockquote><p>avert</p></blockquote><blockquote><p>divert</p></blockquote><blockquote><p>advert</p></blockquote><p>·</p><blockquote><p>plausible</p><p>plaudit</p><p>pundit</p><p>bandit</p><p>hermit</p></blockquote><blockquote><p>laudable</p></blockquote><hr><h5 id="20-3-3"><a href="#20-3-3" class="headerlink" title="20.3.3"></a><code>20.3.3</code></h5><blockquote><p>stipulate</p></blockquote><blockquote><p>stimulate</p></blockquote><blockquote><p>simulate</p></blockquote><p>·</p><blockquote><p>resite</p></blockquote><blockquote><p>resital</p></blockquote><p>·</p><blockquote><p>regime</p></blockquote><blockquote><p>region</p></blockquote><p>·</p><blockquote><p>sporadic</p></blockquote><p>·</p><blockquote><p>superficial</p></blockquote><blockquote><p>superstition</p></blockquote><p>·</p><blockquote><p>keep down</p></blockquote><blockquote><p>put down</p></blockquote><hr><h5 id="20-3-4"><a href="#20-3-4" class="headerlink" title="20.3.4"></a><code>20.3.4</code></h5><blockquote><p>compel/compulsion</p></blockquote><blockquote><p>propel/propulsion</p></blockquote><blockquote><p>expel/expulsion</p></blockquote><blockquote><p>repel/repulsion</p></blockquote><p>·</p><blockquote><p>condemn</p></blockquote><blockquote><p>indemnity</p></blockquote><p>·</p><blockquote><p>escort</p></blockquote><blockquote><p>estate</p></blockquote><p>·</p><blockquote><p>boast</p></blockquote><blockquote><p>coast</p></blockquote><blockquote><p>toast</p></blockquote><blockquote><p>roast</p></blockquote><blockquote><hr></blockquote><blockquote><p>promise</p></blockquote><blockquote><p>compromise</p></blockquote><hr><h5 id="20-3-5"><a href="#20-3-5" class="headerlink" title="20.3.5"></a><code>20.3.5</code></h5><blockquote><p>tumble</p></blockquote><blockquote><p>stumble</p></blockquote><p>·</p><blockquote><p>plain</p></blockquote><blockquote><p>plaintive</p></blockquote><p>·</p><blockquote><p>cater</p></blockquote><blockquote><p>crater</p></blockquote><p>·</p><blockquote><p>mutter</p></blockquote><blockquote><p>matter</p></blockquote><p>·</p><blockquote><p>misfortune</p></blockquote><blockquote><p>mischance</p></blockquote><p>·</p><blockquote><p>paradox</p></blockquote><blockquote><p>orthodox</p></blockquote><hr><h5 id="20-3-6"><a href="#20-3-6" class="headerlink" title="20.3.6"></a><code>20.3.6</code></h5><blockquote><p>yield</p></blockquote><blockquote><p>field</p></blockquote><p>·</p><blockquote><p>grant</p></blockquote><blockquote><p>grand</p></blockquote><blockquote><p>brand</p></blockquote><p>·</p><blockquote><p>gratitude</p></blockquote><blockquote><p>gratuity</p></blockquote><p>·</p><blockquote><p>mutter</p></blockquote><blockquote><p>grumble</p></blockquote><p>·</p><blockquote><p>furnace</p></blockquote><blockquote><p>furnish</p></blockquote><blockquote><p>furniture</p></blockquote><p>·</p><blockquote><p>defiance</p></blockquote><blockquote><p>fiance</p></blockquote><p>·</p><blockquote><p>pertain</p></blockquote><blockquote><p>pertinent</p></blockquote><blockquote><p>protein</p></blockquote><p>·</p><blockquote><p>relay</p></blockquote><blockquote><p>delay</p></blockquote><p>·</p><blockquote><p>conducive</p></blockquote><p>·</p><blockquote><p>ensemble</p></blockquote><blockquote><p>assemble</p></blockquote><blockquote><p>resemble/resemblance/semblance</p></blockquote><p>·</p><hr><h5 id="20-3-7"><a href="#20-3-7" class="headerlink" title="20.3.7"></a><code>20.3.7</code></h5><blockquote><p>jeopardy</p></blockquote><blockquote><p>peril</p></blockquote><p>·</p><blockquote><p>ingenious</p></blockquote><blockquote><p>homogeneous</p></blockquote><blockquote><p>heterogeneous</p></blockquote><p>·</p><blockquote><p>ancestor</p></blockquote><blockquote><p>antique</p></blockquote><p>·</p><blockquote><p>moderate</p></blockquote><blockquote><p>intermediate</p></blockquote><p>·</p><blockquote><p>flush</p></blockquote><blockquote><p>blush</p></blockquote><p>·</p><blockquote><p>feeble</p></blockquote><blockquote><p>gaunt</p></blockquote><blockquote><p>faint</p></blockquote><p>·</p><blockquote><p>ludicrous</p></blockquote><blockquote><p>ridiculous</p></blockquote><blockquote><p>exhilarate</p></blockquote><p>·</p><hr><h5 id="20-3-8"><a href="#20-3-8" class="headerlink" title="20.3.8"></a><code>20.3.8</code></h5><blockquote><p>prelude</p></blockquote><blockquote><p>preclude</p></blockquote><p>·</p><blockquote><p>manure</p></blockquote><blockquote><p>fertilize</p></blockquote><p>·</p><blockquote><p>desirable</p></blockquote><blockquote><p>attractive</p></blockquote><p>·</p><blockquote><p>vain</p></blockquote><blockquote><p>vein</p></blockquote><blockquote><p>vanity</p></blockquote><p>·</p><blockquote><p>course</p></blockquote><blockquote><p>coarse</p></blockquote><p>·</p><blockquote><p>novice</p></blockquote><blockquote><p>invoice</p></blockquote><p>·</p><blockquote><p>bear</p></blockquote><blockquote><p>bare</p></blockquote><p>·</p><blockquote><p>comparative</p></blockquote><blockquote><p>imperative</p></blockquote><p>·</p><blockquote><p>invade</p></blockquote><blockquote><p>intrude</p></blockquote><blockquote><p>evade</p></blockquote><p>·</p><blockquote><p>slam</p></blockquote><blockquote><p>slum</p></blockquote><blockquote><p>slag</p></blockquote><blockquote><p>slug</p></blockquote><blockquote><p>slab</p></blockquote><blockquote><p>slub</p></blockquote><p>·</p><blockquote><p>slaughter (animal)</p></blockquote><blockquote><p>massacre</p></blockquote><blockquote><p>holocaust</p></blockquote><p>·</p><blockquote><p>youthful</p></blockquote><blockquote><p>useful</p></blockquote><p>·</p><blockquote><p>dormant</p></blockquote><blockquote><p>dormitory</p></blockquote><p>·</p><blockquote><p>tickle</p></blockquote><blockquote><p>tackle</p></blockquote><blockquote><p>trickle</p></blockquote><hr><h5 id="20-3-9"><a href="#20-3-9" class="headerlink" title="20.3.9"></a><code>20.3.9</code></h5><blockquote><p>ritual</p></blockquote><blockquote><p>rival</p></blockquote><p>·</p><blockquote><p>devious</p></blockquote><blockquote><p>vicious</p></blockquote><blockquote><p>tedious</p></blockquote><p>·</p><blockquote><p>augment</p></blockquote><blockquote><p>magnet</p></blockquote><p>·</p><blockquote><p>scrap</p></blockquote><blockquote><p>crap</p></blockquote><blockquote><p>scrape</p></blockquote><p>·</p><blockquote><p>reception</p></blockquote><blockquote><p>receipt</p></blockquote><p>·</p><blockquote><p>sighting</p></blockquote><blockquote><p>sightseeing</p></blockquote><p>·</p><blockquote><p>crumble</p></blockquote><blockquote><p>grumble(mutter)</p></blockquote><p>·</p><blockquote><p>blunt</p></blockquote><blockquote><p>blunder</p></blockquote><blockquote><p>plunder</p></blockquote><p>·</p><blockquote><p>maize</p></blockquote><blockquote><p>corn</p></blockquote><hr><h5 id="20-3-10"><a href="#20-3-10" class="headerlink" title="20.3.10"></a><code>20.3.10</code></h5><blockquote><p>acne</p></blockquote><blockquote><p>pimple</p></blockquote><blockquote><p>lump</p></blockquote><p>·</p><blockquote><p>repent</p></blockquote><blockquote><p>resent</p></blockquote><p>·</p><blockquote><p>slender</p></blockquote><blockquote><p>slander</p></blockquote><p>·</p><blockquote><p>nibble</p></blockquote><blockquote><p>nipple</p></blockquote><p>·</p><blockquote><p>perish</p></blockquote><blockquote><p>cherish</p></blockquote><p>·</p><blockquote><p>notary</p></blockquote><blockquote><p>votary</p></blockquote><blockquote><p>rotary</p></blockquote><p>·</p><blockquote><p>pest</p></blockquote><blockquote><p>pester</p></blockquote><p>·</p><blockquote><p>elevate</p></blockquote><blockquote><p>evaluate</p></blockquote><p>·</p><blockquote><p>trend</p></blockquote><blockquote><p>tendency</p></blockquote><blockquote><p>tenancy</p></blockquote><p>·</p><blockquote><p>breach</p></blockquote><blockquote><p>crevice</p></blockquote><hr><h5 id="20-3-12"><a href="#20-3-12" class="headerlink" title="20.3.12"></a><code>20.3.12</code></h5><blockquote><p>ensue</p></blockquote><blockquote><p>ensure</p></blockquote><p>·</p><blockquote><p>abridge</p></blockquote><blockquote><p>bridge</p></blockquote><blockquote><p>ridge</p></blockquote><p>·</p><blockquote><p>reticent</p></blockquote><blockquote><p>sediment</p></blockquote><p>·</p><blockquote><p>lurk</p></blockquote><blockquote><p>lure</p></blockquote><p>·</p><blockquote><p>cargo</p></blockquote><blockquote><p>embargo</p></blockquote><blockquote><p>embark</p></blockquote><p>·</p><blockquote><p>reimburse</p></blockquote><blockquote><p>redeem</p></blockquote><p>·</p><blockquote><p>impetus</p></blockquote><blockquote><p>impede</p></blockquote><p>·</p><blockquote><p>thesaurus</p></blockquote><blockquote><p>dictionary</p></blockquote><p>·</p><blockquote><p>bleach</p></blockquote><blockquote><p>breach</p></blockquote><blockquote><p>preach</p></blockquote><blockquote><p>peach</p></blockquote><p>·</p><blockquote><p>hinder</p></blockquote><blockquote><p>tinder</p></blockquote><p>·</p><blockquote><p>molest</p></blockquote><blockquote><p>harass</p></blockquote><blockquote><hr></blockquote><blockquote><p>protrude</p></blockquote><blockquote><p>intrude</p></blockquote><hr><h5 id="20-3-13"><a href="#20-3-13" class="headerlink" title="20.3.13"></a><code>20.3.13</code></h5><blockquote><p>pant</p></blockquote><blockquote><p>pants</p></blockquote><p>·</p><blockquote><p>pottery</p></blockquote><blockquote><p>lottery</p></blockquote><p>·</p><blockquote><p>grave</p></blockquote><blockquote><p>engrave</p></blockquote><p>·</p><blockquote><p>outset</p></blockquote><blockquote><p>outlet</p></blockquote><p>·</p><blockquote><p>buffet</p></blockquote><blockquote><p>Buffett</p></blockquote><p>·</p><blockquote><p>carry on</p></blockquote><blockquote><p>carry out</p></blockquote><p>·</p><blockquote><p>tilt</p></blockquote><blockquote><p>tile</p></blockquote><p>·</p><blockquote><p>claim</p></blockquote><blockquote><p>exclaim</p></blockquote><blockquote><p>declaim</p></blockquote><blockquote><p>acclaim</p></blockquote><blockquote><p>reclaim</p></blockquote><p>·</p><blockquote><p>glow</p></blockquote><blockquote><p>flow</p></blockquote><blockquote><p>blow</p></blockquote><blockquote><p>plow</p></blockquote><p>·</p><blockquote><p>reproach</p></blockquote><blockquote><p>approach</p></blockquote><p>·</p><blockquote><p>provision</p></blockquote><blockquote><p>provisional</p></blockquote><blockquote><p>improvise</p></blockquote><p>·</p><blockquote><p>germ</p></blockquote><blockquote><p>gem</p></blockquote><hr><h5 id="20-3-14"><a href="#20-3-14" class="headerlink" title="20.3.14"></a><code>20.3.14</code></h5><blockquote><p>violet</p></blockquote><blockquote><p>violent</p></blockquote><p>·</p><blockquote><p>cork</p></blockquote><blockquote><p>cock</p></blockquote><p>·</p><blockquote><p>outline</p></blockquote><blockquote><p>profile</p></blockquote><p>·</p><blockquote><p>implement</p></blockquote><blockquote><p>tool</p></blockquote><p>·</p><blockquote><p>beside</p></blockquote><blockquote><p>besides</p></blockquote><p>·</p><blockquote><p>wonder/wonderland/wonderful</p></blockquote><blockquote><p>wander</p></blockquote><blockquote><p>wound</p></blockquote><p>·</p><blockquote><p>consult</p></blockquote><blockquote><p>counsel</p></blockquote><blockquote><p>console</p></blockquote><blockquote><p>reconcile</p></blockquote><p>·-</p><blockquote><p>comment</p></blockquote><blockquote><p>commend</p></blockquote><blockquote><p>commence</p></blockquote><p>·</p><blockquote><p>relinquish</p></blockquote><blockquote><p>vanquish</p></blockquote><blockquote><p>extinguish</p></blockquote><blockquote><p>distinguish</p></blockquote><p>·</p><blockquote><p>glimpse</p></blockquote><blockquote><p>glance</p></blockquote><blockquote><p>glimmer</p></blockquote><p>·</p><blockquote><p>invoke</p></blockquote><blockquote><p>provoke</p></blockquote><blockquote><p>revoke</p></blockquote><hr><h5 id="20-3-15"><a href="#20-3-15" class="headerlink" title="20.3.15"></a><code>20.3.15</code></h5><blockquote><p>strain</p></blockquote><blockquote><p>stain</p></blockquote><p>·</p><blockquote><p>perimeter</p></blockquote><blockquote><p>parameter</p></blockquote><p>·</p><blockquote><p>complex</p></blockquote><blockquote><p>sophisticated</p></blockquote><p>·</p><blockquote><p>breed</p></blockquote><blockquote><p>bread</p></blockquote><blockquote><p>break</p></blockquote><blockquote><p>brook</p></blockquote><p>·</p><blockquote><p>flap</p></blockquote><blockquote><p>flutter</p></blockquote><p>·</p><blockquote><p>sweat</p></blockquote><blockquote><p>sweet</p></blockquote><p>·</p><blockquote><p>trickle</p></blockquote><blockquote><p>tickle</p></blockquote><p>·</p><blockquote><p>fort</p></blockquote><blockquote><p>forte</p></blockquote><p>·</p><blockquote><p>piston</p></blockquote><blockquote><p>pistol</p></blockquote><p>·</p><blockquote><p>voucher</p></blockquote><blockquote><p>vouch</p></blockquote><p>·</p><blockquote><p>scope</p></blockquote><blockquote><p>scoop</p></blockquote><p>·</p><blockquote><p>obligatory</p></blockquote><blockquote><p>compulsory</p></blockquote><p>·</p><blockquote><p>buck</p></blockquote><blockquote><p>buckle</p></blockquote><blockquote><p>bucket</p></blockquote><p>·</p><blockquote><p>notion</p></blockquote><blockquote><p>notation</p></blockquote><p>·</p><blockquote><p><code>hard</code> prolific</p></blockquote><p>·</p><blockquote><p>induce</p></blockquote><blockquote><p>reduce</p></blockquote><blockquote><p>deduce</p></blockquote><p>·</p><hr><h5 id="20-3-16"><a href="#20-3-16" class="headerlink" title="20.3.16"></a><code>20.3.16</code></h5><blockquote><p>incident</p></blockquote><blockquote><p>accident</p></blockquote><blockquote><p>incidence</p></blockquote><blockquote><p>coincidence</p></blockquote><p>·</p><blockquote><p>ornament</p></blockquote><blockquote><p>decoration</p></blockquote><p>·</p><blockquote><p>retort</p></blockquote><blockquote><p>extort</p></blockquote><p>·</p><blockquote><p><code>phrase</code> be at odd with</p></blockquote><blockquote><p><code>phrase</code> call off</p></blockquote><p>·</p><blockquote><p>contest</p></blockquote><blockquote><p>context</p></blockquote><p>·</p><blockquote><p>chant</p></blockquote><blockquote><p>merchant</p><p>merchandise</p><p>mercantile</p></blockquote><p>·</p><blockquote><p>saw</p></blockquote><blockquote><p>sew</p></blockquote><p>·</p><blockquote><p>grim</p></blockquote><blockquote><p>grimy</p></blockquote><p>·</p><blockquote><p>stroll</p></blockquote><blockquote><p>wander</p></blockquote><p>·</p><blockquote><p>cling</p></blockquote><blockquote><p>scaffold</p></blockquote><hr><h5 id="20-3-17"><a href="#20-3-17" class="headerlink" title="20.3.17"></a><code>20.3.17</code></h5><blockquote><p>increment</p></blockquote><blockquote><p>excrement</p></blockquote><p>·</p><blockquote><p>oblivious</p></blockquote><blockquote><p>obvious</p></blockquote><p>·</p><blockquote><p>victim</p></blockquote><blockquote><p>witness</p></blockquote><p>·</p><blockquote><p>melencoly</p></blockquote><blockquote><p>condolence</p></blockquote><blockquote><p>condom</p></blockquote><p>·</p><blockquote><p>fever</p></blockquote><blockquote><p>fester</p></blockquote><p>·</p><blockquote><p>craft</p></blockquote><blockquote><p>crafy</p></blockquote><p>·</p><blockquote><p>tattoo</p></blockquote><blockquote><p>taboo</p></blockquote><p>·</p><blockquote><p>martyr</p></blockquote><blockquote><p>murder</p></blockquote><p>·</p><blockquote><p>alliance</p></blockquote><blockquote><p>allegiance</p></blockquote><hr><h5 id="20-3-18"><a href="#20-3-18" class="headerlink" title="20.3.18"></a><code>20.3.18</code></h5><blockquote><p>reck</p></blockquote><blockquote><p>reckon</p></blockquote><blockquote><p>reckless</p></blockquote><p>·</p><blockquote><p>numerous</p></blockquote><blockquote><p>myriad</p></blockquote><blockquote><p>raid</p></blockquote><p>·</p><blockquote><p>permissable</p></blockquote><blockquote><p>admissable</p></blockquote><p>·</p><blockquote><p>feasible</p></blockquote><blockquote><p>sensible</p></blockquote><blockquote><p>plausible</p></blockquote><p>·</p><blockquote><p>growl</p></blockquote><blockquote><p>roar</p></blockquote><p>·</p><blockquote><p>frugle</p></blockquote><blockquote><p>brutal</p></blockquote><blockquote><p>cruel</p></blockquote><p>·</p><blockquote><p>gross</p></blockquote><blockquote><p>engross</p></blockquote><p>·</p><blockquote><p>fetter</p></blockquote><blockquote><p>fester</p></blockquote><p>·</p><blockquote><p>remit</p></blockquote><blockquote><p>emit</p></blockquote><p>·</p><blockquote><p>elegant</p></blockquote><blockquote><p>eloquent</p></blockquote><blockquote><p>delinquent</p></blockquote><p>·</p><hr><h5 id="20-3-19"><a href="#20-3-19" class="headerlink" title="20.3.19"></a><code>20.3.19</code></h5><blockquote><p>suitcase</p></blockquote><blockquote><p>briefcase</p></blockquote><p>·</p><blockquote><p>meadow</p></blockquote><blockquote><p>endow</p></blockquote><blockquote><p>donate</p></blockquote><p>·</p><blockquote><p>assess</p></blockquote><blockquote><p>access</p></blockquote><blockquote><p>asset</p></blockquote><blockquote><p>assert</p></blockquote><p>·</p><blockquote><p>restrain</p></blockquote><blockquote><p>restraint</p></blockquote><p>·</p><blockquote><p>stew</p></blockquote><blockquote><p>steward</p></blockquote><p>·</p><blockquote><p>jeer</p></blockquote><blockquote><p>tease</p></blockquote><p>·</p><blockquote><p>literate</p></blockquote><blockquote><p>illiterate (is ignorance)</p></blockquote><blockquote><p>literature</p></blockquote><blockquote><p>literally</p></blockquote><p>·</p><blockquote><p>pendulum</p></blockquote><blockquote><p>perpendicular</p></blockquote><p>·</p><blockquote><p>scene</p></blockquote><blockquote><p>obscene</p></blockquote><p>·</p><hr><h5 id="20-3-21"><a href="#20-3-21" class="headerlink" title="20.3.21"></a><code>20.3.21</code></h5><blockquote><p>drain</p></blockquote><blockquote><p>gutter</p></blockquote><blockquote><p>sewer</p></blockquote><p>·</p><blockquote><p>compliance</p></blockquote><blockquote><p>alliance</p></blockquote><p>·</p><blockquote><p>sculpture</p></blockquote><blockquote><p>statue</p></blockquote><blockquote><p>statute</p></blockquote><blockquote><p>state</p></blockquote><blockquote><p>status</p></blockquote><p>·</p><blockquote><p>sanitary</p></blockquote><blockquote><p>sanity</p></blockquote><p>·</p><blockquote><p>scene</p></blockquote><blockquote><p>obscene</p></blockquote><p>·</p><blockquote><p>fatigue</p></blockquote><blockquote><p>frugal</p></blockquote><p>·</p><blockquote><p>slit</p></blockquote><blockquote><p>slot</p></blockquote><p>·</p><blockquote><p>poultry</p></blockquote><blockquote><p>paltry</p></blockquote><p>·</p><blockquote><p>floppy</p></blockquote><blockquote><p>flock</p></blockquote><p>·-</p><blockquote><p>teem</p></blockquote><blockquote><p>team</p></blockquote><p>·</p><blockquote><p>pledge</p></blockquote><blockquote><p>plague</p></blockquote><p>·</p><blockquote><p>patron</p></blockquote><blockquote><p>patrol</p></blockquote><p>·</p><blockquote><p>stoop</p></blockquote><blockquote><p>crouch</p></blockquote><p>·</p><blockquote><p>coed</p></blockquote><blockquote><p>code</p></blockquote><p>·</p><hr><h5 id="20-3-22"><a href="#20-3-22" class="headerlink" title="20.3.22"></a><code>20.3.22</code></h5><blockquote><p>rehearsal</p></blockquote><blockquote><p>audition</p></blockquote><p>·</p><blockquote><p>rack</p></blockquote><blockquote><p>rock</p></blockquote><blockquote><p>rank</p></blockquote><p>·</p><blockquote><p>reverent</p></blockquote><blockquote><p>relavant</p></blockquote><p>·</p><blockquote><p>perplex</p></blockquote><blockquote><p>confuse</p></blockquote><p>·</p><blockquote><p>curtail</p></blockquote><blockquote><p>curtain</p></blockquote><blockquote><p>retail</p></blockquote><p>·</p><blockquote><p>escalate</p></blockquote><blockquote><p>escalator</p></blockquote><p>·</p><blockquote><p>surge</p></blockquote><blockquote><p>surf</p></blockquote><blockquote><p>surface</p></blockquote><p>·</p><blockquote><p>sustainable</p></blockquote><blockquote><p>tenable</p></blockquote><p>·</p><blockquote><p>incognito</p><p>anonymous</p></blockquote><hr><h5 id="20-3-24"><a href="#20-3-24" class="headerlink" title="20.3.24"></a><code>20.3.24</code></h5><blockquote><p>seldom</p></blockquote><blockquote><p>rarely</p></blockquote><p>·</p><blockquote><p>grind</p></blockquote><blockquote><p>granular</p></blockquote><p>·</p><blockquote><p>vindicate</p></blockquote><blockquote><p>Indicate</p></blockquote><blockquote><p>dedicate</p></blockquote><p>·</p><blockquote><p>stimulate/stimulus</p></blockquote><blockquote><p>simulate</p></blockquote><p>·</p><blockquote><p><code>phrase</code> feel for</p></blockquote><p>·</p><blockquote><p>aggregate</p></blockquote><blockquote><p>aggravate</p></blockquote><blockquote><p>arrogant</p></blockquote><p>·</p><blockquote><p>filth</p></blockquote><blockquote><p>fulfil</p></blockquote><p>·</p><blockquote><p>deluge</p></blockquote><blockquote><p>inundate/inundation</p></blockquote><p>·</p><blockquote><p>puppet</p></blockquote><blockquote><p>puppy</p></blockquote><p>·</p><blockquote><p>trill</p></blockquote><blockquote><p>chill</p></blockquote><blockquote><p>thrill</p></blockquote><p>·</p><blockquote><p>composite</p></blockquote><blockquote><p>opposite</p></blockquote><p>·</p><blockquote><p>diploma</p></blockquote><blockquote><p>diplomatic</p></blockquote><p>·</p><blockquote><p><code>pronounce</code> allocate</p></blockquote><p>·</p><blockquote><p>outlying</p></blockquote><blockquote><p>outline</p></blockquote><p>·</p><blockquote><p><code>hard</code> stern</p></blockquote><p>·</p><blockquote><p>cite</p></blockquote><blockquote><p>quote</p></blockquote><p>·</p><hr><h5 id="20-3-25"><a href="#20-3-25" class="headerlink" title="20.3.25"></a><code>20.3.25</code></h5><blockquote><p>stationery</p></blockquote><blockquote><p>stationary</p></blockquote><p>·</p><blockquote><p>overhear</p></blockquote><blockquote><p>over here</p></blockquote><p>·</p><blockquote><p>omen</p></blockquote><blockquote><p>oven</p></blockquote><p>·</p><blockquote><p>zest</p></blockquote><blockquote><p>zeal</p></blockquote><p>·</p><blockquote><p>drowse</p></blockquote><blockquote><p>drown</p></blockquote><p>·</p><blockquote><p>vigorous</p></blockquote><blockquote><p>rigorous</p></blockquote><p>·</p><blockquote><p>protocol</p></blockquote><blockquote><p>prototype</p></blockquote><p>·</p><blockquote><p><code>hard</code> mucous</p></blockquote><hr><h5 id="20-3-26"><a href="#20-3-26" class="headerlink" title="20.3.26"></a><code>20.3.26</code></h5><blockquote><p>pit</p></blockquote><blockquote><p>pity</p></blockquote><blockquote><p>petty</p></blockquote><p>·</p><blockquote><p>moan</p></blockquote><blockquote><p>groan</p></blockquote><p>·</p><blockquote><p>provisional</p></blockquote><blockquote><p>temporary</p></blockquote><p>·</p><blockquote><p>fatal</p></blockquote><blockquote><p>mortal</p></blockquote><p>·</p><blockquote><p>mint</p></blockquote><blockquote><p>meant</p></blockquote><p>·</p><blockquote><p>trickle</p></blockquote><blockquote><p>tackle</p></blockquote><blockquote><p>tuck</p></blockquote><p>·</p><blockquote><p>rot</p></blockquote><blockquote><p>wrought</p></blockquote><p>·</p><blockquote><p>bowel</p></blockquote><blockquote><p>bowl</p></blockquote><p>·</p><blockquote><p>strike</p></blockquote><blockquote><p>strive</p></blockquote><p>·</p><blockquote><p>constrain v.</p></blockquote><blockquote><p>constraint n.</p></blockquote><p>·</p><blockquote><p><code>hard</code> impromptu</p></blockquote><p>·</p><blockquote><p>prophesy v.</p></blockquote><blockquote><p>prophecy/prophet n.</p></blockquote><p>·</p><blockquote><p>derive</p></blockquote><blockquote><p>deprive</p></blockquote><hr><h5 id="20-3-27"><a href="#20-3-27" class="headerlink" title="20.3.27"></a><code>20.3.27</code></h5><blockquote><p>prologue</p></blockquote><blockquote><p>monologue</p></blockquote><blockquote><p>epilogue</p></blockquote><p>·</p><blockquote><p>aunt</p></blockquote><blockquote><p>gaunt</p></blockquote><blockquote><p>daunt</p></blockquote><blockquote><p>taunt</p></blockquote><blockquote><p>haunt</p></blockquote><blockquote><p>vaunt</p></blockquote><blockquote><p>flaunt</p></blockquote><p>·</p><blockquote><p>chief</p></blockquote><blockquote><p>mischief</p></blockquote><p>·</p><blockquote><p>shed</p></blockquote><blockquote><p>shred</p></blockquote><p>·</p><blockquote><p>study</p></blockquote><blockquote><p>sterdy</p></blockquote><p>·</p><blockquote><p><code>hard</code> cordial</p></blockquote><p>·</p><blockquote><p>ribbon</p></blockquote><blockquote><p>gibbon</p></blockquote><p>·</p><blockquote><p>slander</p></blockquote><blockquote><p>slender</p></blockquote><hr><h5 id="20-3-28"><a href="#20-3-28" class="headerlink" title="20.3.28"></a><code>20.3.28</code></h5><blockquote><p>transient</p></blockquote><blockquote><p>transit</p></blockquote><p>·</p><blockquote><p>lopside</p></blockquote><blockquote><p>lopsidedness</p></blockquote><p>·</p><blockquote><p>elbow</p></blockquote><blockquote><p>brow</p></blockquote><blockquote><p>bowl</p></blockquote><blockquote><p>bowel</p><p>towel</p></blockquote><p>·</p><blockquote><p>probation</p><p>prohibition</p><p>incubate</p><p>catalyst</p></blockquote><p>·</p><blockquote><p>profile</p></blockquote><blockquote><p>profane</p></blockquote><p>·</p><blockquote><p>shutter</p></blockquote><blockquote><p>shatter</p></blockquote><blockquote><p>shuttle</p></blockquote><p>·</p><blockquote><p>aspire</p></blockquote><blockquote><p>ascribe</p></blockquote><hr><h5 id="20-3-29"><a href="#20-3-29" class="headerlink" title="20.3.29"></a><code>20.3.29</code></h5><blockquote><p>diploma</p></blockquote><blockquote><p>dilemma</p></blockquote><p>·</p><blockquote><p>picnic</p></blockquote><blockquote><p>panic</p></blockquote><blockquote><p>clinic</p></blockquote><p>·</p><blockquote><p>decay</p></blockquote><blockquote><p>stale</p></blockquote><p>·</p><blockquote><p>vanish</p></blockquote><blockquote><p>vanquish</p></blockquote><p>·</p><blockquote><p>adapt</p></blockquote><blockquote><p>adept</p></blockquote><blockquote><p>inept</p></blockquote><blockquote><p>inert</p></blockquote><p>·</p><blockquote><p><code>hard</code> nostalgia</p></blockquote><p>·</p><blockquote><p>observation</p></blockquote><blockquote><p>observance</p></blockquote><p>·</p><blockquote><p>expel</p></blockquote><blockquote><p>evict</p></blockquote><hr><h5 id="20-3-30"><a href="#20-3-30" class="headerlink" title="20.3.30"></a><code>20.3.30</code></h5><blockquote><p>prospectus</p></blockquote><blockquote><p>perspective</p></blockquote><blockquote><p>prospect</p></blockquote><p>·</p><blockquote><p>indispensable</p></blockquote><blockquote><p>dispensable</p></blockquote><blockquote><p>dispense</p></blockquote><p>·</p><blockquote><p>sanction</p></blockquote><blockquote><p>section</p></blockquote><p>·</p><blockquote><p>keen</p></blockquote><blockquote><p>kin</p></blockquote><p>·</p><blockquote><p>narcotic</p></blockquote><blockquote><p>antarctic</p></blockquote><blockquote><p>arctic</p></blockquote><p>·</p><blockquote><p>grasp</p></blockquote><blockquote><p>gasp</p></blockquote><blockquote><p>gossip</p></blockquote><p>·</p><blockquote><p>damp</p></blockquote><blockquote><p>moist</p></blockquote><p>·</p><blockquote><p>foul</p></blockquote><blockquote><p>foil</p></blockquote><blockquote><p>coil</p></blockquote><p>·</p><blockquote><p><code>phrase</code> the pick of</p></blockquote><p>·</p><blockquote><p>scant</p></blockquote><blockquote><p>scan</p></blockquote><p>·</p><blockquote><p>grape</p></blockquote><blockquote><p>gape</p></blockquote><blockquote><p>gaze</p></blockquote><blockquote><p>graze</p></blockquote><p>·</p><blockquote><p>soluble</p></blockquote><blockquote><p>solvable</p></blockquote><blockquote><p>salute/salution</p></blockquote><p>·</p><blockquote><p>riot</p></blockquote><blockquote><p>turmoil</p></blockquote><p>·</p><blockquote><p>I’m impotent</p></blockquote><blockquote><p>Omnipotent</p></blockquote><hr><h5 id="20-3-31"><a href="#20-3-31" class="headerlink" title="20.3.31"></a><code>20.3.31</code></h5><blockquote><p>ascent</p></blockquote><blockquote><p>ascend</p></blockquote><blockquote><p>accent</p></blockquote><blockquote><p>assent</p></blockquote><blockquote><p>scent</p></blockquote><p>·</p><blockquote><p>ordeal</p></blockquote><blockquote><p>torture</p></blockquote><p>·</p><blockquote><p>prentice</p></blockquote><blockquote><p>apprentice</p></blockquote><blockquote><p>apparatus</p></blockquote><p>·</p><blockquote><p>spite</p></blockquote><blockquote><p>spit</p></blockquote><p>·</p><blockquote><p>descent/descend</p></blockquote><blockquote><p>decent</p></blockquote><p>·</p><blockquote><p>arena</p></blockquote><blockquote><p>antenna</p></blockquote><p>·</p><blockquote><p>circus</p></blockquote><blockquote><p>circuit</p></blockquote><p>·</p><hr><h5 id="20-4-1"><a href="#20-4-1" class="headerlink" title="20.4.1"></a><code>20.4.1</code></h5><blockquote><p>apparatus</p></blockquote><blockquote><p>apparition</p></blockquote><p>·</p><blockquote><p>tropic</p></blockquote><blockquote><p>topic</p></blockquote><p>·</p><blockquote><p>levy</p></blockquote><blockquote><p>navy</p></blockquote><p>·</p><blockquote><p>anguish</p></blockquote><blockquote><p>anguine</p></blockquote><p>·</p><blockquote><p>genuine</p></blockquote><blockquote><p>authentic</p></blockquote><p>·</p><blockquote><p>kettle</p></blockquote><p>·</p><blockquote><p>foremost</p></blockquote><blockquote><p>forefront</p></blockquote><p>·</p><blockquote><p>graze</p></blockquote><blockquote><p>bruise</p></blockquote><blockquote><p>abrase/abrasion</p></blockquote><hr><h5 id="20-4-2"><a href="#20-4-2" class="headerlink" title="20.4.2"></a><code>20.4.2</code></h5><blockquote><p>flick</p></blockquote><blockquote><p>flicker</p></blockquote><p>·</p><blockquote><p>paraphrase</p></blockquote><blockquote><p>paragraph</p></blockquote><p>·</p><blockquote><p>buoyant</p></blockquote><blockquote><p>buoyancy</p></blockquote><p>·</p><blockquote><p>granary</p></blockquote><blockquote><p>granular</p></blockquote><p>·</p><blockquote><p>conscience</p></blockquote><blockquote><p>conscious</p></blockquote><p>·</p><blockquote><p>scalp</p></blockquote><blockquote><p>scalpal</p></blockquote><p>·</p><blockquote><p>sauce</p></blockquote><blockquote><p>saucer</p></blockquote><p>·</p><blockquote><p>pier</p></blockquote><blockquote><p>pierce</p></blockquote><p>·</p><hr><h5 id="20-4-3"><a href="#20-4-3" class="headerlink" title="20.4.3"></a><code>20.4.3</code></h5><p>·</p><blockquote><p>assiduous</p></blockquote><blockquote><p>arduous</p></blockquote><p>·</p><blockquote><p>depict</p></blockquote><blockquote><p>narrative</p></blockquote><p>·</p><blockquote><p>decapitate</p></blockquote><blockquote><p>dilapidate</p></blockquote><p>·</p><blockquote><p>yarn</p></blockquote><blockquote><p>yard</p></blockquote><blockquote><p>yacht</p></blockquote><p>·</p><blockquote><p>marsh</p></blockquote><blockquote><p>mire</p></blockquote><blockquote><p>moor</p></blockquote><blockquote><p>swamp</p></blockquote><p>·</p><blockquote><p>lotion</p></blockquote><blockquote><p>potion</p></blockquote><p>·</p><blockquote><p>rage</p></blockquote><blockquote><p>cage</p></blockquote><blockquote><p>sage</p></blockquote><blockquote><p>wage</p></blockquote><p>·</p><blockquote><p>sever</p></blockquote><blockquote><p>fever</p></blockquote><blockquote><p>lever</p></blockquote><p>·</p><blockquote><p>dispute</p></blockquote><blockquote><p>dissipate</p></blockquote><hr><h5 id="20-4-4"><a href="#20-4-4" class="headerlink" title="20.4.4"></a><code>20.4.4</code></h5><blockquote><p>surveillance</p></blockquote><p>·</p><blockquote><p>suspence</p></blockquote><blockquote><p>suspend</p></blockquote><p>·</p><blockquote><p>diverge</p></blockquote><blockquote><p>verge</p></blockquote><p>·</p><blockquote><p>fraction</p></blockquote><blockquote><p>fracture</p></blockquote><p>·</p><blockquote><p>crumble</p></blockquote><blockquote><p>crumple</p></blockquote><blockquote><p>rumple</p></blockquote><p>·</p><blockquote><p>mortality</p></blockquote><blockquote><p>morality</p></blockquote><p>·</p><hr><h5 id="20-4-5"><a href="#20-4-5" class="headerlink" title="20.4.5"></a><code>20.4.5</code></h5><blockquote><p>wine</p></blockquote><blockquote><p>wing</p></blockquote><p>·</p><blockquote><p>antonym</p></blockquote><blockquote><p>synonym</p></blockquote><p>·</p><blockquote><p>estate</p></blockquote><blockquote><p>esteem</p></blockquote><p>·</p><blockquote><p>din</p></blockquote><blockquote><p>dean</p></blockquote><p>·</p><blockquote><p>rudeness</p></blockquote><blockquote><p>ruthless</p></blockquote><p>·</p><blockquote><p>advocate</p></blockquote><blockquote><p>advertise</p></blockquote><p>·</p><blockquote><p>step</p></blockquote><blockquote><p>steep</p></blockquote><p>·</p><blockquote><p>scrupulous</p></blockquote><blockquote><p>meticulous</p></blockquote><p>·</p><blockquote><p>intuition</p></blockquote><blockquote><p>institution</p></blockquote><p>·</p><blockquote><p>wane</p></blockquote><blockquote><p>cane</p></blockquote><blockquote><p>lane</p></blockquote><blockquote><p>sane</p></blockquote><blockquote><p>mane</p></blockquote><p>·</p><hr><h5 id="20-4-6"><a href="#20-4-6" class="headerlink" title="20.4.6"></a><code>20.4.6</code></h5><p>·</p><blockquote><p>mercy</p></blockquote><blockquote><p>mercury</p></blockquote><p>·</p><blockquote><p>etiquette</p></blockquote><blockquote><p>netiquette</p></blockquote><p>·</p><blockquote><p>subordinate</p></blockquote><blockquote><p>superior</p></blockquote><p>·</p><blockquote><p>prevail</p></blockquote><blockquote><p>reveal</p></blockquote><p>·</p><blockquote><p>scotch</p></blockquote><blockquote><p>scorch</p></blockquote><p>·</p><blockquote><p>circulate</p></blockquote><blockquote><p>regulate</p></blockquote><p>·</p><blockquote><p>recline</p></blockquote><blockquote><p>decline</p></blockquote><blockquote><p>incline</p></blockquote><p>·</p><blockquote><p>enzyme</p></blockquote><blockquote><p>catalyst</p></blockquote><p>·</p><blockquote><p>anonymous</p></blockquote><blockquote><p>unanimous</p></blockquote><hr><h5 id="20-4-7"><a href="#20-4-7" class="headerlink" title="20.4.7"></a><code>20.4.7</code></h5><blockquote><p>sarcasm</p></blockquote><blockquote><p>coerce</p></blockquote><p>·</p><blockquote><p>surplus</p></blockquote><blockquote><p>surpass</p></blockquote><p>·</p><blockquote><p>arena</p></blockquote><blockquote><p>antenna</p></blockquote><p>·</p><blockquote><p>salvage</p></blockquote><blockquote><p>savage</p></blockquote><blockquote><p>ravage</p></blockquote><p>·</p><blockquote><p>excess</p></blockquote><blockquote><p>exceed</p></blockquote><blockquote><p>excel</p></blockquote><blockquote><p>extol</p></blockquote><p>·</p><blockquote><p>lava</p></blockquote><blockquote><p>lavatory</p></blockquote><p>·</p><blockquote><p>moth</p></blockquote><blockquote><p>mother</p></blockquote><p>·</p><blockquote><p>refrigerate</p></blockquote><blockquote><p>fringe</p></blockquote><p>·</p><blockquote><p>vault</p></blockquote><blockquote><p>fault</p></blockquote><blockquote><p>foul</p></blockquote><p>·</p><blockquote><p>rein</p></blockquote><blockquote><p>rain</p></blockquote><p>·</p><blockquote><p>lank</p></blockquote><blockquote><p>slender</p></blockquote><blockquote><p>pliable</p></blockquote><hr><h5 id="20-4-8"><a href="#20-4-8" class="headerlink" title="20.4.8"></a><code>20.4.8</code></h5><blockquote><p>stride</p></blockquote><blockquote><p>strike</p></blockquote><blockquote><p>stroke</p></blockquote><p>·</p><blockquote><p>trait</p></blockquote><blockquote><p>traitor</p></blockquote><blockquote><p>strait</p></blockquote><p>·</p><blockquote><p>piss off</p></blockquote><blockquote><p>pass off</p></blockquote><p>·</p><blockquote><p>feline</p></blockquote><blockquote><p>cat</p></blockquote><p>·</p><blockquote><p>sustenance</p></blockquote><blockquote><p>sustain</p></blockquote><p>·</p><blockquote><p>pollute pollution</p></blockquote><blockquote><p>pollinate pollination</p></blockquote><p>·</p><blockquote><p>tuck</p></blockquote><blockquote><p>tug</p></blockquote><p>·</p><blockquote><p>treatise</p></blockquote><blockquote><p>thesis</p></blockquote><p>·</p><hr><h5 id="20-4-9"><a href="#20-4-9" class="headerlink" title="20.4.9"></a><code>20.4.9</code></h5><blockquote><p>heir</p></blockquote><blockquote><p>air</p></blockquote><p>·</p><blockquote><p>subside</p></blockquote><blockquote><p>subsidy</p></blockquote><p>·</p><blockquote><p>rip</p></blockquote><blockquote><p>reap</p></blockquote><blockquote><p>rape</p></blockquote><p>·</p><blockquote><p>quench</p></blockquote><blockquote><p>extinguish</p></blockquote><p>·</p><hr><h5 id="20-4-10"><a href="#20-4-10" class="headerlink" title="20.4.10"></a><code>20.4.10</code></h5><blockquote><p>pulp</p></blockquote><blockquote><p>jam</p></blockquote><p>·</p><blockquote><p>situate</p></blockquote><blockquote><p>locate</p></blockquote><p>·</p><blockquote><p>mediocre</p></blockquote><blockquote><p>coerce</p></blockquote><p>·</p><blockquote><p>magnate</p></blockquote><blockquote><p>magnet</p></blockquote><p>·</p><blockquote><p>torrent</p></blockquote><blockquote><p>turbulence</p></blockquote><p>·</p><blockquote><p>pirate/piracy</p></blockquote><blockquote><p>private/privacy</p></blockquote><p>·</p><hr><h5 id="20-4-11"><a href="#20-4-11" class="headerlink" title="20.4.11"></a><code>20.4.11</code></h5><blockquote><p>agony</p></blockquote><p>·</p><blockquote><p>bureau</p></blockquote><blockquote><p>burial [e]</p></blockquote><p>·</p><blockquote><p>curve</p></blockquote><blockquote><p>curse</p></blockquote><p>·</p><blockquote><p>brow</p></blockquote><blockquote><p>brew</p></blockquote><p>·</p><blockquote><p>turf</p></blockquote><p>·</p><blockquote><p>keep at</p></blockquote><blockquote><p>keep sb up</p></blockquote><p>·</p><blockquote><p>blur</p></blockquote><blockquote><p>obscure</p></blockquote><p>·</p><blockquote><p>manacle</p></blockquote><p>·</p><blockquote><p>vigilant</p></blockquote><p>·</p><blockquote><p>plump</p></blockquote><blockquote><p>plum</p></blockquote><blockquote><p>plummet</p></blockquote><blockquote><p>plumb</p></blockquote><p>·</p><blockquote><p>ambition</p></blockquote><blockquote><p>ambiguity</p></blockquote><p>·</p><blockquote><p>delicate</p></blockquote><blockquote><p>deliberate</p></blockquote><p>·</p><blockquote><p>scatter</p></blockquote><blockquote><p>disperse</p></blockquote><p>·</p><blockquote><p>wink</p></blockquote><blockquote><p>brink</p></blockquote><blockquote><p>precipice</p></blockquote><blockquote><p>stiff</p></blockquote><blockquote><p>cliff</p></blockquote><hr><h5 id="TO-BE-CONTINUE"><a href="#TO-BE-CONTINUE" class="headerlink" title="TO BE CONTINUE"></a><strong>TO BE CONTINUE</strong></h5>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;工作后很难过的发现自己学了那么多年的英语正在一点点的还给老师。日常工作之余会每天记录几个遇到的生疏单词，&lt;em&gt;本篇主要记录下我平时背过的单词，以便日后查询。本文不会给出释义。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;由于19年的单词都是抄在纸上的，未能按天归类，20年2月26号开始按天归类。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Study" scheme="https://chewenkai.github.io/tags/Study/"/>
    
    <category term="English" scheme="https://chewenkai.github.io/tags/English/"/>
    
  </entry>
  
  <entry>
    <title>Git保命大全</title>
    <link href="https://chewenkai.github.io/uncategorized/git%E4%BF%9D%E5%91%BD%E5%A4%A7%E5%85%A8/"/>
    <id>https://chewenkai.github.io/uncategorized/git%E4%BF%9D%E5%91%BD%E5%A4%A7%E5%85%A8/</id>
    <published>2019-08-06T09:48:49.000Z</published>
    <updated>2019-08-06T09:48:49.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="💥我不小心删除了分支-或者-删除了Stash-或者-丢失了提交（reset-—hard）-怎么办！"><a href="#💥我不小心删除了分支-或者-删除了Stash-或者-丢失了提交（reset-—hard）-怎么办！" class="headerlink" title="💥我不小心删除了分支  或者  删除了Stash 或者  丢失了提交（reset —hard） 怎么办！"></a>💥我不小心删除了分支  或者  删除了Stash 或者  丢失了提交（reset —hard） 怎么办！</h3><p>操作前，建议备份一下当前的分支，或者切换到新的分支进行操作。</p><h5 id="1-确定正确的SHA-1值"><a href="#1-确定正确的SHA-1值" class="headerlink" title="1/ 确定正确的SHA-1值"></a>1/ 确定正确的SHA-1值</h5><p>首先，你需要找到分支或者提交的SHA-1值，如果你已经知道丢失分支的SHA-1值，可跳过这个步骤。</p><p>通过<code>git reflog</code>命令查找对git作出过的修改，可以查询到HEAD的变更记录，如commit, rebase, checkout, reset等。示例如下：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment"># git reflog</span></span><br><span class="line">a55a2725e HEAD@{846}: checkout: moving from calvinche/3650/voiceopt to calvinche/3650/bugfix</span><br><span class="line">5271cecfc HEAD@{847}: commit: --story=855394891 【语音控制】语音控制功能优化</span><br><span class="line">5413bd7ce HEAD@{848}: checkout: moving from calvinche/3650/bugfix to calvinche/3650/voiceopt</span><br><span class="line">a55a2725e HEAD@{849}: commit: --bug=74100899 【畅听页卡】活动弹窗遮挡播放列表的问题</span><br><span class="line">5413bd7ce HEAD@{850}: checkout: moving from calvinche/3650/voiceopt to calvinche/3650/bugfix</span><br><span class="line">5413bd7ce HEAD@{851}: reset: moving to 5413bd7ce1a1ddfbd12406175a83c863f9d68da6</span><br><span class="line">ff1200963 HEAD@{852}: commit: --story=855394891 【语音控制】语音控制功能优化</span><br></pre></td></tr></tbody></table></figure><p>第一列就是所在提交的SHA-1值</p><p>如果通过reflog无法找到丢失的分支或者提交，那你还可以通过<code>git fsck</code>命令查找git数据库中所有丢失的分支信息：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fsck --full --no-reflogs --unreachable --lost-found | grep commit | <span class="built_in">cut</span> -d\  -f3 | xargs -n 1 git <span class="built_in">log</span> -n 1 --pretty=oneline &gt; ~/lost-found.txt</span><br></pre></td></tr></tbody></table></figure><p>由于输出的结果通常较大，我们一般将命令的输出重定向到一个文本文件中进行查看，其输出的结果如下所示：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">e005fc257bb96252e9bc84deb255bba28f829e63 --story=854880635 【技术优化】升级gradle: 修复打包无产物</span><br><span class="line">b90bace85ba53c9a229f84a458935aeb6858bc6c --story=854880635 【技术优化】升级gradle: 修改build_patch失败</span><br><span class="line">9b51c859899d0699a73c699fb349d8ff952cf7ae WIP on master: c5312d039 Merge branch <span class="string">'calvinche/dev/car_adapt'</span> into <span class="string">'master'</span></span><br><span class="line">aa0c44873d24bc07487e4e5b8883189573c55029 --story=64610857 【语音交互】播放控制功能:UI走查</span><br><span class="line">d40e8c2ed3122a30164c82696a72bf4d5fbd8c58 --story=854880635 【技术优化】升级gradle: 修复打包无产物</span><br><span class="line">ed0f98b6ebd7bb9bbb6da21467fdea2931bab598 --story=64610857 【语音交互】播放控制功能:实现语音识别和命令执行</span><br></pre></td></tr></tbody></table></figure><p>然后我们就可以通过提交的名字或者通过<code>git log -p &lt;commit&gt;</code>查看提交的内容或<code>git cat-file -p &lt;commit&gt;</code>查看提交的信息来确定我们要恢复的提交，确定了要恢复的提交后，复制它的SHA-1值备用。</p><h6 id="2-恢复"><a href="#2-恢复" class="headerlink" title="2/ 恢复"></a>2/ 恢复</h6><p>如果你要恢复的是分支，使用类似于下面的命令：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;new branch name&gt; &lt;SHA-1&gt;</span><br></pre></td></tr></tbody></table></figure><p>如果你要恢复的是提交，那么可以直接：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard &lt;SHA-1&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="💥我的提交历史重复臃肿，杂乱无章怎么办！"><a href="#💥我的提交历史重复臃肿，杂乱无章怎么办！" class="headerlink" title="💥我的提交历史重复臃肿，杂乱无章怎么办！"></a>💥我的提交历史重复臃肿，杂乱无章怎么办！</h3><p>有时候，在开发过程中，可能被产品或设计打断，或者前期考虑不够严谨导致后面补充了过多的修补提交，这时候可以通过Rebase的交互模式，对提交历史进行“美化”。</p><p>例如下面一个提交记录：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--story=854849047(d01f70f39)【技术优化】fresco图片库更新 hypertian* 2019-05-23 13:12</span><br><span class="line">--story=64746051 【个人中心】增加开机兴趣选择修改: UI走查修改1 calvinche 2019-05-20 22:25</span><br><span class="line">--story=64746051 【个人中心】增加开机兴趣选择修改: 产品补充逻辑1 calvinche 2019-05-23 15:59</span><br><span class="line">--story=64746051 【个人中心】增加开机兴趣选择修改: UI走查修改2 calvinche 2019-05-21 14:50</span><br><span class="line">--story=64746051 【个人中心】增加开机兴趣选择修改:产品补充逻辑2 calvinche 2019-05-23 18:25</span><br></pre></td></tr></tbody></table></figure><p>可以看出，UI修改和逻辑修改提交了多次，这个时候如果把两个UI走查的提交合并，把两个补充逻辑的提交合并，提交历史看起来会清楚干净很多，于是，我们使用rebase操作来整理提交记录：</p><h5 id="1-进入Rebase交互模式"><a href="#1-进入Rebase交互模式" class="headerlink" title="1/ 进入Rebase交互模式"></a>1/ 进入Rebase交互模式</h5><p>找到要修改提交的上一条提交的SHA值，如上面例子，要对下面四个提交进行修改，则需要找到”fresco图片库更新”这个提交的SHA值：d01f70f39，然后运行：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i d01f70f3</span><br></pre></td></tr></tbody></table></figure><p>就进入到下面的页面：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">pick 39741ee1a --story=64746051 【个人中心】增加开机兴趣选择修改:  UI走查修改1</span><br><span class="line">pick 8078fa8f9 --story=64746051 【个人中心】增加开机兴趣选择修改: 产品补充逻辑1</span><br><span class="line">pick 6f830afa3 --story=64746051 【个人中心】增加开机兴趣选择修改: UI走查修改2</span><br><span class="line">pick 5efe76189 --story=64746051 【个人中心】增加开机兴趣选择修改:产品补充逻辑2</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rebase d01f70f39..5efe76189 onto d01f70f39 (4 commands)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Commands:</span></span><br><span class="line"><span class="comment"># p, pick &lt;commit&gt; = use commit</span></span><br><span class="line"><span class="comment"># r, reword &lt;commit&gt; = use commit, but edit the commit message</span></span><br><span class="line"><span class="comment"># e, edit &lt;commit&gt; = use commit, but stop for amending</span></span><br><span class="line"><span class="comment"># s, squash &lt;commit&gt; = use commit, but meld into previous commit</span></span><br><span class="line"><span class="comment"># f, fixup &lt;commit&gt; = like "squash", but discard this commit's log message</span></span><br><span class="line"><span class="comment"># x, exec &lt;command&gt; = run command (the rest of the line) using shell</span></span><br><span class="line"><span class="comment"># d, drop &lt;commit&gt; = remove commit</span></span><br><span class="line"><span class="comment"># l, label &lt;label&gt; = label current HEAD with a name</span></span><br><span class="line"><span class="comment"># t, reset &lt;label&gt; = reset HEAD to a label</span></span><br><span class="line"><span class="comment"># m, merge [-C &lt;commit&gt; | -c &lt;commit&gt;] &lt;label&gt; [# &lt;oneline&gt;]</span></span><br><span class="line"><span class="comment"># .       create a merge commit using the original merge commit's</span></span><br><span class="line"><span class="comment"># .       message (or the oneline, if no original merge commit was</span></span><br><span class="line"><span class="comment"># .       specified). Use -c &lt;commit&gt; to reword the commit message.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># These lines can be re-ordered; they are executed from top to bottom.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If you remove a line here THAT COMMIT WILL BE LOST.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#       However, if you remove everything, the rebase will be aborted.</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h5 id="2-使用合适的命令对提交记录进行修改"><a href="#2-使用合适的命令对提交记录进行修改" class="headerlink" title="2/ 使用合适的命令对提交记录进行修改"></a>2/ 使用合适的命令对提交记录进行修改</h5><p>每次提交按照时间升序排列，也就是最上面的提交是最早的提交。每个提交前面是要进行修改的命令，下面列出了所有可用的命令的名字及其功能，默认是pick，也就是保留这条提交，什么也不做的意思。这里解释一下几个常用的命令：</p><blockquote><p>reword：重命名提交信息</p></blockquote><blockquote><p>edit：编辑提交的内容，可以用于添加或移出提交的文件</p></blockquote><blockquote><p>squash：将当前提交和前一条提交合并，使用后，会跳到另一个页面，编辑合并后的提交信息</p></blockquote><blockquote><p>fixup：将当前提交和前一条提交合并，使用后，丢弃当前的提交信息，直接以上一条提交信息为合并后的提交信息</p></blockquote><blockquote><p>drop：删除当前的提交</p></blockquote><p>⚠️ 需要<strong>注意</strong>的是这句话：</p><blockquote><p>These lines can be re-ordered; they are executed from top to bottom.</p></blockquote><p>意思是说，改变上面一行行的提交记录的顺序是可以改变最终的提交顺序的，不过需要注意的是，改变顺序可能会带来conflict，如果遇到冲突，需要解决冲突后才能继续Rebase。</p><p>可以看下视频中的演示消化理解</p><a href="/uncategorized/git%E4%BF%9D%E5%91%BD%E5%A4%A7%E5%85%A8/rebase.mov" title="rebase interactively">rebase interactively</a><h5 id="3-恢复到Rebase前"><a href="#3-恢复到Rebase前" class="headerlink" title="3/ 恢复到Rebase前"></a>3/ 恢复到Rebase前</h5><p>如果你rebase结束后发现并不是自己想要的结果，这个时候怎么恢复到rebase之前呢？很简单，运行下下面这个命令即可:</p><p><code>git reset --hard ORIG_HEAD</code></p><p>In case <code>ORIG_HEAD</code> is no longer useful, you can also use the <code>branchName@{n}</code> syntax, where <code>n</code> is the nth prior position of the branch pointer. So for example, if you rebase <code>featureA</code> branch onto your <code>master</code> branch, but you don’t like the result of the rebase, then you can simply do <code>git reset --hard featureA@{1}</code> to reset the branch back to exactly where it was before you did the rebase. You can read more about the branch@{n} syntax at <a target="_blank" rel="noopener" href="http://git-scm.com/docs/gitrevisions">the official Git docs for revisions</a>. </p><h5 id="⚠️⚠️⚠️-Rebase的最基本原则"><a href="#⚠️⚠️⚠️-Rebase的最基本原则" class="headerlink" title="⚠️⚠️⚠️ Rebase的最基本原则"></a>⚠️⚠️⚠️ Rebase的最基本原则</h5><p>既然Rebase命令可以删除和编辑历史提交，那同样也有一个重要的原则：</p><blockquote><p> <strong>永远不要对已经推到主干分支服务器或者团队其他成员的提交进行Rebase，我们选择Rebase范围应该在自己本地工作范围内。</strong></p></blockquote><p> 否则，人民群众会仇恨你，你的朋友和家人也会嘲笑你，唾弃你。</p><h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><p>[1] https://www.internalpointers.com/post/squash-commits-into-one-git</p><p>[2] https://ohshitgit.com/</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;💥我不小心删除了分支-或者-删除了Stash-或者-丢失了提交（reset-—hard）-怎么办！&quot;&gt;&lt;a href=&quot;#💥我不小心删除了分支-或者-删除了Stash-或者-丢失了提交（reset-—hard）-怎么办！&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    
    <category term="日常总结" scheme="https://chewenkai.github.io/tags/%E6%97%A5%E5%B8%B8%E6%80%BB%E7%BB%93/"/>
    
    <category term="Git" scheme="https://chewenkai.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>记一次overloadaggressively造成的崩溃</title>
    <link href="https://chewenkai.github.io/uncategorized/%E8%AE%B0%E4%B8%80%E6%AC%A1overloadaggressively%E9%80%A0%E6%88%90%E7%9A%84%E5%B4%A9%E6%BA%83/"/>
    <id>https://chewenkai.github.io/uncategorized/%E8%AE%B0%E4%B8%80%E6%AC%A1overloadaggressively%E9%80%A0%E6%88%90%E7%9A%84%E5%B4%A9%E6%BA%83/</id>
    <published>2019-06-10T03:29:58.000Z</published>
    <updated>2019-06-10T03:29:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>将Kotlin版本从1.1.2-4升级到1.3.11后，发现打的release包开机就会崩溃：崩溃日志为</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">java.lang.RuntimeException: Unable to instantiate application com.tencent.sigma.patch.HotPatchApplication: java.lang.ClassNotFoundException: Didn<span class="string">'t find class "com.tencent.sigma.patch.HotPatchApplication" on path: DexPathList[[zip file "/data/app/com.tencent.dreamreader-P2-qUIVdDrdEOhONvRwOtw==/base.apk"],nativeLibraryDirectories=[/data/app/com.tencent.dreamreader-P2-qUIVdDrdEOhONvRwOtw==/lib/arm, /data/app/com.tencent.dreamreader-P2-qUIVdDrdEOhONvRwOtw==/base.apk!/lib/armeabi, /system/lib, /vendor/lib]]</span></span><br><span class="line"><span class="string">     at android.app.LoadedApk.makeApplication(LoadedApk.java:993)</span></span><br><span class="line"><span class="string">     at android.app.ActivityThread.handleBindApplication(ActivityThread.java:5801)</span></span><br><span class="line"><span class="string">     at android.app.ActivityThread.-wrap1(Unknown Source:0)</span></span><br><span class="line"><span class="string">     at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1683)</span></span><br><span class="line"><span class="string">     at android.os.Handler.dispatchMessage(Handler.java:106)</span></span><br><span class="line"><span class="string">     at android.os.Looper.loop(Looper.java:173)</span></span><br><span class="line"><span class="string">     at android.app.ActivityThread.main(ActivityThread.java:6650)</span></span><br><span class="line"><span class="string">     at java.lang.reflect.Method.invoke(Native Method)</span></span><br><span class="line"><span class="string">     at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:547)</span></span><br><span class="line"><span class="string">     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:818)</span></span><br><span class="line"><span class="string">  Caused by: java.lang.ClassNotFoundException: Didn'</span>t find class <span class="string">"com.tencent.sigma.patch.HotPatchApplication"</span> on path: DexPathList[[zip file <span class="string">"/data/app/com.tencent.dreamreader-P2-qUIVdDrdEOhONvRwOtw==/base.apk"</span>],nativeLibraryDirectories=[/data/app/com.tencent.dreamreader-P2-qUIVdDrdEOhONvRwOtw==/lib/arm, /data/app/com.tencent.dreamreader-P2-qUIVdDrdEOhONvRwOtw==/base.apk!/lib/armeabi, /system/lib, /vendor/lib]]</span><br><span class="line">     at dalvik.system.BaseDexClassLoader.findClass(BaseDexClassLoader.java:125)</span><br><span class="line">     at java.lang.ClassLoader.loadClass(ClassLoader.java:379)</span><br><span class="line">     at java.lang.ClassLoader.loadClass(ClassLoader.java:312)</span><br><span class="line">     at android.app.Instrumentation.newApplication(Instrumentation.java:1088)</span><br><span class="line">     at android.app.LoadedApk.makeApplication(LoadedApk.java:987)</span><br><span class="line">     at android.app.ActivityThread.handleBindApplication(ActivityThread.java:5801)&nbsp;</span><br><span class="line">     at android.app.ActivityThread.-wrap1(Unknown Source:0)&nbsp;</span><br><span class="line">     at android.app.ActivityThread<span class="variable">$H</span>.handleMessage(ActivityThread.java:1683)&nbsp;</span><br><span class="line">     at android.os.Handler.dispatchMessage(Handler.java:106)&nbsp;</span><br><span class="line">     at android.os.Looper.loop(Looper.java:173)&nbsp;</span><br><span class="line">     at android.app.ActivityThread.main(ActivityThread.java:6650)&nbsp;</span><br><span class="line">     at java.lang.reflect.Method.invoke(Native Method)&nbsp;</span><br><span class="line">     at com.android.internal.os.RuntimeInit<span class="variable">$MethodAndArgsCaller</span>.run(RuntimeInit.java:547)&nbsp;</span><br><span class="line">     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:818)&nbsp;</span><br><span class="line"> Suppressed: java.io.IOException: Failed to open dex files from /data/app/com.tencent.dreamreader-P2-qUIVdDrdEOhONvRwOtw==/base.apk because: Failure to verify dex file <span class="string">'/data/app/com.tencent.dreamreader-P2-qUIVdDrdEOhONvRwOtw==/base.apk'</span>: Out-of-order annotation_element name_idx: 7150 <span class="keyword">then</span> 7150</span><br><span class="line">     at dalvik.system.DexFile.openDexFileNative(Native Method)</span><br><span class="line">     at dalvik.system.DexFile.openDexFile(DexFile.java:353)</span><br><span class="line">     at dalvik.system.DexFile.&lt;init&gt;(DexFile.java:100)</span><br><span class="line">     at dalvik.system.DexFile.&lt;init&gt;(DexFile.java:74)</span><br><span class="line">     at dalvik.system.DexPathList.loadDexFile(DexPathList.java:374)</span><br><span class="line">     at dalvik.system.DexPathList.makeDexElements(DexPathList.java:337)</span><br><span class="line">     at dalvik.system.DexPathList.&lt;init&gt;(DexPathList.java:157)</span><br><span class="line">     at dalvik.system.BaseDexClassLoader.&lt;init&gt;(BaseDexClassLoader.java:65)</span><br><span class="line">     at dalvik.system.PathClassLoader.&lt;init&gt;(PathClassLoader.java:64)</span><br><span class="line">     at com.android.internal.os.ClassLoaderFactory.createClassLoader(ClassLoaderFactory.java:73)</span><br><span class="line">     at com.android.internal.os.ClassLoaderFactory.createClassLoader(ClassLoaderFactory.java:88)</span><br><span class="line">     at android.app.ApplicationLoaders.getClassLoader(ApplicationLoaders.java:69)</span><br><span class="line">     at android.app.ApplicationLoaders.getClassLoader(ApplicationLoaders.java:35)</span><br><span class="line">     at android.app.LoadedApk.createOrUpdateClassLoaderLocked(LoadedApk.java:695)</span><br><span class="line">     at android.app.LoadedApk.getClassLoader(LoadedApk.java:729)</span><br><span class="line">     at android.app.LoadedApk.getResources(LoadedApk.java:956)</span><br><span class="line">     at android.app.ContextImpl.createAppContext(ContextImpl.java:2282)</span><br><span class="line">     at android.app.ActivityThread.handleBindApplication(ActivityThread.java:5723)</span><br><span class="line">     ... 8 more</span><br></pre></td></tr></tbody></table></figure><p>乍一看，以为是HotPatchApplication被混淆的原因导致Class Not Found，于是尝试keep住HotPatchApplication这个类，但是发现问题依旧。于是又怀疑是前不久升级gradle对分包造成了影响，对apk中的dex文件进行分析，发现HotPatchApplication这个类稳稳的躺在第一个dex文件中。</p><p>后来又进行了以下的尝试：</p><p>​     1.尝试按顺序更改Kotlin版本，最后，当Kotlin版本为1.3.0时，发现问题出现了。  </p><p>​    2.另一个线索是当我打开Proguard时，那就是<code>minifyEnable true</code>，崩溃就出现了。</p><p>经过以上排查，基本确定了问题出在Kotlin和混淆的身上。最后发现上述日志中有一行：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Suppressed: java.io.IOException: Failed to open dex files from /data/app/com.tencent.dreamreader-P2-qUIVdDrdEOhONvRwOtw==/base.apk because: Failure to verify dex file <span class="string">'/data/app/com.tencent.dreamreader-P2-qUIVdDrdEOhONvRwOtw==/base.apk'</span>: Out-of-order annotation_element name_idx: 7150 <span class="keyword">then</span> 7150</span><br></pre></td></tr></tbody></table></figure><p>这个报错是第一次见到，上网搜了下，最终定位在混淆时的一个参数身上：<code>-overloadaggressively</code></p><p>ProGuard官网解释：</p><blockquote><p>-overloadaggressivelySpecifies to apply aggressive overloading while obfuscating. Multiple fields and methods can then get the same names, as long as their arguments and return types are different, as required by Java bytecode (not just their arguments, as required by the Java language). This option can make the processed code even smaller (and less comprehensible). Only applicable when obfuscating.</p></blockquote><p>可以看出，开启该选项可能把不同的方法或者变量混淆成相同的名字，这样会尽可能的减小代码体积。但是由于过于激进，造成了dex文件中有重复annotation_element，这个问题在编译和打包时并不会报错，只有在开启软件时才会发现。</p><p>至于为什么升级了Kotlin才有这个问题，猜测原因是新版本的kotlin中加入了Keep注释与Java的Keep注释同名造成的。</p><p><strong>解决办法：</strong></p><p>去掉混淆文件（proguard.txt）中的-overloadaggressively</p><p>参考：</p><p>https://stackoverflow.com/questions/56458360/app-crashed-when-r8-enabled-with-existing-proguard-settings</p><p>https://issuetracker.google.com/issues/129241209#comment11</p><p>https://stackoverflow.com/questions/51948250/failure-to-verify-dex-file-out-of-order-annotation-element-name-idx</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;将Kotlin版本从1.1.2-4升级到1.3.11后，发现打的release包开机就会崩溃：崩溃日志为&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c</summary>
      
    
    
    
    
    <category term="Android" scheme="https://chewenkai.github.io/tags/Android/"/>
    
    <category term="日常记录" scheme="https://chewenkai.github.io/tags/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>初识ViewPager2</title>
    <link href="https://chewenkai.github.io/uncategorized/%E5%88%9D%E8%AF%86viewpager2/"/>
    <id>https://chewenkai.github.io/uncategorized/%E5%88%9D%E8%AF%86viewpager2/</id>
    <published>2019-03-11T01:32:41.000Z</published>
    <updated>2019-03-11T01:32:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>ViewPager2是Google于2019年2月7号发布的ViewPager的升级版本，目前最新版本是1.0.0-alpha01。ViewPager2主要解决了传统ViewPager中的几个问题：</p><ul><li>不支持从右到左布局</li><li>不支持纵向滚动</li><li>notifyDataSetChanged()有时不起作用的Bug</li></ul><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>查看ViewPager2内部代码可以看出，其实现原理是在其内部封装了一个RecyclerView，利用LinearLayoutManager+PagerSnapHelper实现了ViewPager的滚动效果以及对纵向滚动的支持。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ViewPager2</span> <span class="keyword">extends</span> <span class="title class_">ViewGroup</span> {</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(Context context, AttributeSet attrs)</span> {</span><br><span class="line">            mRecyclerView = <span class="keyword">new</span> <span class="title class_">RecyclerView</span>(context) {</span><br><span class="line">               ...</span><br><span class="line">            };</span><br><span class="line"></span><br><span class="line">            mLayoutManager = <span class="keyword">new</span> <span class="title class_">LinearLayoutManager</span>(context);</span><br><span class="line">            mRecyclerView.setLayoutManager(mLayoutManager);</span><br><span class="line">            setOrientation(context, attrs);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">PagerSnapHelper</span>().attachToRecyclerView(mRecyclerView);</span><br><span class="line">            ...</span><br><span class="line">        }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="目前存在的问题："><a href="#目前存在的问题：" class="headerlink" title="目前存在的问题："></a>目前存在的问题：</h3><p>由于直接使用的RecycleView实现，一些ViewPager的特性没有得到完全实现，官方指出了下面几个问题：</p><ul><li>不支持设置offscreen limit</li><li>与TabLayout的集成存在问题</li><li>FragmentStateAdapter还有稳定性问题</li><li>不支持设置pageWitch，默认100%/100%</li><li>不支持clipToPadding</li><li>不支持fakeDrag</li><li>设置page transformer时，不支持设置绘制顺序</li></ul><h3 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h3><p>其使用方法与传统ViewPager类似：</p><p>1.在模块gradle中添加依赖：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">'androidx.viewpager2:viewpager2:1.0.0-alpha01'</span></span><br></pre></td></tr></tbody></table></figure><p>2.在Layout文件中布局，这里可以设置滚动方向:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;androidx.viewpager2.widget.ViewPager2</span><br><span class="line">        android:id=<span class="string">"@+id/viewPager2"</span></span><br><span class="line">        android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">        android:layout_height=<span class="string">"match_parent"</span></span><br><span class="line">        android:orientation=<span class="string">"vertical"</span> /&gt;</span><br></pre></td></tr></tbody></table></figure><p>3.创建Adapter，ViewPager2使用FragmentStateAdapter来实现Fragment的管理：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ViewPager2Adapter</span> <span class="keyword">extends</span> <span class="title class_">FragmentStateAdapter</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ViewPager2Adapter</span><span class="params">(<span class="meta">@NonNull</span> FragmentManager fragmentManager)</span> {</span><br><span class="line">        <span class="built_in">super</span>(fragmentManager);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Fragment <span class="title function_">getItem</span><span class="params">(<span class="type">int</span> position)</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleFragment</span>();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getItemCount</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>4.应用Adapter:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">viewPager2 = findViewById(R.id.viewpager2);</span><br><span class="line"><span class="type">ViewPager2Adapter</span> <span class="variable">adapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ViewPager2Adapter</span>(getSupportFragmentManager());</span><br><span class="line">viewPager2.setAdapter(adapter);</span><br></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>ViewPager2具有原生支持垂直方向滑动的特性，但是由于目前FragmentStateAdapter还有稳定性问题，以及设置page transformer时，不支持设置绘制顺序，在实际应用时还需要多进行修改和测试。建议等官方推出稳定版本后，再考虑接入。</p><p><strong>参考：</strong></p><p>[1] <a target="_blank" rel="noopener" href="https://developer.android.com/jetpack/androidx/releases/viewpager2">https://developer.android.com/jetpack/androidx/releases/viewpager2</a></p><p>[2] <a target="_blank" rel="noopener" href="https://developer.android.google.cn/reference/androidx/viewpager2/adapter/FragmentStateAdapter">https://developer.android.google.cn/reference/androidx/viewpager2/adapter/FragmentStateAdapter</a></p><p>[3] <a target="_blank" rel="noopener" href="https://developer.android.google.cn/reference/androidx/viewpager2/widget/ViewPager2">https://developer.android.google.cn/reference/androidx/viewpager2/widget/ViewPager2</a></p><p>[4] <a target="_blank" rel="noopener" href="https://www.journaldev.com/26148/android-viewpager2">https://www.journaldev.com/26148/android-viewpager2</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ViewPager2是Google于2019年2月7号发布的ViewPager的升级版本，目前最新版本是1.0.0-alpha01。ViewPager2主要解决了传统ViewPager中的几个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不支持从右到左布局&lt;/li&gt;
&lt;li&gt;不支持纵向</summary>
      
    
    
    
    
    <category term="日常总结" scheme="https://chewenkai.github.io/tags/%E6%97%A5%E5%B8%B8%E6%80%BB%E7%BB%93/"/>
    
    <category term="Android" scheme="https://chewenkai.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio的三种类型的模版(Templates)创建</title>
    <link href="https://chewenkai.github.io/uncategorized/android-studio%E7%9A%84%E4%B8%89%E7%A7%8D%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%A8%A1%E7%89%88-templates-%E5%88%9B%E5%BB%BA/"/>
    <id>https://chewenkai.github.io/uncategorized/android-studio%E7%9A%84%E4%B8%89%E7%A7%8D%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%A8%A1%E7%89%88-templates-%E5%88%9B%E5%BB%BA/</id>
    <published>2019-03-07T15:43:35.000Z</published>
    <updated>2019-03-07T15:43:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Android-Studio的三种类型的模版-Templates-创建"><a href="#Android-Studio的三种类型的模版-Templates-创建" class="headerlink" title="Android Studio的三种类型的模版(Templates)创建"></a>Android Studio的三种类型的模版(Templates)创建</h2><p>如果说使用快捷键是程序员的刀🔪，那灵活的使用代码模版就应该是程序员的剑。</p><p>这里说的模版(Templates)，是指在使用开发创建类文件，甚至是某些代码块时，IDE自动按照规定的格式创建出类或代码的功能。如果类中有大量相似代码，使用模版可以极大的提高开发效率，降低出错概率。</p><p>下面我们看一下如何在Android Studio上使用<strong>模版</strong>，我将讲述三种模版的创建，分别是：</p><ul><li>使用<strong>Live Templates</strong>创建代码块模版</li><li>使用<strong>File and Code Templates</strong>创建类模版</li><li><strong>基于FreeMarker</strong>创建多文件模版</li></ul><h3 id="1-代码块模版"><a href="#1-代码块模版" class="headerlink" title="1.代码块模版"></a>1.代码块模版</h3><p>java中经常需要定义这样的静态常量：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_VALUE</span> <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure><p>使用Live Templates后，就可以直接输入const就可以快速定义静态常量：</p><p><img src="https://s2.ax1x.com/2019/03/08/kxO5IP.png"></p><p>其设置方法是，打开File-&gt;Setting（⌘+,）,搜索“Live Templates”，打开如下的界面：</p><p><img src="https://s2.ax1x.com/2019/03/08/kxLON6.png"></p><p>其中，<em>1</em>指的是缩写和该缩写的描述；<em>2</em>中输入的是模版的内容；<em>3</em>中可以指定该模版应用生效的语言和场所，例如，可以限制该模版只应用到Java语言定义变量(declaration)的时候; <em>4</em>可以将模版中变化的部分定义为变量，如上图中的<code>${name}</code>和<code>${value}</code>     </p><p>上面例子中的const是默认的模版，你可以点击加号添加自己的模版，例如为kotlin定义一个tag常量的模版：</p><p><img src="https://s2.ax1x.com/2019/03/08/kxXswn.png"></p><span id="more"></span><h3 id="2-创建类模版"><a href="#2-创建类模版" class="headerlink" title="2.创建类模版"></a>2.创建类模版</h3><p>如果我经常创建Fragment，有些必填的步骤就可以放到模版里去</p><p>打开File-&gt;setting,找到<strong>File and Code Templates</strong>，打开如下页面：</p><p><img src="https://s2.ax1x.com/2019/03/08/kxjS0A.png"></p><ol><li>点击加号创建新的类模版</li><li>在这填写模版的名字和生效的类型文件名</li><li>模版的内容，可变的部分用变量代替</li></ol><p>举例一个简单的Fragment模版:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">if</span> (${PACKAGE_NAME} != <span class="string">""</span>)<span class="keyword">package</span> ${PACKAGE_NAME};#end</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.annotation.NonNull;</span><br><span class="line"><span class="keyword">import</span> androidx.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> androidx.fragment.app.Fragment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$</span>{NAME} <span class="keyword">extends</span> <span class="title class_">Fragment</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAG</span>  <span class="operator">=</span> <span class="string">"${NAME}"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ${NAME} newInstance() {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">$</span>{NAME}();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">onCreateView</span><span class="params">(<span class="meta">@NonNull</span> LayoutInflater inflater, <span class="meta">@Nullable</span> ViewGroup container, <span class="meta">@Nullable</span> Bundle savedInstanceState)</span> {</span><br><span class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.${layout}, container, <span class="literal">false</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>其中<code>${NAME}</code>代表的是类名变量，${layout}代表了资源文件名变量，这些变量在创建文件时会要求手动填入。</p><p>使用时，在文件夹上点击右键 new 的时候，就可以看到自己定义的模版了：</p><p><img src="https://s2.ax1x.com/2019/03/08/kxjpTI.md.png"></p><p>点击后，填写一下自定义的变量，就可以生成模版文件了：</p><p><img src="https://s2.ax1x.com/2019/03/08/kxjiff.md.png"></p><p>上方的layout就是在定义模版时定义的变量，而NAME变量是系统预留变量，会被影射成File name这个名字。关于定义类模版的具体用法，可以参考设置中其他的模版，或者参考文档：</p><p>https://www.jetbrains.com/help/idea/using-file-and-code-templates.html</p><p><strong>一个小尾巴</strong></p><p>这里顺便说一下如何<strong>定义类的作者信息</strong>模版：File and Code Template中有一个Includes标签，打开后是这个样子的：</p><p><img src="https://s2.ax1x.com/2019/03/08/kxjE6g.png"></p><p>这里填写一个模版，以后创建类的时候会自动把模版内容放在类名上方。一些像日期一样的变量可以在右下方查询。</p><h3 id="3-创建多文件模版"><a href="#3-创建多文件模版" class="headerlink" title="3.创建多文件模版"></a>3.创建多文件模版</h3><p>上面两种方法都是可以在设置中搞定的，比较好理解，下面这种就稍微复杂一点了。</p><p>相信大家肯定用File -&gt; new -&gt; Activity -&gt; EmptyActivity来创建一个新的页面，Android Studio会自动在manifest文件中注册Activity的名字，并创建好一个固定模版的Java和xml布局文件。</p><p>那么它是怎么实现的呢？我们可不可以像它一样也自定义创建多个不同类型的文件模版呢？答案是可以的。<strong>Android Studio使用的是Apache的FreeMarker模版引擎生成代码。</strong></p><p>Android Studio将所有的这种模版的配置文件放在下面路径：</p><p><strong>Windows</strong>:<code>{ANDROID_STUDIO_LOCATION}/plugins/android/lib/templates/</code></p><p><strong>MacOS</strong>:<code>Applications/Android Studio.app/Contents/plugins/android/lib/templates/</code></p><p>可以看下它的目录结构：</p><blockquote><p>-activities-gradle-gradle-projects-other</p></blockquote><p>可以看出它大致对不同类型的模版进行了简单的分类，下面我们以就以activities为例，看一下它是怎么做的。</p><p>打开activities-&gt;EmptyActivity文件夹，可以看到创建模版所涉及的几个主要文件/夹：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">├── globals.xml.ftl</span><br><span class="line">├── recipe.xml.ftl</span><br><span class="line">├── root</span><br><span class="line">│&nbsp;&nbsp; └── src</span><br><span class="line">│&nbsp;&nbsp;     └── app_package</span><br><span class="line">│&nbsp;&nbsp;         ├── SimpleActivity.java.ftl</span><br><span class="line">│&nbsp;&nbsp;         └── SimpleActivity.kt.ftl</span><br><span class="line">├── template.xml</span><br><span class="line">└── template_blank_activity.png</span><br></pre></td></tr></tbody></table></figure><h4 id="template-xml"><a href="#template-xml" class="headerlink" title="template.xml"></a>template.xml</h4><p>在template.xml文件中，定义的是一些模版需要用到的变量：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span></span></span><br><span class="line"><span class="tag">    <span class="attr">format</span>=<span class="string">"5"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">revision</span>=<span class="string">"5"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">"Empty Activity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">minApi</span>=<span class="string">"9"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">minBuildApi</span>=<span class="string">"14"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">description</span>=<span class="string">"Creates a new empty activity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">value</span>=<span class="string">"Activity"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">formfactor</span> <span class="attr">value</span>=<span class="string">"Mobile"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"activityClass"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"Activity Name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"string"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">constraints</span>=<span class="string">"class|unique|nonempty"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">suggest</span>=<span class="string">"${layoutToActivity(layoutName)}"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">default</span>=<span class="string">"MainActivity"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">help</span>=<span class="string">"The name of the activity class to create"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    ...// 省略一些参数// ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 128x128 thumbnails relative to template.xml --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thumbs</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- default thumbnail is required --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thumb</span>&gt;</span>template_blank_activity.png<span class="tag">&lt;/<span class="name">thumb</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thumbs</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">globals</span> <span class="attr">file</span>=<span class="string">"globals.xml.ftl"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">execute</span> <span class="attr">file</span>=<span class="string">"recipe.xml.ftl"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>这里简单介绍几个重要的属性和标签：</p><ul><li><strong>template中的name属性</strong>指定了该模版在Android Studio中显示的名字，如：File -&gt; new -&gt; Activity -&gt; <strong>EmptyActivity</strong></li><li><strong>category标签</strong>指定了该模版放在Android Studio的那个分类中，如File -&gt; new -&gt; <strong>Activity</strong> -&gt; EmptyActivity。这里的分类名字可以自己指定。</li><li><strong>parameter标签</strong>指定了该模版需要的参数，例如我在创建EmptyActivity时弹出的Wizard中的每一项其实都是在这里配置的(顺便说一下，<thumbs>标签配置的就是下图中的那个图片)：</thumbs></li></ul><p><img src="https://s2.ax1x.com/2019/03/08/kxjrcD.png"></p><ul><li><strong>globals标签和execute标签</strong>分别制定了全局变量的配置文件和最核心的行为控制的文件(这里recipe.xml.ftl文件我也不知道应该叫什么，暂时这么称呼吧)</li></ul><h4 id="recipe-xml-ftl"><a href="#recipe-xml-ftl" class="headerlink" title="recipe.xml.ftl"></a>recipe.xml.ftl</h4><p>这是整个配置的核心文件，如果template.xml文件是Android工程中的Layout布局文件，那recipe.xml.ftl就是java文件，它告诉Android Studio需要按照一定的顺序做一些逻辑工作，例如，创建文件，在IDE中打开文件等。下面我们看一下其内容：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line">&lt;#import "root://activities/common/kotlin_macros.ftl" as kt&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">recipe</span>&gt;</span></span><br><span class="line">    &lt;#include "../common/recipe_manifest.xml.ftl" /&gt;</span><br><span class="line">    &lt;@kt.addAllKotlinDependencies /&gt;</span><br><span class="line"></span><br><span class="line">&lt;#if generateLayout&gt;</span><br><span class="line">    &lt;#in</span><br><span class="line">clude "../common/recipe_simple.xml.ftl" /&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">open</span> <span class="attr">file</span>=<span class="string">"${escapeXmlAttribute(resOut)}/layout/${layoutName}.xml"</span> /&gt;</span></span><br><span class="line">&lt;/#if&gt;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">instantiate</span> <span class="attr">from</span>=<span class="string">"root/src/app_package/SimpleActivity.${ktOrJavaExt}.ftl"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">to</span>=<span class="string">"${escapeXmlAttribute(srcOut)}/${activityClass}.${ktOrJavaExt}"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">open</span> <span class="attr">file</span>=<span class="string">"${escapeXmlAttribute(srcOut)}/${activityClass}.${ktOrJavaExt}"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">recipe</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>上面的&lt;#include/&gt;标签主要做了一些复用的工作，例如<code>&lt;#include "../common/recipe_manifest.xml.ftl" /&gt;</code>就是调用了recipe_manifest.xml.ftl文件在Manifest文件中插入了activity的信息。</p><p>我们主要关注下instantiate标签和open标签，这两句话翻译成自然语言就是：</p><blockquote><p>根据模版文件：<code>root/src/app_package/SimpleActivity.${ktOrJavaExt}.ftl</code>生成类文件到<code>${escapeXmlAttribute(srcOut)}/${activityClass}.${ktOrJavaExt}</code>中去。</p></blockquote><blockquote><p>然后在Android Studio中打开文件：<code>${escapeXmlAttribute(srcOut)}/${activityClass}.${ktOrJavaExt}</code></p></blockquote><p>如果需要同时生成多个文件，就需要在这里用instantiate标签生成。那么生成文件的模版是在哪里定义的呢？下面说的root文件夹就是。</p><h4 id="root文件夹（模版文件夹）"><a href="#root文件夹（模版文件夹）" class="headerlink" title="root文件夹（模版文件夹）"></a>root文件夹（模版文件夹）</h4><p>root指的是工程的代码根目录，其内部是src、res甚至AndroidManifest.xml.ftl这样跟工程目录对应位置的模版文件。我们以root/src/app_package/SimpleActivity.java.ftl文件为例，看下其模版是怎么定义的：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ${packageName};</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ${superClassFqcn};</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line">&lt;#<span class="keyword">if</span> (includeCppSupport!<span class="literal">false</span>) &amp;&amp; generateLayout&gt;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line">&lt;/#<span class="keyword">if</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">$</span>{activityClass} <span class="keyword">extends</span> <span class="title class_">$</span>{superClass} {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> {</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">&lt;#<span class="keyword">if</span> generateLayout&gt;</span><br><span class="line">        setContentView(R.layout.${layoutName});</span><br><span class="line">       &lt;#include <span class="string">"../../../../common/jni_code_usage.java.ftl"</span>&gt;</span><br><span class="line">&lt;#elseif includeCppSupport!<span class="literal">false</span>&gt;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Example of a call to a native method</span></span><br><span class="line">        android.util.Log.d(<span class="string">"${activityClass}"</span>, stringFromJNI());</span><br><span class="line">&lt;/#<span class="keyword">if</span>&gt;</span><br><span class="line">    }</span><br><span class="line">&lt;#include <span class="string">"../../../../common/jni_code_snippet.java.ftl"</span>&gt;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>可以看出，就是对一个Activity进行了模版化，其中很多变量提高了该模版的可扩展性，这里可以使用include引入其他模版的内容，或者使用if来进行条件判断，功能还是蛮强大的，更多的语法内容，可以参考FreeMarker模版引擎的文档：</p><p>https://freemarker.apache.org/</p><p>关于AndroidStudio的EmptyActivity模版创建分析就先到这里，下面我们实际的应用一下看看。</p><h3 id="实战：创建列表Adapter模版"><a href="#实战：创建列表Adapter模版" class="headerlink" title="实战：创建列表Adapter模版"></a>实战：创建列表Adapter模版</h3><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>目前做的工程中对RecycleView进行了封装，每次创建列表的Adapter时需要创建一系列文件才能开始写逻辑，这些文件包括：</p><ul><li><p>列表的Adapter文件</p></li><li><p>数据Model的Pojo文件</p></li><li><p>列表中的View文件(ListItemView)</p></li><li><p>View文件的layout文件</p></li></ul><p>为了减少创建列表Adapter的工作量，按照下面步骤为其创建一套类似于EmptyActivity的模版：</p><h4 id="Step-1-创建相关文件"><a href="#Step-1-创建相关文件" class="headerlink" title="Step 1. 创建相关文件"></a>Step 1. 创建相关文件</h4><p>在第三节提到的Templates路径中的other文件夹下新建一个文件夹，随意命名为“ListAdapter”，然后在内部创建下面的文件目录：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">f├── globals.xml.ftl</span><br><span class="line">f├── recipe.xml.ftl</span><br><span class="line">d├── root</span><br><span class="line">d│&nbsp;&nbsp; ├── res</span><br><span class="line">d│&nbsp;&nbsp; │&nbsp;&nbsp; └── layout</span><br><span class="line">f│&nbsp;&nbsp; │&nbsp;&nbsp;     └── layout.xml.ftl</span><br><span class="line">d│&nbsp;&nbsp; └── src</span><br><span class="line">d│&nbsp;&nbsp;     └── app_package</span><br><span class="line">f│&nbsp;&nbsp;         ├── Adapter.kt.ftl</span><br><span class="line">f│&nbsp;&nbsp;         ├── ItemView.kt.ftl</span><br><span class="line">f│&nbsp;&nbsp;         └── Model.kt.ftl</span><br><span class="line">f└── template.xml</span><br></pre></td></tr></tbody></table></figure><h4 id="Step-2-配置template-xml"><a href="#Step-2-配置template-xml" class="headerlink" title="Step 2. 配置template.xml"></a>Step 2. 配置template.xml</h4><p>要想灵活的填写创建Adapter时涉及到的文件的名字，就要将这些名字参数化，在创建之前让程序员填写，这就需要在template文件中配置相应的参数：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span></span></span><br><span class="line"><span class="tag">        <span class="attr">format</span>=<span class="string">"5"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">revision</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"Create RecycleView Adapter"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">minApi</span>=<span class="string">"9"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">minBuildApi</span>=<span class="string">"14"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">description</span>=<span class="string">"Create a RecycleView Adapter in DreamReader."</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">value</span>=<span class="string">"DreamReader"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">formfactor</span> <span class="attr">value</span>=<span class="string">"Mobile"</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">id</span>=<span class="string">"adapterName"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">"Adapter Name"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">"string"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">constraints</span>=<span class="string">"class|unique|nonempty"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">default</span>=<span class="string">"RecycleViewAdapter"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">help</span>=<span class="string">"The name of the adapter of RecycleView"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">id</span>=<span class="string">"layoutName"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">"Layout Name"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">"string"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">constraints</span>=<span class="string">"layout|nonempty|unique"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">default</span>=<span class="string">"view_list_item"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">help</span>=<span class="string">"The name of the layout file of RecycleView"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">id</span>=<span class="string">"itemViewName"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">"Item View Name"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">"string"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">constraints</span>=<span class="string">"class|unique|nonempty"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">default</span>=<span class="string">"ItemListView"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">help</span>=<span class="string">"The name of the item list view class of RecycleView"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">id</span>=<span class="string">"modelName"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">"Model Name"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">"string"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">constraints</span>=<span class="string">"class|unique|nonempty"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">default</span>=<span class="string">"ItemModel"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">help</span>=<span class="string">"The name of the data model class of RecycleView"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">globals</span> <span class="attr">file</span>=<span class="string">"globals.xml.ftl"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">execute</span> <span class="attr">file</span>=<span class="string">"recipe.xml.ftl"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>从上面可以看出，我们自定义了一个名字为DreamReader的category，并将该模版的名字命名为:Create RecycleView Adapter.然后添加了四个参数：<code>adapterName</code>，<code>layoutName</code>，<code>itemViewName</code>，<code>modelName</code>。最后制定了global文件和execute文件的名字。</p><h4 id="Step-3-配置global文件"><a href="#Step-3-配置global文件" class="headerlink" title="Step 3.配置global文件"></a>Step 3.配置global文件</h4><p>global文件需要指定用到的全局变量，这里只需要用到src和res路径：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">globals</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">global</span> <span class="attr">id</span>=<span class="string">"srcOut"</span> <span class="attr">value</span>=<span class="string">"${srcDir}/${slashedPackageName(packageName)}"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">global</span> <span class="attr">id</span>=<span class="string">"resOut"</span> <span class="attr">value</span>=<span class="string">"${resDir}"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">globals</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="Step-4-配置recipe文件"><a href="#Step-4-配置recipe文件" class="headerlink" title="Step 4. 配置recipe文件"></a>Step 4. 配置recipe文件</h4><p>recipe文件中写明了具体要进行的操作，指定了具体模版文件的路径和名字:</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line">&lt;#import "root://activities/common/kotlin_macros.ftl" as kt&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">recipe</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">instantiate</span> <span class="attr">from</span>=<span class="string">"root/src/app_package/Adapter.kt.ftl"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">to</span>=<span class="string">"${escapeXmlAttribute(srcOut)}/${adapterName}.kt"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">open</span> <span class="attr">file</span>=<span class="string">"${escapeXmlAttribute(srcOut)}/${adapterName}.kt"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">instantiate</span> <span class="attr">from</span>=<span class="string">"root/src/app_package/Model.kt.ftl"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">to</span>=<span class="string">"${escapeXmlAttribute(srcOut)}/${modelName}.kt"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">open</span> <span class="attr">file</span>=<span class="string">"${escapeXmlAttribute(srcOut)}/${modelName}.kt"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">instantiate</span> <span class="attr">from</span>=<span class="string">"root/src/app_package/ItemView.kt.ftl"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">to</span>=<span class="string">"${escapeXmlAttribute(srcOut)}/${itemViewName}.kt"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">open</span> <span class="attr">file</span>=<span class="string">"${escapeXmlAttribute(srcOut)}/${itemViewName}.kt"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">instantiate</span> <span class="attr">from</span>=<span class="string">"root/res/layout/layout.xml.ftl"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">to</span>=<span class="string">"${escapeXmlAttribute(resOut)}/layout/${layoutName}.xml"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">open</span> <span class="attr">file</span>=<span class="string">"${escapeXmlAttribute(resOut)}/layout/${layoutName}.xml"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">recipe</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>上面代码生成(instantiate)了四个文件，并且让其全部在IDE中打开(open)。其中每个生成一个文件，都为其指定了具体的模版文件:<code>Adapter.kt.ftl</code>、<code>Model.kt.ftl</code>、<code>ItemView.kt.ftl</code>、<code>layout.xml.ftl</code></p><h4 id="Step-5-编写具体的模版文件"><a href="#Step-5-编写具体的模版文件" class="headerlink" title="Step 5. 编写具体的模版文件"></a>Step 5. 编写具体的模版文件</h4><p>下面贴出我写的具体的模版文件内容，由于我是用kotlin写的，所以后缀是kt.ftl，如果是java文件则应该是java.ftl后缀:</p><p>Adapter.kt.ftl</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ${escapeKotlinIdentifiers(packageName)}</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context</span><br><span class="line"><span class="keyword">import</span> android.view.View</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup</span><br><span class="line"><span class="keyword">import</span> com.tencent.news.pullrefreshrecyclerview.RecyclerViewAdapterEx</span><br><span class="line"><span class="keyword">import</span> com.tencent.news.pullrefreshrecyclerview.RecyclerViewHolderEx</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> $</span>{adapterName}(<span class="keyword">val</span> context:Context) : RecyclerViewAdapterEx&lt;${modelName}&gt;() {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> TYPE_DEFAULT = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getNormalItemType</span><span class="params">(position: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> {</span><br><span class="line">        <span class="keyword">return</span> TYPE_DEFAULT</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getLayoutViewByViewType</span><span class="params">(parent: <span class="type">ViewGroup</span>?, viewType: <span class="type">Int</span>)</span></span>: View {</span><br><span class="line">        <span class="keyword">return</span> ${itemViewName}(context)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">bindData</span><span class="params">(holder: <span class="type">RecyclerViewHolderEx</span>?, <span class="keyword">data</span>: ${<span class="type">modelName</span>}?, dataPos: <span class="type">Int</span>)</span></span> {</span><br><span class="line">        (holder?.itemView <span class="keyword">as</span>? ${itemViewName})?.setData(<span class="keyword">data</span>, dataPos)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>其中用到的变量名字都是在第二步中的template中定义的。</p><p>Model.kt.ftl</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ${escapeKotlinIdentifiers(packageName)}</span><br><span class="line"></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> $</span>{modelName}(<span class="keyword">var</span> name:String)</span><br></pre></td></tr></tbody></table></figure><p>ItemView.kt.ftl</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ${escapeKotlinIdentifiers(packageName)}</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater</span><br><span class="line"><span class="keyword">import</span> android.widget.RelativeLayout</span><br><span class="line">&lt;#<span class="keyword">if</span> applicationPackage??&gt;</span><br><span class="line"><span class="keyword">import</span> ${applicationPackage}.R</span><br><span class="line">&lt;/#<span class="keyword">if</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> kotlinx.android.synthetic.main.${layoutName}.*</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> $</span>{itemViewName} <span class="meta">@JvmOverloads</span> <span class="keyword">constructor</span>(context: Context,</span><br><span class="line">                                                        attributeSet: AttributeSet? = <span class="literal">null</span>,</span><br><span class="line">                                                        defStyleAttributeSet: <span class="built_in">Int</span> = <span class="number">0</span>)</span><br><span class="line">    : RelativeLayout(context, attributeSet, defStyleAttributeSet) {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> {</span><br><span class="line">        LayoutInflater.from(context).inflate(R.layout.${layoutName}, <span class="keyword">this</span>, <span class="literal">true</span>)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setData</span><span class="params">(<span class="keyword">data</span>: ${<span class="type">modelName</span>}?, index: <span class="type">Int</span>)</span></span> {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>layout.xml.ftl</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">FrameLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/sample_text"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Hello World!"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintRight_toRightOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="Step-6-使用"><a href="#Step-6-使用" class="headerlink" title="Step 6.使用"></a>Step 6.使用</h4><p>重启Android Studio，这样，再写列表时，就可以一键生成上面四个文件了，在New列表中可以看到我们定义的category和name：</p><p><img src="https://s2.ax1x.com/2019/03/08/ASP654.png"></p><p>点击后，弹出填写参数的窗口:</p><p><img src="https://s2.ax1x.com/2019/03/08/ASP4r6.png"></p><p>框中的内容都是我们自定义的内容，可以在这里填入想要的文件名，点击finish就生成了相应的文件：</p><p><img src="https://s2.ax1x.com/2019/03/08/ASiiGj.png"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上就是对Android Studio中模版用法的介绍和简单理解，可能有很多错误的地方，如有问题欢迎指正。本文主要讲了在Android Studio中创建<strong>Live Templates</strong>代码块模版、<strong>File and Code Templates</strong>类模版以及创建多文件模版，希望大家在工作中能巧用模版，提高效率。</p><p>除了Android Studio，其他JetBrain产品例如Intelli J、Clion、Pycharm等应该都是一样的，但是需要大家自己尝试一下，话说 Jetbrain真是在让程序员变懒这条路上一去不复返了😂。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>[1] https://medium.com/androidstarters/mastering-android-studio-templates-ed8fdd98cb78</p><p>[2] https://riggaroo.co.za/custom-file-template-group-android-studiointellij/</p><p>[3] https://www.jetbrains.com/help/idea/using-file-and-code-templates.html</p><p>[4] https://www.jetbrains.com/help/idea/using-live-templates.html</p><p>[5] https://freemarker.apache.org/</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Android-Studio的三种类型的模版-Templates-创建&quot;&gt;&lt;a href=&quot;#Android-Studio的三种类型的模版-Templates-创建&quot; class=&quot;headerlink&quot; title=&quot;Android Studio的三种类型的模版(Templates)创建&quot;&gt;&lt;/a&gt;Android Studio的三种类型的模版(Templates)创建&lt;/h2&gt;&lt;p&gt;如果说使用快捷键是程序员的刀🔪，那灵活的使用代码模版就应该是程序员的剑。&lt;/p&gt;
&lt;p&gt;这里说的模版(Templates)，是指在使用开发创建类文件，甚至是某些代码块时，IDE自动按照规定的格式创建出类或代码的功能。如果类中有大量相似代码，使用模版可以极大的提高开发效率，降低出错概率。&lt;/p&gt;
&lt;p&gt;下面我们看一下如何在Android Studio上使用&lt;strong&gt;模版&lt;/strong&gt;，我将讲述三种模版的创建，分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;strong&gt;Live Templates&lt;/strong&gt;创建代码块模版&lt;/li&gt;
&lt;li&gt;使用&lt;strong&gt;File and Code Templates&lt;/strong&gt;创建类模版&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基于FreeMarker&lt;/strong&gt;创建多文件模版&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;1-代码块模版&quot;&gt;&lt;a href=&quot;#1-代码块模版&quot; class=&quot;headerlink&quot; title=&quot;1.代码块模版&quot;&gt;&lt;/a&gt;1.代码块模版&lt;/h3&gt;&lt;p&gt;java中经常需要定义这样的静态常量：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;DEFAULT_VALUE&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;使用Live Templates后，就可以直接输入const就可以快速定义静态常量：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/03/08/kxO5IP.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;其设置方法是，打开File-&amp;gt;Setting（⌘+,）,搜索“Live Templates”，打开如下的界面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/03/08/kxLON6.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;其中，&lt;em&gt;1&lt;/em&gt;指的是缩写和该缩写的描述；&lt;em&gt;2&lt;/em&gt;中输入的是模版的内容；&lt;em&gt;3&lt;/em&gt;中可以指定该模版应用生效的语言和场所，例如，可以限制该模版只应用到Java语言定义变量(declaration)的时候; &lt;em&gt;4&lt;/em&gt;可以将模版中变化的部分定义为变量，如上图中的&lt;code&gt;${name}&lt;/code&gt;和&lt;code&gt;${value}&lt;/code&gt;     &lt;/p&gt;
&lt;p&gt;上面例子中的const是默认的模版，你可以点击加号添加自己的模版，例如为kotlin定义一个tag常量的模版：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/03/08/kxXswn.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="日常总结" scheme="https://chewenkai.github.io/tags/%E6%97%A5%E5%B8%B8%E6%80%BB%E7%BB%93/"/>
    
    <category term="Android" scheme="https://chewenkai.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>将ViewPager放在RecyclerView中的问题</title>
    <link href="https://chewenkai.github.io/uncategorized/%E5%B0%86viewpager%E6%94%BE%E5%9C%A8recyclerview%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://chewenkai.github.io/uncategorized/%E5%B0%86viewpager%E6%94%BE%E5%9C%A8recyclerview%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2019-03-03T04:24:33.000Z</published>
    <updated>2019-03-03T04:24:33.000Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>踩坑-复用RemoteView导致内存泄漏总结</title>
    <link href="https://chewenkai.github.io/Android/%E8%B8%A9%E5%9D%91-%E5%A4%8D%E7%94%A8remoteview%E5%AF%BC%E8%87%B4%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E6%80%BB%E7%BB%93/"/>
    <id>https://chewenkai.github.io/Android/%E8%B8%A9%E5%9D%91-%E5%A4%8D%E7%94%A8remoteview%E5%AF%BC%E8%87%B4%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E6%80%BB%E7%BB%93/</id>
    <published>2019-03-01T13:22:01.000Z</published>
    <updated>2019-03-01T13:22:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="复用RemoteView导致内存泄漏总结"><a href="#复用RemoteView导致内存泄漏总结" class="headerlink" title="复用RemoteView导致内存泄漏总结"></a>复用RemoteView导致内存泄漏总结</h2><h3 id="关于RemoteView"><a href="#关于RemoteView" class="headerlink" title="关于RemoteView"></a>关于RemoteView</h3><p><strong>RemoteView</strong>是一个提供跨进程控制的View，主要用在通知栏或者小部件的开发上。例如音乐类APP自定义的通知栏样式就是通过RemoteView实现的。如果你之前没有听说过RemoteView，可以在这里简单了解一下：</p><p>https://www.jianshu.com/p/23041852bd85</p><p>RemoteView中可以使用的布局和控件是受限制的，能用的布局有：</p><ul><li><code>AdapterViewFlipper</code></li><li><code>FrameLayout</code></li><li><code>GridLayout</code></li><li><code>GridView</code></li><li><code>LinearLayout</code></li><li><code>ListView</code></li><li><code>RelativeLayout</code></li><li><code>StackView</code></li><li><code>ViewFlipper</code></li></ul><p>可以用的控件有:</p><ul><li><code>AnalogClock</code></li><li><code>Button</code></li><li><code>Chronometer</code></li><li><code>ImageButton</code></li><li><code>ImageView</code></li><li><code>ProgressBar</code></li><li><code>TextClock</code></li><li><code>TextView</code></li></ul><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>最近开发了一个音乐类的App，播放音乐时会在通知栏常驻一个自定义样式的通知，其中通知栏有一个头像是通过<code>setImageViewBitmap(int viewId, Bitmap bitmap)</code>方法进行设置的：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">RemoteViews mRemoteView;  <span class="comment">// 全局变量</span></span><br><span class="line"></span><br><span class="line">mRemoteView = <span class="keyword">new</span> <span class="title class_">RemoteViews</span>(Application.getInstance().getPackageName(), resId);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每次调用setImageViewBitmap来更新通知栏的头像</span></span><br><span class="line">mRemoteView.setImageViewBitmap(R.id.cover, bitmap);</span><br></pre></td></tr></tbody></table></figure><p>后来发现如果App连续放歌在3个小时左右时就会OOM崩掉，通过Profile检查内存后，发现是头像的bitmap没有销毁导致的，但是这里的bitmap对象每次使用完都会recycle掉，为什么还会内存泄漏呢？经过一番排查，发现是使用同一个<code>RemoteVIew</code>对象<code>setImageViewBitmap(R.id.cover, bitmap)</code>导致的。</p><p>在<code>RemoteView</code>的源码中我们可以看到一个<code>mActions</code>变量，这是一个<code>Action</code>的列表：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * An array of actions to perform on the view tree once it has been</span></span><br><span class="line"><span class="comment">     * inflated</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">private</span> ArrayList&lt;Action&gt; mActions;</span><br></pre></td></tr></tbody></table></figure><p>而Action是其内部定义的一个可序列化的类:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Action</span> <span class="keyword">implements</span> <span class="title class_">Parcelable</span> </span><br></pre></td></tr></tbody></table></figure><p>通过跟踪setImageViewBitmap(int viewId, Bitmap bitmap)中bitmap的去向，发现最终调用了setBitmap()方法:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBitmap</span><span class="params">(<span class="type">int</span> viewId, String methodName, Bitmap value)</span> {</span><br><span class="line">    addAction(<span class="keyword">new</span> <span class="title class_">BitmapReflectionAction</span>(viewId, methodName, value));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">BitmapReflectionAction</span> <span class="keyword">extends</span> <span class="title class_">Action</span> {</span><br><span class="line">        <span class="type">int</span> bitmapId;</span><br><span class="line">        Bitmap bitmap;</span><br><span class="line">        String methodName;</span><br><span class="line"></span><br><span class="line">        BitmapReflectionAction(<span class="type">int</span> viewId, String methodName, Bitmap bitmap) {</span><br><span class="line">            <span class="built_in">this</span>.bitmap = bitmap;</span><br><span class="line">           ...</span><br><span class="line">        }</span><br><span class="line">...</span><br><span class="line">            </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeToParcel</span><span class="params">(Parcel dest, <span class="type">int</span> flags)</span> {</span><br><span class="line">            dest.writeInt(TAG);</span><br><span class="line">            dest.writeInt(viewId);</span><br><span class="line">            dest.writeString(methodName);</span><br><span class="line">            dest.writeInt(bitmapId);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">     ...</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>可以看出，每次<code>setImageViewBitmap()</code>，都会将Bitmap做成一个<code>BitmapReflectionAction</code>，并添加到<code>mActions</code>列表里，这里的<code>BitmapReflectionAction</code>是继承<code>Action</code>的一个可序列化的类，Bitmap在里面作为被序列化成了一组值最终存到了<code>mActions</code>列表中。在源码中，<code>mActions</code>列表只看到有添加操作，并没有看到<code>remove</code>或者<code>clear</code>操作，导致了内存泄漏。</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>不要复用<code>RemoteView</code>，更新通知栏icon时，new一个新的<code>RemoteView</code>给NotificationCompat.Builder</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><blockquote><p>So internally RemoteViews is simply a set of actions that are“serialized” and sent to another process.  Each time you make a callto something like setDouble(), you’re adding an additional action toRemoteViews’ internal list.</p><p>Because there isn’t a way of clearing these actions from a RemoteViewsobject, all of your successive setImageViewBitmap() calls, along withtheir Bitmaps, remain in the internal list, and are actually“serialized” and applied each time your send it.  :(In this case it’s best to just create a new RemoteViews object every time.</p></blockquote><p>https://github.com/rojdes/AngryDict/blob/master/app/src/main/java/me/rds/angrydictionary/widget/BinaryClockWidget.java</p><p>https://blog.csdn.net/u013989732/article/details/78501462</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;复用RemoteView导致内存泄漏总结&quot;&gt;&lt;a href=&quot;#复用RemoteView导致内存泄漏总结&quot; class=&quot;headerlink&quot; title=&quot;复用RemoteView导致内存泄漏总结&quot;&gt;&lt;/a&gt;复用RemoteView导致内存泄漏总结&lt;/h2&gt;&lt;</summary>
      
    
    
    
    <category term="Android" scheme="https://chewenkai.github.io/categories/Android/"/>
    
    
    <category term="日常总结" scheme="https://chewenkai.github.io/tags/%E6%97%A5%E5%B8%B8%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>对使用ViewPager的一点理解</title>
    <link href="https://chewenkai.github.io/uncategorized/%E5%AF%B9%E4%BD%BF%E7%94%A8viewpager%E7%9A%84%E4%B8%80%E7%82%B9%E7%90%86%E8%A7%A3/"/>
    <id>https://chewenkai.github.io/uncategorized/%E5%AF%B9%E4%BD%BF%E7%94%A8viewpager%E7%9A%84%E4%B8%80%E7%82%B9%E7%90%86%E8%A7%A3/</id>
    <published>2019-02-01T12:05:07.000Z</published>
    <updated>2019-02-01T12:05:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>大家都用过ViewPager吧😄，使用ViewPager时，需要给它配一个Adapter，通常我们要继承下面三个Adapter来，分别是：</p><p>———&gt;最基本的PagerAdapter</p><p>——————&gt;继承PagerAdapter的FragmentPagerAdapter</p><p>——————&gt;继承PagerAdapter的FragmentStatePagerAdapter</p><p>那么这三个Adapter有什么区别，我们应该怎么选择呢？</p><h3 id="1-关于PagerAdapter"><a href="#1-关于PagerAdapter" class="headerlink" title="1.关于PagerAdapter"></a>1.关于PagerAdapter</h3><p>首先，我们知道如果继承了PagerAdapter，需要我们实现下面两个方法:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return the number of views available.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create the page for the given position.  The adapter is responsible</span></span><br><span class="line"><span class="comment"> * for adding the view to the container given here, although it only</span></span><br><span class="line"><span class="comment"> * must ensure this is done by the time it returns from</span></span><br><span class="line"><span class="comment"> * {<span class="doctag">@link</span> #finishUpdate(ViewGroup)}.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> container The containing View in which the page will be shown.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> position The page position to be instantiated.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Returns an Object representing the new page.  This does not</span></span><br><span class="line"><span class="comment"> * need to be a View, but can be some other container of the page.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">instantiateItem</span><span class="params">(ViewGroup container, <span class="type">int</span> position)</span> {</span><br><span class="line">    <span class="keyword">return</span> instantiateItem((View) container, position);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>第一个是要告诉ViewPager一共有几个页面，第二个则是ViewPager需要加载页面了，你需要根据position创建不同的页面对象，这里通常是View对象。 </p><p>当然，如果你的ViewPager中内容比较复杂，需要用Fragment来自动管理其生命周期，那么可以使用FragmentPagerAdapter和FragmentStatePagerAdapter中的一种，那么他俩有什么区别呢？</p><p>首先我们看一下FragmentPagerAdapter的<code>instantiateItem</code>和<code>destroyItem</code>方法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Object <span class="title function_">instantiateItem</span><span class="params">(ViewGroup container, <span class="type">int</span> position)</span> {</span><br><span class="line">       ...</span><br><span class="line">       <span class="keyword">final</span> <span class="type">long</span> <span class="variable">itemId</span> <span class="operator">=</span> getItemId(position);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Do we already have this fragment?</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> makeFragmentName(container.getId(), itemId);</span><br><span class="line">       <span class="type">Fragment</span> <span class="variable">fragment</span> <span class="operator">=</span> mFragmentManager.findFragmentByTag(name);</span><br><span class="line">       <span class="keyword">if</span> (fragment != <span class="literal">null</span>) {</span><br><span class="line">           <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"Attaching item #"</span> + itemId + <span class="string">": f="</span> + fragment);</span><br><span class="line">           mCurTransaction.attach(fragment);</span><br><span class="line">       } <span class="keyword">else</span> {</span><br><span class="line">           fragment = getItem(position);</span><br><span class="line">           <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"Adding item #"</span> + itemId + <span class="string">": f="</span> + fragment);</span><br><span class="line">           mCurTransaction.add(container.getId(), fragment,</span><br><span class="line">                   makeFragmentName(container.getId(), itemId));</span><br><span class="line">       }</span><br><span class="line">      ...</span><br><span class="line">       <span class="keyword">return</span> fragment;</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroyItem</span><span class="params">(ViewGroup container, <span class="type">int</span> position, Object object)</span> {</span><br><span class="line">       <span class="keyword">if</span> (mCurTransaction == <span class="literal">null</span>) {</span><br><span class="line">           mCurTransaction = mFragmentManager.beginTransaction();</span><br><span class="line">       }</span><br><span class="line">       <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"Detaching item #"</span> + getItemId(position) + <span class="string">": f="</span> + object</span><br><span class="line">               + <span class="string">" v="</span> + ((Fragment)object).getView());</span><br><span class="line">       mCurTransaction.detach((Fragment)object);</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getItemId</span><span class="params">(<span class="type">int</span> position)</span> {</span><br><span class="line">       <span class="keyword">return</span> position;</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">makeFragmentName</span><span class="params">(<span class="type">int</span> viewId, <span class="type">long</span> id)</span> {</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"android:switcher:"</span> + viewId + <span class="string">":"</span> + id;</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><p>可以看出<code>instantiateItem</code>方法在添加Fragment时，会带一个Fragment的名字，其实就是Tag：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mCurTransaction.add(container.getId(), fragment, makeFragmentName(container.getId(), itemId));</span><br></pre></td></tr></tbody></table></figure><p>这个Tag是根据一定规则从<code>makeFragmentName</code>中获得的，这里唯一变化的就是id，默认的id可从getItemId(position)中看到，就是当前的position，保证了每个fragment的tag是唯一的。</p><p>当ViewPager通过<code>instantiateItem</code>获取Fragment的时候，会先根据之前设置的Tag找一下这个Fragment存不存在：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mFragmentManager.findFragmentByTag(name)</span><br></pre></td></tr></tbody></table></figure><p>根据获取到的Fragment有两种添加方式，如果根据Tag找到了之前存在的Fragment，就attach上去：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mCurTransaction.attach(fragment);</span><br></pre></td></tr></tbody></table></figure><p>如果没找到，那就把新创建的Fragment add上去:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mCurTransaction.add(container.getId(), fragment, makeFragmentName(container.getId(), itemId));</span><br></pre></td></tr></tbody></table></figure><p>当不用这个Fragment的时，会调用<code>destroyItem</code>方法，可以看到这里是detach掉了Fragment，并没有销毁。</p><p>综上，一个页面只会创建一次，创建时根据当前的position给Fragment设置一个Tag，当不需要时只是把Fragmetn detach掉，并不会销毁，下次需要时通过Tag复用Fragment。</p><p>所以，如果你有大量的Fragment要展示，FragmentPagerAdapter会持有每一个Fragment不释放，最终走向OOM。</p><p>所以，无论使用PagerAdapter还是FragmentPagerAdapter，有多少页面，就会创建多少页面对象，页面很多的情况下，会非常占用内存，虽然这样，但是它们也有各自的应用场景，例如，App的首次安装的启动引导页面个数是固定的，而且如果比较复杂，通常做成Fragment，这时使用FragmentPagerAdapter较为合适；而如果页面中有需要自动轮播卡片的地方，则可以使用PagerAdapter实现，因为其页面一般都是View，结构简单，数量也是固定的。</p><p>那如果我需要做一个可以无限滑动的卡片，就需要用到FragmentStatePagerAdapter了，我们看一下FragmentStatePagerAdapter的<code>instantiateItem</code>和<code>destroyItem</code>方法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return the Fragment associated with a specified position.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> Fragment <span class="title function_">getItem</span><span class="params">(<span class="type">int</span> position)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">instantiateItem</span><span class="params">(ViewGroup container, <span class="type">int</span> position)</span> {</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (mCurTransaction == <span class="literal">null</span>) {</span><br><span class="line">        mCurTransaction = mFragmentManager.beginTransaction();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="type">Fragment</span> <span class="variable">fragment</span> <span class="operator">=</span> getItem(position);</span><br><span class="line">    <span class="keyword">while</span> (mFragments.size() &lt;= position) {</span><br><span class="line">        mFragments.add(<span class="literal">null</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line"> ...</span><br><span class="line">    mCurTransaction.add(container.getId(), fragment);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fragment;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroyItem</span><span class="params">(ViewGroup container, <span class="type">int</span> position, Object object)</span> {</span><br><span class="line">    <span class="type">Fragment</span> <span class="variable">fragment</span> <span class="operator">=</span> (Fragment) object;</span><br><span class="line">    ...</span><br><span class="line">    mCurTransaction.remove(fragment);</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>可以看到，FragmentStatePagerAdapter在初始化页面时，通过getItem这个抽象方法来获得Fragment，并将其add到容器里，而不用的时候直接remove掉，这样就不会一直占用Fragment，可以实现无限滑动，唯一关心的就是在getItem中创建一个Fragment就可以了。</p><p>以上就是我对三种PagerAdapter的简单理解。在使用ViewPager的过程中，除了adapter的选择，还需要到了下面的问题。</p><h3 id="2-常见的两个问题小析"><a href="#2-常见的两个问题小析" class="headerlink" title="2.常见的两个问题小析"></a>2.常见的两个问题小析</h3><h5 id="1-notifyDataSetChanged-后页面没有刷新的问题"><a href="#1-notifyDataSetChanged-后页面没有刷新的问题" class="headerlink" title="1.notifyDataSetChanged()后页面没有刷新的问题"></a>1.notifyDataSetChanged()后页面没有刷新的问题</h5><p>这个问题主要是由于当数据更新时，ViewPager会调用<code>dataSetChanged</code>方法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">dataSetChanged</span><span class="params">()</span> {</span><br><span class="line">    <span class="comment">// This method only gets called if our observer is attached, so mAdapter is non-null.</span></span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mItems.size(); i++) {</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ItemInfo</span> <span class="variable">ii</span> <span class="operator">=</span> mItems.get(i);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">newPos</span> <span class="operator">=</span> mAdapter.getItemPosition(ii.object);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (newPos == PagerAdapter.POSITION_UNCHANGED) {</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (newPos == PagerAdapter.POSITION_NONE) {</span><br><span class="line">            mItems.remove(i);</span><br><span class="line">            i--;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!isUpdating) {</span><br><span class="line">                mAdapter.startUpdate(<span class="built_in">this</span>);</span><br><span class="line">                isUpdating = <span class="literal">true</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            mAdapter.destroyItem(<span class="built_in">this</span>, ii.position, ii.object);</span><br><span class="line">            needPopulate = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (mCurItem == ii.position) {</span><br><span class="line">                <span class="comment">// Keep the current item in the valid range</span></span><br><span class="line">                newCurrItem = Math.max(<span class="number">0</span>, Math.min(mCurItem, adapterCount - <span class="number">1</span>));</span><br><span class="line">                needPopulate = <span class="literal">true</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">     ...</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">   ...</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>这个方法会调用adapter的getItemPosition()来获得object的位置情况是否发生变化，如果不发生变化就不更新了，如果而这个方法默认是返回的就是POSITION_UNCHANGED：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Called when the host view is attempting to determine if an item's position</span></span><br><span class="line"><span class="comment"> * has changed. Returns {<span class="doctag">@link</span> #POSITION_UNCHANGED} if the position of the given</span></span><br><span class="line"><span class="comment"> * item has not changed or {<span class="doctag">@link</span> #POSITION_NONE} if the item is no longer present</span></span><br><span class="line"><span class="comment"> * in the adapter.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The default implementation assumes that items will never</span></span><br><span class="line"><span class="comment"> * change position and always returns {<span class="doctag">@link</span> #POSITION_UNCHANGED}.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> object Object representing an item, previously returned by a call to</span></span><br><span class="line"><span class="comment"> *               {<span class="doctag">@link</span> #instantiateItem(View, int)}.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> object's new position index from [0, {<span class="doctag">@link</span> #getCount()}),</span></span><br><span class="line"><span class="comment"> *         {<span class="doctag">@link</span> #POSITION_UNCHANGED} if the object's position has not changed,</span></span><br><span class="line"><span class="comment"> *         or {<span class="doctag">@link</span> #POSITION_NONE} if the item is no longer present.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getItemPosition</span><span class="params">(Object object)</span> {</span><br><span class="line">    <span class="keyword">return</span> POSITION_UNCHANGED;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>所以要想每次刷新都让页面更新，需要在adapter中重写getItemPosition方法，并返回POSITION_NONE就可以了：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getItemPosition</span><span class="params">(Object object)</span> {</span><br><span class="line">    <span class="keyword">return</span> POSITION_NONE;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="2-初始化数据时不会调用OnPageChangeListener"><a href="#2-初始化数据时不会调用OnPageChangeListener" class="headerlink" title="2.初始化数据时不会调用OnPageChangeListener"></a>2.初始化数据时不会调用OnPageChangeListener</h5><p>相信大家都遇到过这种情况，就是ViewPager初始化时并不会调用OnPageChangeListener，所以很多时候我们都是手动调用第一页的onPageSelected方法:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="keyword">private</span> ViewPager.<span class="type">OnPageChangeListener</span> <span class="variable">onPageChangeListener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ViewPager</span>.OnPageChangeListener() {</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onPageScrolled</span><span class="params">(<span class="type">int</span> position, <span class="type">float</span> positionOffset, <span class="type">int</span> positionOffsetPixels)</span> {</span><br><span class="line"></span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onPageSelected</span><span class="params">(<span class="type">int</span> position)</span> {</span><br><span class="line"></span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onPageScrollStateChanged</span><span class="params">(<span class="type">int</span> state)</span> {</span><br><span class="line"></span><br><span class="line">      }</span><br><span class="line">  };</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">OnCreate</span><span class="params">()</span>{</span><br><span class="line">      ...</span><br><span class="line">      mViewPager.setOnPageChangeListener(onPageChangeListener);</span><br><span class="line">onPageChangeListener.onPageSelected(<span class="number">0</span>);  <span class="comment">// 手动调用第一页</span></span><br><span class="line">      ...</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><p>但是如果如果你使用的是FragmentPagerAdapter时，会发现在onPageSelected(0)时，会发现Fragment还没有创建成功，这时候会出现NPE(NullPointerException)。所以这时候可以这样写：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mViewPager.post(<span class="keyword">new</span> <span class="title class_">Runnable</span>(){</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">        onPageChangeListener.onPageSelected(<span class="number">0</span>);  <span class="comment">// 手动调用第一页</span></span><br><span class="line">    }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>这样就会在viewpager的UI事件队列完成后处理onPageSelected方法的内容，这个时候Fragment已经好了。</p><p>但是，虽然这样，讲要进行的工作交给post会打乱同步时序，让要做的事充满了不确定性，我不知道它什么时候能调用onPageSelected方法。而且这样做也存在另外一个问题，当使用notifyDataSetChanged()刷新数据时，还是不会调用当前页的onPageSelected来更新当前页面，所以我更倾向于下面这种方法:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyPagerAdapter</span> <span class="keyword">extends</span> <span class="title class_">FragmentStatePagerAdapter</span> {</span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">private</span> Object lastPrimaryItem;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> OnPageSwitchListener onPageSwitchListener;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyPagerAdapter</span><span class="params">(FragmentManager fm, OnPageSwitchListener onPageSwitchListener)</span> {</span><br><span class="line">        <span class="built_in">super</span>(fm);</span><br><span class="line">        <span class="built_in">this</span>.onPageSwitchListener = onPageSwitchListener;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrimaryItem</span><span class="params">(ViewGroup container, <span class="type">int</span> position, Object object)</span> {</span><br><span class="line">        <span class="built_in">super</span>.finishUpdate(container);</span><br><span class="line">        <span class="built_in">super</span>.setPrimaryItem(container, position, object);</span><br><span class="line">        <span class="keyword">if</span> (object == lastPrimaryItem) {</span><br><span class="line">            <span class="keyword">return</span>;  <span class="comment">// setPrimaryItem会多次调用，过滤掉多余的调用</span></span><br><span class="line">        }</span><br><span class="line">        lastPrimaryItem = object;</span><br><span class="line">        <span class="type">MyFragment</span> <span class="variable">fragment</span> <span class="operator">=</span> (MyFragment)object;</span><br><span class="line">        <span class="keyword">if</span> (onPageSwitchListener != <span class="literal">null</span> &amp;&amp; fragment != <span class="literal">null</span>) {</span><br><span class="line">            onPageSwitchListener.onPageSwitch(position, fragment);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">finishUpdate</span><span class="params">(ViewGroup container)</span> {</span><br><span class="line"><span class="comment">// 这里将finishUpdate放到setPrimaryItem之前执行，见上面的方法👆</span></span><br><span class="line">        <span class="comment">// 原因是finishUpdate后的Fragment才算正式可以用了</span></span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OnPageSwitchListener</span>{</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">onPageSwitch</span><span class="params">(<span class="type">int</span> position, MyFragment fragment)</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyActivity</span> <span class="keyword">extends</span> <span class="title class_">Activity</span> <span class="keyword">implements</span> <span class="title class_">MyPagerAdapter</span>.OnPageSwitchListener{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onPageSwitch</span><span class="params">(<span class="type">int</span> position, MyFragment fragment)</span> {</span><br><span class="line">    <span class="comment">// Do whatever you like here. :)</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>简单说就是，PagerAdapter中有一个重要的方法叫<code>setPrimaryItem</code>，当一个页面显示的时候都会调用这个方法（多次），通过一些简单的处理，可以实现与mViewPager.setOnPageChangeListener()类似的功能，这样就不用每次调用onPageChangeListener.onPageSelected(0)或者使用Post操作了。</p><p>以上分析较为肤浅，有问题欢迎指正、补充，谢谢🙏</p><p>参考</p><p>[1] https://stackoverflow.com/questions/16074058/onpageselected-doesnt-work-for-first-page</p><p>[2] https://stackoverflow.com/questions/11794269/onpageselected-isnt-triggered-when-calling-setcurrentitem0</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;大家都用过ViewPager吧😄，使用ViewPager时，需要给它配一个Adapter，通常我们要继承下面三个Adapter来，分别是：&lt;/p&gt;
&lt;p&gt;———&amp;gt;最基本的PagerAdapter&lt;/p&gt;
&lt;p&gt;——————&amp;gt;继承PagerAdapter的Fra</summary>
      
    
    
    
    
    <category term="日常总结" scheme="https://chewenkai.github.io/tags/%E6%97%A5%E5%B8%B8%E6%80%BB%E7%BB%93/"/>
    
    <category term="Android" scheme="https://chewenkai.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式上手</title>
    <link href="https://chewenkai.github.io/uncategorized/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%8A%E6%89%8B/"/>
    <id>https://chewenkai.github.io/uncategorized/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%8A%E6%89%8B/</id>
    <published>2018-12-29T12:02:48.000Z</published>
    <updated>2018-12-29T12:02:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>正则表达式是计算机世界里的基础技能，很多东西都是建立在正则表达式之上。学会使用正则表达式会帮助你理解更多，之前对正则表达式总是非常敬畏，感觉很难上手，直到看了老姚的《JavaScript 正则表达式迷你书》，才打开了新世界的大门，有时间的朋友可以去读一下，不要被书名中的JavaScript吓到，这本书其实跟某种语言关系不大。<a target="_blank" rel="noopener" href="https://github.com/qdlaoyao/js-regex-mini-book">任意门</a></p><p>下面讲我认为书中较为重要的点记在下面：</p><p>首先，正则是什么？正则是匹配模式，要么匹配字符，要么匹配位置。（匹配可以理解为搜索的意思）</p><h4 id="匹配字符："><a href="#匹配字符：" class="headerlink" title="匹配字符："></a>匹配字符：</h4><p>一个正则匹配的字符串，具体到某一位字符时，它可以不是某个确定的字符，可以有多种可能。</p><p>其实现的方式是使用字符组。譬如[abc]，表示该字符是可以字符“a”、“b”、“c”中的任何一个，中括号里可以写任意字符，包括空格，问号等。</p><h4 id="匹配位置："><a href="#匹配位置：" class="headerlink" title="匹配位置："></a>匹配位置：</h4><p>一个正则可匹配的字符串的长度不是固定的，可以是多种情况的。</p><p>其实现的方式是使用量词。表示譬如{m,n}，表示连续出现最少m次，最多n次</p><p>其实只要明白了匹配位置的方法{m,n}和匹配字符的方法[这里可以写任意多的字符]，就可以实现99.999%的正则表达式问题。</p><p>至于其他的你看到关于正则表达式的知识都是建立在这两个基础能力之上的，要么是为了方便，创建了几个简单的写法，例如[0-5]=[012345]，又例如\d=[0-9]，这样就不用在方括号里写太多的字符，同时也增强了可读性。</p><p>下面就介绍一些为了方便实现上面两种匹配而产生的各种简写：</p><p><strong>1.表示字符</strong></p><p>如果字符组里的字符特别多的话，怎么办？假如我想匹配所有的字符，总不能把所有的字符都输入到中括号内吧？</p><p>所以，为了解决这个问题，正则表达式也可以写成这样的缩写：</p><ul><li><p>比如[123456abcdefGHIJKLM]，可以写成**[1-6a-fG-M]*<em>。用连字符”-“来省略和简写。</em>（那么要匹配“a”、“-”、“z”这三者中任意一个字符，该怎么做呢？可以写成如下的方式：[-az]或[az-]或[a-z]。即要么放在开头，要么放在结尾，要么转义。）*</p></li><li><p>**[^abc]**，表示是一个除”a”、”b”、”c”之外的任意一个字符。字符组的第一位放”^”（脱字符），表示求反的概念</p></li><li><p><strong>\d</strong> 就是<code>[0-9]</code>。表示是一位数字。记忆方式：其英文是digit（数字）。</p></li><li><p><strong>\D</strong> 就是<code>[^0-9]</code>。表示除数字外的任意字符。</p></li><li><p><strong>\w</strong> 就是<code>[0-9a-zA-Z_]</code>。表示数字、大小写字母和下划线。记忆方式：w是word的简写，也称单词字符。</p></li><li><p><strong>\W</strong> 就是<code>[^0-9a-zA-Z_]</code>。非单词字符。</p></li><li><p><strong>\s</strong> 就是<code>[ \t\v\n\r\f]</code>。表示空白符，包括空格、水平制表符、垂直制表符、换行符、回车符、换页符。记忆方式：s是space character的首字母。</p></li><li><p><strong>\S</strong> 就是<code>[^ \t\v\n\r\f]</code>。 非空白符。</p></li><li><p><strong>.</strong> 就是<code>[^\n\r\u2028\u2029]</code>。通配符，表示几乎任意字符。换行符、回车符、行分隔符和段分隔符除外。记忆方式：想想省略号…中的每个点，都可以理解成占位符，表示任何类似的东西。</p><p>如果要匹配任意字符怎么办？可以使用[\d\D]、[\w\W]、[\s\S]和[^]中任何的一个。</p></li></ul><p><strong>2.表示位置</strong>（数量）</p><ul><li><p><strong>{m,}</strong> 表示至少出现m次。</p></li><li><p><strong>{m}</strong> 等价于<code>{m,m}</code>，表示出现m次。</p></li><li><p><strong>?</strong>  等价于<code>{0,1}</code>，表示出现或者不出现。记忆方式：问号的意思表示，有吗？</p></li></ul><ul><li><strong>+</strong>  等价于<code>{1,}</code>，表示出现至少一次。记忆方式：加号是追加的意思，得先有一个，然后才考虑追加。</li></ul><ul><li>*** ** 等价于<code>{0,}</code>，表示出现任意次，有可能不出现。记忆方式：看看天上的星星，可能一颗没有，可能零散有几颗，可能数也数不过来。</li></ul><h4 id="举例说明🌰"><a href="#举例说明🌰" class="headerlink" title="举例说明🌰"></a>举例说明🌰</h4><p>明白了基本用法，就需要几个例子来实验一下了。如果要在目录中搜索文件夹名字中有Util的文件，而且只显示DreamReader文件夹中的结果，那我可以这样搜:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find ./* | grep -e ".*Dream.*StringUtil"</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;正则表达式是计算机世界里的基础技能，很多东西都是建立在正则表达式之上。学会使用正则表达式会帮助你理解更多，之前对正则表达式总是非常敬畏，感觉很难上手，直到看了老姚的《JavaScript 正则表达式迷你书》，才打开了新世界的大门，有时间的朋友可以去读一下，不要被书名中的Ja</summary>
      
    
    
    
    
    <category term="日常总结" scheme="https://chewenkai.github.io/tags/%E6%97%A5%E5%B8%B8%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>坑--TextView同时使用maxLines=1和ellipsize时偶发崩溃</title>
    <link href="https://chewenkai.github.io/uncategorized/%E5%9D%91-textview%E5%90%8C%E6%97%B6%E4%BD%BF%E7%94%A8maxlines-1%E5%92%8Cellipsize%E6%97%B6%E5%81%B6%E5%8F%91%E5%B4%A9%E6%BA%83/"/>
    <id>https://chewenkai.github.io/uncategorized/%E5%9D%91-textview%E5%90%8C%E6%97%B6%E4%BD%BF%E7%94%A8maxlines-1%E5%92%8Cellipsize%E6%97%B6%E5%81%B6%E5%8F%91%E5%B4%A9%E6%BA%83/</id>
    <published>2018-12-26T12:49:46.000Z</published>
    <updated>2018-12-26T12:49:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天发现项目的报错记录中排名第一的是<code>ArrayIndexOutOfBoundsException</code>错误，影响用户84，发生次数129。</p><p>报错堆栈如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> android.text.StaticLayout.getLineTop(StaticLayout.java:<span class="number">878</span>)</span><br><span class="line"><span class="number">2</span> android.widget.TextView.getExtendedPaddingTop(TextView.java:<span class="number">1966</span>)</span><br><span class="line"><span class="number">3</span> android.widget.TextView.bringTextIntoView(TextView.java:<span class="number">7291</span>)</span><br><span class="line"><span class="number">4</span> android.widget.TextView.onPreDraw(TextView.java:<span class="number">5107</span>)</span><br><span class="line"><span class="number">5</span> android.view.ViewTreeObserver.dispatchOnPreDraw(ViewTreeObserver.java:<span class="number">944</span>)</span><br><span class="line"><span class="number">6</span> android.view.ViewRootImpl.performTraversals(ViewRootImpl.java:<span class="number">2348</span>)</span><br><span class="line"><span class="number">7</span> android.view.ViewRootImpl.doTraversal(ViewRootImpl.java:<span class="number">1292</span>)</span><br><span class="line"><span class="number">8</span> android.view.ViewRootImpl$TraversalRunnable.run(ViewRootImpl.java:<span class="number">6598</span>)</span><br><span class="line"><span class="number">9</span> android.view.Choreographer$CallbackRecord.run(Choreographer.java:<span class="number">800</span>)</span><br><span class="line"><span class="number">10</span> android.view.Choreographer.doCallbacks(Choreographer.java:<span class="number">603</span>)</span><br><span class="line"><span class="number">11</span> android.view.Choreographer.doFrame(Choreographer.java:<span class="number">572</span>)</span><br><span class="line"><span class="number">12</span> android.view.Choreographer$FrameDisplayEventReceiver.run(Choreographer.java:<span class="number">786</span>)</span><br><span class="line"><span class="number">13</span> android.os.Handler.handleCallback(Handler.java:<span class="number">815</span>)</span><br><span class="line"><span class="number">14</span> android.os.Handler.dispatchMessage(Handler.java:<span class="number">104</span>)</span><br><span class="line"><span class="number">15</span> android.os.Looper.loop(Looper.java:<span class="number">194</span>)</span><br><span class="line"><span class="number">16</span> android.app.ActivityThread.main(ActivityThread.java:<span class="number">5682</span>)</span><br><span class="line"><span class="number">17</span> java.lang.reflect.Method.invoke(Native Method)</span><br><span class="line"><span class="number">18</span> java.lang.reflect.Method.invoke(Method.java:<span class="number">372</span>)</span><br></pre></td></tr></tbody></table></figure><p>从错误堆栈里并没有找到特别有用的信息。</p><p>于是去看了下报错的设备信息：</p><p>| 机型设备 Top 5        | 系统版本 Top 5                  || ——————— | ——————————- || 华为 TIT-TL00  11.26% | Android 5.1,level 22   31.40%   || 三星 GT-I908   26.48% | Android 4.1.2,level 16   20.48% || 荣耀 CUN AL00   6.14% | Android 4.0.4,level 15   10.92% || 华为 TAG-TL00   5.46% | Android 7.0   8.19%             || HTC T327T   4.44%     | Android 4.0.3,level 15   7.85%  |</p><p>可谓是五花八门，看来也不是特定机型或者特定系统的问题。</p><p>从日志和设备信息都分析不出问题，只能靠google了，通过不断的搜索，渐渐发现类似的崩溃跟TextView的两个属性有关系，分别是:</p><ul><li>Android:maxLines</li><li>Android:ellipsize</li></ul><p>根据查询的信息，得出了下面的结论：</p><p>如果同时设置了ellipsize和maxLine=1,就会在某些机型上产生崩溃（不是必先），报ArrayIndexOutOfBoundsException的异常。解决办法就是将maxLine=1换成已经废弃的singleLine=true。这是Android系统的一个bug，目前还没有解决。</p><p>下面查询到的相关记录：</p><p>If you try to use <code>maxLines=1</code> with <code>ellipsize</code>, you shall get the following lint error (refer to <a target="_blank" rel="noopener" href="https://issuetracker.google.com/issues/36950033">this discussion</a>)</p><blockquote><p>Combining ellipsize and maxLines=1 can lead to crashes on some devices. Earlier versions of lint recommended replacing singleLine=true with maxLines=1 but that should not be done when using ellipsize</p></blockquote><p>来源：https://code.luasoftware.com/tutorials/android/android-textview-singleline-with-ellipsis/</p><hr><p>问题 Crash when using ellipsize=”start” (Jelly Bean) 的回复</p><p>ri…@gmail.com <a href="mailto:ri...@gmail.com">ri...@gmail.com</a> <a target="_blank" rel="noopener" href="https://issuetracker.google.com/issues/36950033#comment3">#3</a>Jul 12, 2012 08:17AM </p><p><strong>I do notice that changing android:lines=”1” to android:singleLine=”true” causes the crash not to happen.</strong></p><p>来源:https://issuetracker.google.com/issues/36950033</p><hr><p>I faced what I suspect is the same problem in my own app. For me, it was happening because I was using <code>android:ellipsize="start"</code> <strong>without</strong> also using <code>android:singleLine="true"</code>.</p><p>We had switched all of our <code>android:singleLine="true"</code> attributes to the recommended <code>android:maxLines="1"</code>, but it turns out that there’s a bug in how the system calculates the ellipsis that is triggered if <code>singleLine</code> isn’t present.</p><p>So I believe you can solve this issue by simply adding <code>android:singleLine="true"</code> to your <code>TextView</code>s that are using <code>ellipsize</code> attrs.</p><p>来源：https://stackoverflow.com/questions/45487427/crashlytics-reporting-multiples-issues-for-textview-makesinglelayout</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天发现项目的报错记录中排名第一的是&lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt;错误，影响用户84，发生次数129。&lt;/p&gt;
&lt;p&gt;报错堆栈如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;</summary>
      
    
    
    
    
    <category term="日常总结" scheme="https://chewenkai.github.io/tags/%E6%97%A5%E5%B8%B8%E6%80%BB%E7%BB%93/"/>
    
    <category term="Android" scheme="https://chewenkai.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>对Lamda表达式的简单理解</title>
    <link href="https://chewenkai.github.io/uncategorized/%E5%AF%B9lamda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/"/>
    <id>https://chewenkai.github.io/uncategorized/%E5%AF%B9lamda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/</id>
    <published>2018-12-08T12:30:23.000Z</published>
    <updated>2018-12-08T12:30:23.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一次见Lamda表达式"><a href="#第一次见Lamda表达式" class="headerlink" title="第一次见Lamda表达式"></a>第一次见Lamda表达式</h3><p>第一次看到这行代码的时候，我是百思不得姐：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Toolkit.let(mUserTabFragment, f -&gt; f.setUserVisibleHint(<span class="literal">true</span>));</span><br></pre></td></tr></tbody></table></figure><p>点击进入let函数看到其定义如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">let</span><span class="params">(<span class="meta">@Nullable</span> T input, Consumer&lt;T&gt; consumer)</span> {</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="literal">null</span> || consumer == <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    consumer.accept(input);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>可以看出let的第二个参数是一个Consumer，但是上面的f-&gt;f.setUserVisibleHint(isVisibleToUser));是什么鬼，是Consumer吗？答案是 是的，这样看就明白了，首先，我们创建一个Consumer对象：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Consumer&lt;Fragment&gt; consumer = <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Fragment&gt;() {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Fragment f)</span> {</span><br><span class="line">f.setUserVisibleHint(<span class="literal">true</span>));</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>上面代码的Lamda形式为：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Consumer&lt;Fragment&gt; consumer = (f)-&gt; f.setUserVisibleHint(<span class="literal">true</span>));</span><br></pre></td></tr></tbody></table></figure><p>所以 可以直接将等号右边带入let函数的第二个参数，就变成了那个样子：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Toolkit.let(mUserTabFragment, f -&gt; f.setUserVisibleHint(<span class="literal">true</span>));</span><br></pre></td></tr></tbody></table></figure><p> 现在应该就明白了第二个参数到底是啥了，其实就是一种Lamda表达式。</p><span id="more"></span><h3 id="函数式接口-Functional-Interface"><a href="#函数式接口-Functional-Interface" class="headerlink" title="函数式接口(Functional Interface)"></a>函数式接口(Functional Interface)</h3><p>那么到底什么是Lamda表达式呢？在使用Java的Lamda表达式之前，有一个重要的概念，叫函数式接口：</p><blockquote><p>函数式接口(Functional Interface)就是有且仅有一个方法的接口</p></blockquote><p>例如我们平时经常用到的Callable, Runnable都是函数式接口，在这里的Consumer也不例外，Consumer也是java1.8版本新增的函数式接口，与Runnable和Callable一样。假如你想定义一个回调，这个时候你又不像去专门定义一个回调接口On，就可以用Runnable或Callable等这样的接口实现：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class A{</span><br><span class="line">   B b = new B();</span><br><span class="line">   void doHere(){  </span><br><span class="line">//     b.runnable = new Runnable() {</span><br><span class="line">//          @Override</span><br><span class="line">//          public void run() {</span><br><span class="line">//              System.out.println("Do something here.");</span><br><span class="line">//          }</span><br><span class="line">//     };   这段注释代码是不用lamda表达式的形式</span><br><span class="line">       b.runnable = ()-&gt; System.out.println("Do something here.");</span><br><span class="line">   }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">class B{</span><br><span class="line">   Runnable runnable;</span><br><span class="line">   private void callHere() {</span><br><span class="line">       runnable.run();</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>可以看出Lamda表达式就是对函数式接口的一种省略的写法，上面的例子中，你可以用Lamda表达式写成一行，减小代码量，也可以不用Lamda表达式，写成6行，它们的运行结果都是一样的。</p><p>讲到这可能有的同学又有点蒙了，我Lamda表达式还没搞明白，又给我讲一堆函数式接口干嘛？别急，Lamda表达式的写法也有一定的规则，怎么写Lamda表达式跟这些函数式接口有紧密的关系，那么我们先说明下Consumer、Runnable、Callable这些接口是干什么用的呢？他们的区别是什么？</p><p>不同函数式接口的区别就是参数的个数和有无返回值而已，你可以根据需要，选择使用哪个接口。</p><ul><li>例如上述例子，我只是需要类B在某个时刻通知A执行一个操作，不需要返回值，也不带参数，那就用Runnable就行，意味着这段代码注重的是运行；</li><li>如果不要参数，但是需要返回值，就用Callable，其名字也意味这点；</li><li>相反如果需要一个参数，但是不需要返回值，就可以用Consumer，其名字也是一样，消费，给你一个参数，你拿去用就好，不用返回值给我；</li><li>同样的接口还有很多：BiFunction, Function0, Function1,…,Function22。Funtion22就是有22个参数和一个返回值（Function的意思就是即有参数又有返回值）</li></ul><p>列几个函数式接口给大家感受下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Consumer</span>&lt;T&gt; {</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Performs this operation on the given argument.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> t the input argument</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(T t)</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Function</span>&lt;T, R&gt; {</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Applies this function to the given argument.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t the function argument</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the function result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    R <span class="title function_">apply</span><span class="params">(T t)</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Lamda表达式的语法规则"><a href="#Lamda表达式的语法规则" class="headerlink" title="Lamda表达式的语法规则"></a>Lamda表达式的语法规则</h3><p>说完函数式接口，我们再回来说Lamda表达式的语法格式，Lamda表达式语法主要分为参数和表达式两部分：</p><blockquote><p>(parameters) -&gt;{ expression; }</p></blockquote><p>其中，如果表达式只有一行，则可以省略花括号和分号；如果参数只有一个，也可以省略小括号，但是如果参数是空的，记住不能省略小括号。</p><p>例如上面的那几种函数式接口的写法就是：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 没有餐素,也不返回任何值，类似于Runnable的接口的Lamda表达式形式：</span></span><br><span class="line">() -&gt; System.out.print(s)</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 2. 不需要参数,但需要一个返回值, 类似于Callable的接口的Lamda表达式形式：</span></span><br><span class="line">() -&gt; <span class="number">5</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 3. 接收一个参数(数字类型),有返回值，类似于Function的接口的Lamda表达式形式：</span></span><br><span class="line">x -&gt; <span class="number">2</span> * x  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 4. 接受2个参数(数字),有返回值，类似于BiFunction的接口的Lamda表达式形式：</span></span><br><span class="line">(<span class="type">int</span> x, <span class="type">int</span> y) -&gt; x + y  </span><br></pre></td></tr></tbody></table></figure><p>以上就是对Java中Lamda表达式的基本知识点的理解。</p><h3 id="关于-FunctionalInterface-注解"><a href="#关于-FunctionalInterface-注解" class="headerlink" title="关于 @FunctionalInterface 注解"></a>关于 @FunctionalInterface 注解</h3><p>Java 8为函数式接口引入了一个新注解@FunctionalInterface，主要用于编译级错误检查，加上该注解，当你写的接口不符合函数式接口定义的时候，编译器会报错。</p><p>正确例子，没有报错：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@FunctionalInterface</span><br><span class="line">interface GreetingService</span><br><span class="line">{</span><br><span class="line">    void sayMessage(String message);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>错误例子，接口中包含了两个抽象方法，违反了函数式接口的定义，Eclipse 报错提示其不是函数式接口。</p><p><img src="http://www.runoob.com/wp-content/uploads/2018/11/16092307421970.png" alt="img"></p><p><strong>提醒：</strong>加不加 <strong>@FunctionalInterface</strong> 对于接口是不是函数式接口没有影响，该注解只是提醒编译器去检查该接口是否仅包含一个抽象方法</p><p><strong>函数式接口里允许定义默认方法</strong></p><p>函数式接口里是可以包含默认方法，因为默认方法不是抽象方法，其有一个默认实现，所以是符合函数式接口的定义的；</p><p>如下代码不会报错：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">GreetingService</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sayMessage</span><span class="params">(String message)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">doSomeMoreWork1</span><span class="params">()</span></span><br><span class="line">    {</span><br><span class="line">        <span class="comment">// Method body</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">doSomeMoreWork2</span><span class="params">()</span></span><br><span class="line">    {</span><br><span class="line">        <span class="comment">// Method body</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>函数式接口里允许定义静态方法</strong></p><p>函数式接口里是可以包含静态方法，因为静态方法不能是抽象方法，是一个已经实现了的方法，所以是符合函数式接口的定义的；</p><p>如下代码不会报错：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">GreetingService</span> </span><br><span class="line">{</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sayMessage</span><span class="params">(String message)</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printHello</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"Hello"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>函数式接口里允许定义 java.lang.Object 里的 public 方法</strong></p><p>函数式接口里是可以包含Object里的public方法，这些方法对于函数式接口来说，不被当成是抽象方法（虽然它们是抽象方法）；因为任何一个函数式接口的实现，默认都继承了 Object 类，包含了来自 java.lang.Object 里对这些抽象方法的实现；</p><p>如下代码不会报错：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">GreetingService</span>  </span><br><span class="line">{</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sayMessage</span><span class="params">(String message)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;第一次见Lamda表达式&quot;&gt;&lt;a href=&quot;#第一次见Lamda表达式&quot; class=&quot;headerlink&quot; title=&quot;第一次见Lamda表达式&quot;&gt;&lt;/a&gt;第一次见Lamda表达式&lt;/h3&gt;&lt;p&gt;第一次看到这行代码的时候，我是百思不得姐：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Toolkit.let(mUserTabFragment, f -&amp;gt; f.setUserVisibleHint(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;点击进入let函数看到其定义如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;meta&quot;&gt;@Nullable&lt;/span&gt; T input, Consumer&amp;lt;T&amp;gt; consumer)&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (input == &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt; || consumer == &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;) {&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    consumer.accept(input);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可以看出let的第二个参数是一个Consumer，但是上面的f-&amp;gt;f.setUserVisibleHint(isVisibleToUser));是什么鬼，是Consumer吗？答案是 是的，这样看就明白了，首先，我们创建一个Consumer对象：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Consumer&amp;lt;Fragment&amp;gt; consumer = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Consumer&lt;/span&gt;&amp;lt;Fragment&amp;gt;() {&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Fragment f)&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		f.setUserVisibleHint(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;};&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上面代码的Lamda形式为：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Consumer&amp;lt;Fragment&amp;gt; consumer = (f)-&amp;gt; f.setUserVisibleHint(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;所以 可以直接将等号右边带入let函数的第二个参数，就变成了那个样子：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Toolkit.let(mUserTabFragment, f -&amp;gt; f.setUserVisibleHint(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt; 现在应该就明白了第二个参数到底是啥了，其实就是一种Lamda表达式。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Android中动画的使用</title>
    <link href="https://chewenkai.github.io/uncategorized/android%E4%B8%AD%E5%8A%A8%E7%94%BB%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://chewenkai.github.io/uncategorized/android%E4%B8%AD%E5%8A%A8%E7%94%BB%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2018-12-02T11:43:30.000Z</published>
    <updated>2018-12-02T11:43:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android中动画的使用"><a href="#Android中动画的使用" class="headerlink" title="Android中动画的使用"></a>Android中动画的使用</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>在Android中，如果想让一个View的消失，如果没有做任何处理，直接<code>setVisibility(View.GONE)</code>，你会发现整个View是瞬间消失的，没有任何过度。为了让用户感知到View的消失，就要让这个View消失的时候带一个动画效果，这样可以减轻用户的焦虑感。</p><h4 id="Android中动画的种类"><a href="#Android中动画的种类" class="headerlink" title="Android中动画的种类"></a>Android中动画的种类</h4><p>Android中共有三种动画系统，分别是：</p><ul><li><a target="_blank" rel="noopener" href="http://developer.android.com/guide/topics/graphics/view-animation.html">View Animations</a> - 最原始的Android动画，性能差而且不够灵活.Property Animations动画出现后就被废弃了。</li><li><a target="_blank" rel="noopener" href="http://developer.android.com/guide/topics/graphics/prop-animation.html">Property Animations</a> - 自Android 3.0后引入的强大灵活的动画系统</li><li><a target="_blank" rel="noopener" href="https://developer.android.com/training/transitions/overview.html">Transition Animations</a> - 上面两种动画只是对某个View进行改变，而不会影响其所在的容器及周边的Views，而Transition动画可以适应layout的变化。默认的Transition框架支持Andorid 4.4以上的系统，使用<code>com.android.support:transition</code>支持库可以使Transition框架兼容到Android 4.0及以上。</li></ul><h4 id="Property-Animation-属性动画"><a href="#Property-Animation-属性动画" class="headerlink" title="Property Animation 属性动画"></a>Property Animation 属性动画</h4><p>其中我们最常用的是<strong>Property animation</strong>，称之为，属性动画。顾名思义，属性动画可以对任意对象的任意属性在一段时长内进行渐变：</p><blockquote><p>Property animations allow us to animate any property of any object from one value to another over a specified duration.</p></blockquote><p>所以，属性动画除了可以对View的位置、角度做变换外，还可以对字体的大小、View的颜色等属性进行变换。</p><p>Android中常用的动画叫<strong>Property Animation（属性动画）</strong>，它是出现在<strong>View Animation(视图动画)</strong> （包括 Tween Animation（补间动画）和 Frame Animation(逐帧动画)） 之后的，相比老的视图动画，Property Animation的主要优势是：</p><blockquote><p>老的View Animation只是对View对象的外观进行动画操作，但是并没有真正的改变对象本身的属性。例如对某个View平移以后，只是视觉特效，并没有真正改变这个View的位置，也就是说你点击平移后的View是不能触发onClick的，因为其属性中的位置还在原来的位置(the previous animations changed the visual appearance of the target objects… but they didn’t actually change the objects themselves.)。而Property Animation除了视觉效果，还能真正的改变View的属性。而使用Property Animation不仅可以对View进行透明度渐变、缩放、平移操作，还可以对其他的一些<strong>属性</strong>进行动画操作，例如字体大小，颜色，背景等，实现炫酷的字体颜色变化，或者背景颜色变化等等。</p></blockquote><p>Property Animation（属性动画）的主要实现类是：ObjectAnimation。这个类是我们实现动画最常用的类。</p><h2 id="ObjectAnimator-动画"><a href="#ObjectAnimator-动画" class="headerlink" title="ObjectAnimator 动画"></a>ObjectAnimator 动画</h2><h4 id="用法示例"><a href="#用法示例" class="headerlink" title="用法示例"></a>用法示例</h4><p>ObjectAnimator的主要用法如下，假设要让一个View进行透明度从透明到不透明：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ObjectAnimator</span> <span class="variable">alphaAnim</span> <span class="operator">=</span> ObjectAnimator.ofFloat(view,<span class="string">"Alpha"</span>, <span class="number">0f</span>, <span class="number">1f</span>) .setDuration(getResources().getInteger(R.integer.china_date_switch_btn_gone_duration));</span><br></pre></td></tr></tbody></table></figure><p>上面代码中ofFloat就是指让这个动画按照float类型的精度去变化。ofFloat函数源码中的常用构造函数如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ofFloat(Object target, String propertyName, <span class="type">float</span>... values)</span><br></pre></td></tr></tbody></table></figure><p>第一个target是要赋予动画的对象，第二个propertyName是赋予什么动画或者对这个对象的什么属性进行变化，第三个是一个可变长度的参数，那三个点表示这个参数可以有多个，例如上面示例代码中有两个，分别是0f和1f，表示从透明变到不透明。也可以添加任何多个，例如0f, 1f, 0.5f，指的就是从透明到不透明又到半透明。</p><p>上面简单的例子就实现了透明度动画。除了透明度属性，常用的属性还有：</p><p><strong>常用的propertyName有以下：</strong></p><p>| 属性         | 作用                              | 数值类型 || ———— | ——————————— | ——– || Alpha        | 控制View的透明度                  | float    || TranslationX | 控制X方向的位移（相对于当前位置） | float    || TranslationY | 控制Y方向的位移（相对于当前位置） | float    || ScaleX       | 控制X方向的缩放倍数               | float    || ScaleY       | 控制Y方向的缩放倍数               | float    || Rotation     | 控制以屏幕方向为轴的旋转度数      | float    || RotationX    | 控制以X轴为轴的旋转度数           | float    || RotationY    | 控制以Y轴为轴的旋转度数           | float    |</p><p>除了上面的属性，ObjectAnimator可以对一个对象的任意属性进行动画渐变，例如：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ObjectAnimator.ofFloat(mTextView,<span class="string">"textSize"</span>,  <span class="number">0</span>, <span class="number">100</span>, <span class="number">50</span>)</span><br><span class="line">                .setDuration(<span class="number">5000</span>)</span><br><span class="line">                .start();</span><br></pre></td></tr></tbody></table></figure><p>这样就相当于不断调用TextView的setTextSize()方法对文字大小进行设置，就实现字体变大，再变小的动画。</p><p><img src="http://chewenkai.cf/owncloud/index.php/s/9MpkcPg9Z2eBFGU/download" alt="示例"></p><p>但是需要注意的是，如果要对一个对象的属性进行变化，这个对象必须有公开的<code>set</code>的方法例如TextView有setTextSize这个方法，那么就可以用“textSize”这个属性。</p><p>这时你可能会疑惑了🤔，如果想控制的对象方法名字不是set开头，而是叫changeTextSize或者moveXPosition等，或者一个对象有set方法，但是没有public暴露给大家使用怎么办呢？</p><p>这时可以提出两种抛砖引玉的方法：</p><ul><li>在对象外层包装一个类，自己写一个public的set方法控制对象的属性。</li><li>使用ValueAnimator。至于什么是ValueAnimator，下面就马上会讲到。</li></ul><h4 id="ValueAnimator"><a href="#ValueAnimator" class="headerlink" title="ValueAnimator"></a>ValueAnimator</h4><p>明白了怎么用，我们再简单了解一下它实现的原理，想一想怎样实现对象的属性动画呢？如果我们想实现一个1秒钟内将透明度从0变到1的动画，其实是把整个工作分成了两部分：</p><ul><li><p>计算属性（透明度）的值。也就是这一秒内，每个时间点的属性值应该是多少，这部分工作由ValueAnimator完成。</p></li><li><p>设置属性（透明度）的值。将每个时间点的值设置到对象上。这部分由ObjectAnimator完成。</p></li></ul><p>其实ValueAnimator就是一个时间机制，你甚至可以单纯的利用它的时间机制实现除了动画以外的其他逻辑：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ValueAnimator</span> <span class="variable">anim</span> <span class="operator">=</span> ValueAnimator.ofFloat(<span class="number">0f</span>, <span class="number">1f</span>);</span><br><span class="line">anim.setDuration(<span class="number">500</span>);</span><br><span class="line">anim.addUpdateListener(<span class="keyword">new</span> <span class="title class_">ValueAnimator</span>.AnimatorUpdateListener() {</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> {</span><br><span class="line">            <span class="type">Float</span> <span class="variable">value</span> <span class="operator">=</span> (Float) animation.getAnimatedValue();</span><br><span class="line">            <span class="comment">// do something with value...</span></span><br><span class="line">        }</span><br><span class="line">    });</span><br><span class="line">anim.start();</span><br></pre></td></tr></tbody></table></figure><h4 id="AnimatorSet"><a href="#AnimatorSet" class="headerlink" title="AnimatorSet"></a>AnimatorSet</h4><p>如果需要组合多个动画，可以借助<code>AnimatorSet</code>进行统一管理。AnimatorSet类可以将单个的ObjectAnimator组合起来形成动画集，可以同时创建多个特效，例如，一边放大一边变透明化或者按照顺序先放大再透明化等等。通过组合不同的动画属性，可以满足生活中大部分常用的场景。其用法如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ObjectAnimator</span> <span class="variable">alphaAnim</span> <span class="operator">=</span> ObjectAnimator.ofFloat(view,<span class="string">"Alpha"</span>, <span class="number">0f</span>, <span class="number">1f</span>)</span><br><span class="line">        .setDuration(getResources().getInteger(R.integer.china_date_switch_btn_gone_duration));</span><br><span class="line"><span class="type">ObjectAnimator</span> <span class="variable">scaleAnim</span> <span class="operator">=</span> ObjectAnimator.ofFloat(view,<span class="string">"scaleY"</span>,  <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">        .setDuration(getResources().getInteger(R.integer.china_date_switch_btn_gone_duration));</span><br><span class="line"><span class="type">AnimatorSet</span> <span class="variable">fadeInAnim</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnimatorSet</span>();</span><br><span class="line">fadeInAnim.play(alphaAnim).with(scaleAnim);</span><br><span class="line">fadeInAnim.addListener(<span class="keyword">new</span> <span class="title class_">AnimatorListenerAdapter</span>() {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAnimationStart</span><span class="params">(Animator animation)</span> {</span><br><span class="line">        <span class="built_in">super</span>.onAnimationStart(animation);</span><br><span class="line">        view.setVisibility(View.VISIBLE);</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line">fadeInAnim.start();</span><br></pre></td></tr></tbody></table></figure><h4 id="两大神器TypeEvaluator和Interpolation"><a href="#两大神器TypeEvaluator和Interpolation" class="headerlink" title="两大神器TypeEvaluator和Interpolation"></a>两大神器TypeEvaluator和Interpolation</h4><h5 id="TypeEvaluator"><a href="#TypeEvaluator" class="headerlink" title="TypeEvaluator"></a>TypeEvaluator</h5><p>恐怕不少刚接触ObjectAnimator的人都会想为啥ObjectAnimator后面要跟ofFloat, ofInt和ofObject，ofObject又是个什么东西呢？</p><p>如果一个动画变化的属性是数字，例如透明度就是从0到1的，ofFloat会在要求的时间范围内把每个时间点的值计算成一个个的float值，相应的，ofInt就会把属性值计算成Int值，这些都是动画系统实现的方法。那如果现在属性的变化不是时间而是Point类，那动画系统怎么知道如何计算每个时间点的Point值呢，答案是你来告诉动画系统如何计算。只要继承TypeEvaluator类，实现其中的evaluate方法即可：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PointEvaluator</span> <span class="keyword">implements</span> <span class="title class_">TypeEvaluator</span> {</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">evaluate</span><span class="params">(<span class="type">float</span> fraction, Object startValue, Object endValue)</span> {</span><br><span class="line">        <span class="type">Point</span> <span class="variable">startPoint</span> <span class="operator">=</span> (Point) startValue;</span><br><span class="line">        <span class="type">Point</span> <span class="variable">endPoint</span> <span class="operator">=</span> (Point) endValue;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Point</span>(startPoint.x + fraction * (endPoint.x - startPoint.x),</span><br><span class="line">                         startPoint.y + fraction * (endPoint.y - startPoint.y));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这样就可以计算两个点之间的值了：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Point</span> <span class="variable">p0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="type">Point</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">100</span>, <span class="number">200</span>);</span><br><span class="line"><span class="type">ValueAnimator</span> <span class="variable">anim</span> <span class="operator">=</span> ValueAnimator.ofObject(<span class="keyword">new</span> <span class="title class_">PointEvaluator</span>(), p0, p1);</span><br></pre></td></tr></tbody></table></figure><h5 id="Interpolation"><a href="#Interpolation" class="headerlink" title="Interpolation"></a>Interpolation</h5><p>放大，缩小，平移等这样的动画方式非常普通，因为这些动画是线性的，也就是说在动画时间内，属性值的变化是线性变化的。大家有时会看到一些非常炫酷的动画例如，回弹，果冻效果等等，这些效果多是非线性变化的结果，如果想实现这样的效果，就用到了Interpolation（插值器）。</p><p>Android已经实现了常用的Interpolation，如：</p><p>| Name                   | Description || ———————- | ———– || AccelerateInterpolator | 加速        || BounceInterpolator     | 弹跳        || DecelerateInterpolator | 减速        |</p><p>还有AccelerateDecelerateInterpolator、AnticipateInterpolator、PathInterpolator、OvershootInterpolator、AnticipateOvershootInterpolator 、DecelerateInterpolator 、CycleInterpolator等，这些基本上涵盖了我们使用的范围。</p><p>当然，如果上面插值器不满足需求，也可以定制插值器，只需要继承BaseInterpolator并实现TimeInterpolator接口就可以了，例如OvershootInterpolator的实现：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OvershootInterpolator</span> <span class="keyword">extends</span> <span class="title class_">BaseInterpolator</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">float</span> mTension;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OvershootInterpolator</span><span class="params">()</span> {</span><br><span class="line">        mTension = <span class="number">2.0f</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OvershootInterpolator</span><span class="params">(<span class="type">float</span> tension)</span> {</span><br><span class="line">        mTension = tension;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getInterpolation</span><span class="params">(<span class="type">float</span> t)</span> {</span><br><span class="line">        <span class="comment">// _o(t) = t * t * ((tension + 1) * t + tension)</span></span><br><span class="line">        <span class="comment">// o(t) = _o(t - 1) + 1</span></span><br><span class="line">        t -= <span class="number">1.0f</span>;</span><br><span class="line">        <span class="keyword">return</span> t * t * ((mTension + <span class="number">1</span>) * t + mTension) + <span class="number">1.0f</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这里的getInterpolation方法里是一个插值器函数，如果输入的t直接返回，那这就是一个线性插值器。<a target="_blank" rel="noopener" href="http://inloop.github.io/interpolator/">这个网站</a>看一查看插值器函数生成的曲线，安利给大家。</p><h2 id="Android-Transition-Framework"><a href="#Android-Transition-Framework" class="headerlink" title="Android Transition Framework"></a>Android Transition Framework</h2><p>上面介绍的动画针对的是某一个对象进行动画操作，但是实际应用中，我更多的使用Android的Transition动画来移动某个View。Transition动画与Property动画最大的区别就是：View动的过程中会对其周边的View产生影响。也就是说，如果我想让一个View逐渐变大，那它在变大的过程中不会覆盖在其周边的View上面，而是挤推着周围的View移动，也就是整个Layout都在变化，而这一切都是Transition框架自动实现的，开发者不需要关心实现细节。</p><p>后续补充：</p><p>https://developer.android.com/training/transitions/</p><p>https://developer.android.com/training/transitions/start-activity</p><p>https://cloud.tencent.com/info/8fb508a6e6115e59e4f151fbaadd432e.html</p><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p>ObjectAnimator 基本使用  http://wiki.jikexueyuan.com/project/android-animation/7.html</p><p>Android 属性动画：这是一篇很详细的 属性动画 总结&amp;攻略 https://blog.csdn.net/carson_ho/article/details/72909894</p><p>为什么要废弃掉Android之前的动画？https://android-developers.googleblog.com/2011/02/animation-in-honeycomb.html</p><p>查看Interpolation曲线：http://inloop.github.io/interpolator/</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Android中动画的使用&quot;&gt;&lt;a href=&quot;#Android中动画的使用&quot; class=&quot;headerlink&quot; title=&quot;Android中动画的使用&quot;&gt;&lt;/a&gt;Android中动画的使用&lt;/h1&gt;&lt;h2 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>原来我根本不会用Android Studio</title>
    <link href="https://chewenkai.github.io/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/%E5%8E%9F%E6%9D%A5%E6%88%91%E6%A0%B9%E6%9C%AC%E4%B8%8D%E4%BC%9A%E7%94%A8android-studio/"/>
    <id>https://chewenkai.github.io/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/%E5%8E%9F%E6%9D%A5%E6%88%91%E6%A0%B9%E6%9C%AC%E4%B8%8D%E4%BC%9A%E7%94%A8android-studio/</id>
    <published>2018-10-28T03:09:47.000Z</published>
    <updated>2018-10-28T03:09:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近在工作中解锁了一些使用Android Studio的技巧，在这里记录一下。</p><h3 id="1-为什么明明我的电脑剩余那么多内存，用Android-Studio打开多个工程后就开始卡顿了呢？"><a href="#1-为什么明明我的电脑剩余那么多内存，用Android-Studio打开多个工程后就开始卡顿了呢？" class="headerlink" title="1. 为什么明明我的电脑剩余那么多内存，用Android Studio打开多个工程后就开始卡顿了呢？"></a>1. 为什么明明我的电脑剩余那么多内存，用Android Studio打开多个工程后就开始卡顿了呢？</h3><p>有一次在使用Android stuido的时候发现会卡顿无比，滚动鼠标都卡，但我的机器明明配置很高，系统剩余的内存也很多啊。</p><p>于是，打开<strong>内存指示器</strong>，查看Android Studio的内存使用情况：</p><p><code>打开设置 -&gt; Appearance -&gt; Window Options -&gt; Show memory indicator </code></p><img src="/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/%E5%8E%9F%E6%9D%A5%E6%88%91%E6%A0%B9%E6%9C%AC%E4%B8%8D%E4%BC%9A%E7%94%A8android-studio/open_memory_indicator.png" class="" title="image"> <p>勾选了Show memory indicator 之后，就可以在Android Studio的右下角看到内存指示器了：</p><img src="/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/%E5%8E%9F%E6%9D%A5%E6%88%91%E6%A0%B9%E6%9C%AC%E4%B8%8D%E4%BC%9A%E7%94%A8android-studio/indicator.png" class="" title="indicator"><p>双击指示器可以手动进行GC操作。这里显示的就是Android Studio占用的内存大小（左）和分配给Android Studio使用的最大内存（右）。如果发现占用内存基本上快要等于分配的最大内存的时候，说明需要分配更多的内存给Android Studio了。当时我的机器显示的是<code>1020/1024M</code>，这应该就是其默认分配的内存大小，基本上分配的内存已经快要用完了，这也就是为啥明明电脑内存剩余很多，但是Android Studio却很卡顿的原因。</p><p>于是，通过下面步骤来提高分配给Android的内存：</p><p>打开菜单<code>Help-&gt;Edit Custom VM Options</code>，这时，会在新窗口打开一个<code>studo.vmoptions</code>文件（如果之前没有，会新创建一个），在打开的文件中输入下面代码配置虚拟机堆栈的最大分配内存：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Xmx4096m</span><br></pre></td></tr></tbody></table></figure><p>这里可以根据自己机器的内存大小，对Android Studio进行配置，配置完成后，重启Android Studio，看到右下角的内存指示器显示的最大分配内存已经发生了变化，就说明生效了。</p><span id="more"></span><h3 id="2-提高生产效率的快捷键"><a href="#2-提高生产效率的快捷键" class="headerlink" title="2. 提高生产效率的快捷键"></a>2. 提高生产效率的快捷键</h3><p>无意中，在Android Studi的Help菜单中发现了一个叫Productivity Guide的窗口，里面列出的一些快捷键都是跟效率有关的：</p><p>例如有我们常用的自动补全（Basic code completion），还有Complete Statement这种神奇的功能，再也不用移动箭头和手动加分号了！！点击功能名字下方会列出快捷键和说明，建议把这里面的功能过一遍，相信会很有帮助。</p><p>列几个我用的非常上瘾的在下面：</p><ul><li>Quick Definition Lookup: 将定义以弹窗的形式打开，而不跳转到定义处，快捷键：<code>Ctrl+Shift+I</code> </li><li>Extract Method/Function: 将一段代码抽出成一个函数，快捷键： <code>Ctrl+Alt+M</code></li><li>Generate菜单：<code>Alt+Insert</code> </li><li>Introduce Constant：使某个量变成常量<code>Ctrl+Alt+C</code></li><li>继承方法 <code>Ctrl + O</code></li><li>实现方法 <code>Ctrl + I</code> </li><li>查看参数信息 <code>Ctrl + P</code></li><li>Surround With <code>Ctrl+Alt+T</code></li><li>Extend select <code>Ctrl+W</code></li><li>当前行/函数/块上下移动 <code>Shift+Meta+Up/Down</code></li></ul><h3 id="3-调试的技巧"><a href="#3-调试的技巧" class="headerlink" title="3. 调试的技巧"></a>3. 调试的技巧</h3><p>首先，日常调试中最常用的调试方法就是打断点和加Log了，AdroidStudro中的断点功能非常强大，在断点上点右键，在弹出的窗口中点More或者直接点击Debug标签中的断点列表<img src="/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/%E5%8E%9F%E6%9D%A5%E6%88%91%E6%A0%B9%E6%9C%AC%E4%B8%8D%E4%BC%9A%E7%94%A8android-studio/breakpoints.png" class="" title="断点列表">可以对断点进行更有用的设置，下面来详细说下这个断点设置页面：</p><img src="/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/%E5%8E%9F%E6%9D%A5%E6%88%91%E6%A0%B9%E6%9C%AC%E4%B8%8D%E4%BC%9A%E7%94%A8android-studio/breakpointsetting.png" class="" title="断点设置"><ul><li><strong>Suspend + Evaluate and log：</strong>调试的时候需要在某处添加一个Log，这时候如果用Log.e(xx,xxx)加入需要重新编译并安装到手机上才能查看。我们可以取消勾选Suspend，这样程序运行到断点处并不会停下，在<strong>Evaluate and log</strong>中写好想打印的log，运行到断点处在Console中就会打出Log信息了。</li><li><strong>Evaluate and log：</strong>这个功能与Evaluate功能相同，可以在调试时，对一个实例进行操作，例如读取某个对象的值，修改某个对象的值等。这里的Evaluate and log的区别就是会将操作的结果打印到Console。</li><li>使用<strong>Condition</strong>给断点添加条件。在Condition中输入一个返回值为Bollean的语句，那么只有返回true的时候，断点才会生效。</li></ul><p>通过上面的工具可以更方便的了解程序的运行状态。当然，这还是避免不了我们有时会设置了错误的断点位置，导致：</p><img src="/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/%E5%8E%9F%E6%9D%A5%E6%88%91%E6%A0%B9%E6%9C%AC%E4%B8%8D%E4%BC%9A%E7%94%A8android-studio/wrong_break_point.gif" class="" title="错误的断点位置"><p>这时，我们可以利用调用栈，从下往上的查看调用顺序，调试时，调用栈会在Debug标签中的Debugger-&gt;Frames中显示：</p><img src="/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/%E5%8E%9F%E6%9D%A5%E6%88%91%E6%A0%B9%E6%9C%AC%E4%B8%8D%E4%BC%9A%E7%94%A8android-studio/invokestack.png" class="" title="错误的断点位置"><p>在上面的调用栈中，背景底色是黄色的表示是来自SDK的调用，背景是正常的Android的主题色表示的是来自你代码的调用。</p><p>调用栈非常有用，举个例子：有一次在调试时，点击了界面上一个按钮后Activity就关掉了，但是代码中却无论怎么找都找不到对这个按钮的监听，没有setOnClickListener，那点击后是怎么执行的呢？就在我愁眉不展的时候，老司机出现了，告诉我既然肯定会被Activity被Finish掉了，那在Finish函数里加断点，查看调用栈就可以顺藤摸瓜的找到按钮的点击事件处理代码。果然就找到了，原来按钮的监听定义在了Base类中。</p><h3 id="4-定位当前页面的源码位置"><a href="#4-定位当前页面的源码位置" class="headerlink" title="4. 定位当前页面的源码位置"></a>4. 定位当前页面的源码位置</h3><p>阅读新项目代码时，领导让我修改页面上一个控件，这时首先要做的就是代码中找到这个页面，于是，菜鸟的我我就开始从MainActivity开始顺着代码往下捋着找，发现要找到一个控件要找半天，有时候甚至半天都找不到。于是，我总结了两条寻找Activity或者某个View的方法：</p><ol><li>在Androd Studio中点击Tools-&gt;Layout Inspector，选择当前进程后就会弹出当前任务栈中所有的Activity的列表，这时候在源码中搜索（Ctrl+Shift+F）名字就可以Activity的源码位置。如果需要找页面上某一个控件View，可以继续点击Activity，在打开的节面中选中要寻找的控件，查看其id，再根据id搜索就可以找到View了。但是这个方法并不总是那么好用，有时任务栈中只有一个Activity时，就不会出现Activity列表，直接打开布局的Capture文件了。</li><li>另一种方法跟Android Studio无关，是通过Android系统自带的dumpsys命令获取任务栈及Activity信息，在命令行中输入下面语句:</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys activity activities | grep -A 20 "A=com.xxxx.xxxx"</span><br></pre></td></tr></tbody></table></figure><p>这样就能得到当前的Activity信息了：</p><img src="/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/%E5%8E%9F%E6%9D%A5%E6%88%91%E6%A0%B9%E6%9C%AC%E4%B8%8D%E4%BC%9A%E7%94%A8android-studio/dumpinfo.png" class="" title="dump信息"><p>把这条命设置别名，放到bashrc文件中，就可以在在命令行里直接使用了：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 放到bashrc文件中</span><br><span class="line">export package_name="A=xxx.xxx.xxx"  # 写好包名</span><br><span class="line">alias whatisthispage="adb shell dumpsys activity activities | grep -A 20 "</span><br></pre></td></tr></tbody></table></figure><p>运行时，直接运行whatisthispage $package_name就可以了。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;最近在工作中解锁了一些使用Android Studio的技巧，在这里记录一下。&lt;/p&gt;
&lt;h3 id=&quot;1-为什么明明我的电脑剩余那么多内存，用Android-Studio打开多个工程后就开始卡顿了呢？&quot;&gt;&lt;a href=&quot;#1-为什么明明我的电脑剩余那么多内存，用Android-Studio打开多个工程后就开始卡顿了呢？&quot; class=&quot;headerlink&quot; title=&quot;1. 为什么明明我的电脑剩余那么多内存，用Android Studio打开多个工程后就开始卡顿了呢？&quot;&gt;&lt;/a&gt;1. 为什么明明我的电脑剩余那么多内存，用Android Studio打开多个工程后就开始卡顿了呢？&lt;/h3&gt;&lt;p&gt;有一次在使用Android stuido的时候发现会卡顿无比，滚动鼠标都卡，但我的机器明明配置很高，系统剩余的内存也很多啊。&lt;/p&gt;
&lt;p&gt;于是，打开&lt;strong&gt;内存指示器&lt;/strong&gt;，查看Android Studio的内存使用情况：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;打开设置 -&amp;gt; Appearance -&amp;gt; Window Options -&amp;gt; Show memory indicator &lt;/code&gt;&lt;/p&gt;
&lt;img src=&quot;/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/%E5%8E%9F%E6%9D%A5%E6%88%91%E6%A0%B9%E6%9C%AC%E4%B8%8D%E4%BC%9A%E7%94%A8android-studio/open_memory_indicator.png&quot; class=&quot;&quot; title=&quot;image&quot;&gt; 

&lt;p&gt;勾选了Show memory indicator 之后，就可以在Android Studio的右下角看到内存指示器了：&lt;/p&gt;
&lt;img src=&quot;/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/%E5%8E%9F%E6%9D%A5%E6%88%91%E6%A0%B9%E6%9C%AC%E4%B8%8D%E4%BC%9A%E7%94%A8android-studio/indicator.png&quot; class=&quot;&quot; title=&quot;indicator&quot;&gt;

&lt;p&gt;双击指示器可以手动进行GC操作。这里显示的就是Android Studio占用的内存大小（左）和分配给Android Studio使用的最大内存（右）。如果发现占用内存基本上快要等于分配的最大内存的时候，说明需要分配更多的内存给Android Studio了。当时我的机器显示的是&lt;code&gt;1020/1024M&lt;/code&gt;，这应该就是其默认分配的内存大小，基本上分配的内存已经快要用完了，这也就是为啥明明电脑内存剩余很多，但是Android Studio却很卡顿的原因。&lt;/p&gt;
&lt;p&gt;于是，通过下面步骤来提高分配给Android的内存：&lt;/p&gt;
&lt;p&gt;打开菜单&lt;code&gt;Help-&amp;gt;Edit Custom VM Options&lt;/code&gt;，这时，会在新窗口打开一个&lt;code&gt;studo.vmoptions&lt;/code&gt;文件（如果之前没有，会新创建一个），在打开的文件中输入下面代码配置虚拟机堆栈的最大分配内存：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-Xmx4096m&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里可以根据自己机器的内存大小，对Android Studio进行配置，配置完成后，重启Android Studio，看到右下角的内存指示器显示的最大分配内存已经发生了变化，就说明生效了。&lt;/p&gt;</summary>
    
    
    
    <category term="日常记录" scheme="https://chewenkai.github.io/categories/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Android" scheme="https://chewenkai.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>基于MainFramer进行远程编译（以Android开发为例）</title>
    <link href="https://chewenkai.github.io/%E5%B7%A5%E5%85%B7/%E5%9F%BA%E4%BA%8Emainframer%E8%BF%9B%E8%A1%8C%E8%BF%9C%E7%A8%8B%E7%BC%96%E8%AF%91%EF%BC%88%E4%BB%A5android%E5%BC%80%E5%8F%91%E4%B8%BA%E4%BE%8B%EF%BC%89/"/>
    <id>https://chewenkai.github.io/%E5%B7%A5%E5%85%B7/%E5%9F%BA%E4%BA%8Emainframer%E8%BF%9B%E8%A1%8C%E8%BF%9C%E7%A8%8B%E7%BC%96%E8%AF%91%EF%BC%88%E4%BB%A5android%E5%BC%80%E5%8F%91%E4%B8%BA%E4%BE%8B%EF%BC%89/</id>
    <published>2018-10-11T16:29:10.000Z</published>
    <updated>2018-10-11T16:29:10.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、故事背景（可略过）"><a href="#一、故事背景（可略过）" class="headerlink" title="一、故事背景（可略过）"></a>一、故事背景（可略过）</h3><blockquote><p>以前，世界上只有两种电脑：笔记本和台式机。</p><p>上帝说，要有高性能的笔记本。于是，就有了MainFramer。</p></blockquote><p>我就遇到了这种情况，上班后公司配的是MacBookPro的笔记本和一个Windows的台式机（PC），我曾尝试过使用MacBook作为主力机工作，MacOS的体验非常优秀，但是唯一的不足就是其在处理大型复杂任务时的速度远不如我那台高配的台式机，编译一次工程的时间差在3分钟左右，而我每天编译上20次就能差出一个小时，有这个时间提前让我下班多好。最重要的是，我只要一点击Build，整个机器就开始满负荷运行，除了温度飙升外，CPU也被占满，这时候开个网页都卡成了幻灯片。</p><p>为了提高工作效率，我尝试一直用台式机工作，于是我的MBP吃灰了很久，这么优秀的笔记本放在那里吃灰实在是心疼。最关键的是，台式机让我完全没有<strong>工作流</strong>的感觉，当我周末无聊想充电的时候，我发现我所有想看的东西都在公司，当我一个个软件打开，一个个网页从历史记录中找到后，我发现我已经没有了学习的欲望。这时候我非常想念用笔记本时那种“合盖走人”后，回家打开盖子发现我所有的思路都还在的感觉。</p><p>于是我急切的找一种方法，让简单的任务在笔记本上来做，复杂的任务能够利用台式机完成，并且在体验上做到“无差别”。终于，我在浏览全球最大的同性社交网站时惊喜的发现了<a target="_blank" rel="noopener" href="https://github.com/gojuno/mainframer"><strong>mainframer</strong></a>，这是一个工具，可以将编译这件占内存和CPU的事从本地电脑放到远程电脑上来做。</p><p>简单的说，你只需要一台本地机器（Local Machine：例如我的性能不咋地的MacBook）和一台远程机器（Remote Machine：性能强悍的台式机或者云主机），通过mainframer，就可以实现在本地机器上写代码，在远程机器上编译代码。你可以在笔记本上写代码，到了需要调试的时候，mainframer会快速同步代码到远程机器并进行编译，并将编译的结果返回到你的笔记本，这一切仿佛都是在你的笔记本上进行的，你可以正常的build和调试程序。这样一来，就可以享受笔记本的便捷，又能享受台式机的高性能了，美滋滋。</p><p>下面就是我配置成功后，录制的在MacBookPro上写代码，在Linux发行版Manjaro上进行Build的视频：</p><p><a target="_blank" rel="noopener" href="https://www.bilibili.com/video/av63591281/">传送门</a></p><p><video src="https://www.bilibili.com/ea30eaf0-ead5-4ad3-a44d-71bba3ca4dc0" controls="controls" style="max-width: 100%; display: block; margin-left: auto; margin-right: auto;"> your browser does not support the video tag </video></p><span id="more"></span><p>目前该工具支持所有使用以下技术构建的代码：</p><ul><li><a target="_blank" rel="noopener" href="https://github.com/gojuno/mainframer/blob/development/samples/gradle">Gradle</a></li><li><a target="_blank" rel="noopener" href="https://github.com/gojuno/mainframer/blob/development/samples/gradle-android">Gradle Android</a></li><li><a target="_blank" rel="noopener" href="https://github.com/gojuno/mainframer/blob/development/samples/rust">Rust</a></li><li><a target="_blank" rel="noopener" href="https://github.com/gojuno/mainframer/blob/development/samples/clang">Clang</a></li><li><a target="_blank" rel="noopener" href="https://github.com/gojuno/mainframer/blob/development/samples/gcc">GCC</a></li><li><a target="_blank" rel="noopener" href="https://github.com/gojuno/mainframer/blob/development/samples/mvn">Maven</a></li><li><a target="_blank" rel="noopener" href="https://github.com/gojuno/mainframer/blob/development/samples/buck">Buck</a></li><li><a target="_blank" rel="noopener" href="https://github.com/gojuno/mainframer/blob/development/samples/go">Go</a></li></ul><h3 id="二、开始安装和配置"><a href="#二、开始安装和配置" class="headerlink" title="二、开始安装和配置"></a>二、开始安装和配置</h3><p><strong>mainframer</strong>的安装非常简单，以Android为例，你只需要：</p><ol><li>下载mainframer到你工程的根目录下；</li><li>配置本地电脑和远程电脑的SSH；</li><li>根据不通类型的代码配置一下开发环境；</li></ol><p>可以根据github上的readmen一步步的操作，有英文不好的小伙伴可以参考我实践的路子：</p><h5 id="1-下载mainframer"><a href="#1-下载mainframer" class="headerlink" title="1.下载mainframer"></a>1.下载mainframer</h5><p>在<a target="_blank" rel="noopener" href="https://github.com/gojuno/mainframer/releases/latest">这里</a>下载mainframer的sh文件，放到Android工程的根目录下就可以了</p><h5 id="2-配置本地电脑和远程电脑的SSH"><a href="#2-配置本地电脑和远程电脑的SSH" class="headerlink" title="2. 配置本地电脑和远程电脑的SSH"></a>2. 配置本地电脑和远程电脑的SSH</h5><p><strong>2.1</strong>     配置SSH的目的是为了能让本地电脑直接运行ssh+远程电脑名字就可以进行ssh连接，避免中间复杂的输密码等过程，在配置前，你需要先了解远程电脑的三个参数：</p><ul><li><code>REMOTE_MACHINE_ALIAS</code> — 远程电脑的名字，通常在Linux中是hostname，可以通过<code>cat /etc/hostname</code>查看，在mac上可以通过<code>scutil --get ComputerName</code>查看.</li><li><code>REMOTE_MACHINE_IP_OR_HOSTNAME</code> — 远程电脑的IP或者域名，如果是局域网内的电脑，则可能是192.168.XX.XX的形式，如果是云服务器可以直接填服务器地址如 <code>42.42.42.42</code> or <code>remote.domain.com</code>.</li><li><code>REMOTE_MACHINE_USERNAME</code> — 远程电脑的用户名，这里官方建议在远程电脑新建一个用户（下面有脚本）来操作，这里可以现在就起一个名字，例如calvin。</li></ul><p>后续教程中出现上面三个参数时，请替换为其正确的值。</p><p><strong>2.2</strong>     知道了这三个参数，就可以开始配置了，首先配置本地电脑：</p><ul><li>在本地生成ssh密钥：</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C "{REMOTE_MACHINE_USERNAME}"  //{REMOTE_MACHINE_USERNAME}替换为刚才起的用户名calvin</span><br></pre></td></tr></tbody></table></figure><p>一路按回车就可以在<code>~/.ssh/</code>目录下生成公钥文件<code>id_rsa.pub</code>和私钥文件<code>id_rsa</code>.</p><ul><li>配置本地SSH</li></ul><p>开启SSH的ControlMaster并持久化socket连接，可以避免每次连接远程机器时重新建立连接，并可以省掉输入密码的过程，加速SSH命令的执行速度。具体操作为，打开<code>~/.ssh/config</code>(如果没有则创建一个新的)，并在里面输入：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Host {REMOTE_MACHINE_ALIAS}</span><br><span class="line">  User {REMOTE_MACHINE_USERNAME}</span><br><span class="line">  HostName {REMOTE_MACHINE_IP_OR_HOSTNAME}</span><br><span class="line">  Port 22</span><br><span class="line">  IdentityFile ~/.ssh/{SSH_KEY_NAME}</span><br><span class="line">  PreferredAuthentications publickey</span><br><span class="line">  ControlMaster auto</span><br><span class="line">  ControlPath /tmp/%r@%h:%p</span><br><span class="line">  ControlPersist 1h</span><br><span class="line">  </span><br><span class="line"># 例如</span><br><span class="line">Host calvin</span><br><span class="line">  User calvinche</span><br><span class="line">  HostName 192.168.31.129</span><br><span class="line">  Port 22</span><br><span class="line">  IdentityFile ~/.ssh/id_rsa</span><br><span class="line">  PreferredAuthentications publickey</span><br><span class="line">  ControlMaster auto</span><br><span class="line">  ControlPath /tmp/%r@%h:%p</span><br><span class="line">  ControlPersist 1h</span><br></pre></td></tr></tbody></table></figure><p> 其中，{REMOTE_MACHINE_ALIAS}替换为远程机器的名字，{REMOTE_MACHINE_USERNAME}替换为远程机器的用户名，{REMOTE_MACHINE_IP_OR_HOSTNAME}替换为远程机器的IP或域名，{SSH_KEY_NAME}替换为上一节说的在本地生成ssh私钥文件的名字，其位置位于~/.ssh/下，名字一般为id_rsa。</p><p><strong>2.3</strong>     下面登陆远程机器，进行配置：</p><p>在远程电脑上创建新用户{REMOTE_MACHINE_USERNAME}，并将配置公钥，这里可以直接通过<a target="_blank" rel="noopener" href="https://github.com/buildfoundation/mainframer/blob/3.x/recipes/SETUP_REMOTE_MACHINE.md">官方脚本</a>进行操作，将脚本<code>remote_machine_setup.sh</code>下载到远程服务器并这样运行：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">remote_machine_setup.sh {REMOTE_MACHINE_USERNAME} "引号内将刚才生成的公钥文件中的内容复制过来"</span><br></pre></td></tr></tbody></table></figure><p>这里的REMOTE_MACHINE_USERNAME就是在远程机器上新建的用户，这样如果几个人共用一台远程服务器来写一个工程就不会讲代码混淆在一起了。</p><p>执行后若显示<code>New user $NEW_USER was set up correctly</code>就说明创建成功了。</p><p>通过输入 <code>ssh 远程机器的用户名 如ssh calvin</code>来验证是否能够顺利登陆到远程机器，如果不需要输密码就能登陆成功，那么就可以了，如果出现:<code>Permission denied (publickey,password)</code>这样的话就说明远程机器的公钥与本地不符，或者本地ssh的config文件中私钥的名字不正确，需要认真检查。</p><p>到这里，基本上就完成了mainframer的配置工作，可以通过运行下面代码测试能否工作：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash ./mainframer.sh echo "I am Calvin" &gt; success.txt</span><br></pre></td></tr></tbody></table></figure><p>如果本地的success文件中的内容如下图所示，那么整个流程就跑通了。</p><p>如果您是Android开发的话，可以通过命令 <code>./mainframer ./gradlew build</code> 进行远程编译了。</p><p>如果你还想再进一步，把该工具添加到开发环境中，实现无缝隙的远程编译，可以根据背景一节中列出的不同的开发的链接查看教程，下面以Android为例，介绍怎么将其接入到Android Studio中，实现，点击调试按钮，自动远程编译。</p><h5 id="3-根据不通类型的代码配置开发环境（以Android为例）"><a href="#3-根据不通类型的代码配置开发环境（以Android为例）" class="headerlink" title="3. 根据不通类型的代码配置开发环境（以Android为例）"></a>3. 根据不通类型的代码配置开发环境（以Android为例）</h5><p>打开Android Studio， 按照下面步骤进行配置：</p><ul><li>点击<strong>Run</strong> → <strong>Edit Configuration</strong> → <strong>+</strong>.</li><li>选择 <strong>Android App</strong>.</li><li>起一个好一点的名字, 例如<strong>remote-build</strong>.</li><li>在Module中选择要编译的模块名字，如app.</li><li>在Before Launch只点击减号删除原来的 <strong>Gradle-aware Make</strong></li><li>在Before Launch只点击+号创建一个 <strong>Run External Tool.</strong></li><li>填个好一点的名字，如<strong>remote assembleDebug.</strong></li><li>Program里填<strong>bash</strong>.</li><li>Parameters里填<code>mainframer.sh ./gradlew :app:assembleDebug -Pandroid.enableBuildCache=true</code></li><li>Working directory里填<code>$ProjectFileDir$</code>.</li></ul><p>示意图：</p><img src="/%E5%B7%A5%E5%85%B7/%E5%9F%BA%E4%BA%8Emainframer%E8%BF%9B%E8%A1%8C%E8%BF%9C%E7%A8%8B%E7%BC%96%E8%AF%91%EF%BC%88%E4%BB%A5android%E5%BC%80%E5%8F%91%E4%B8%BA%E4%BE%8B%EF%BC%89/as%E9%85%8D%E7%BD%AE%E7%A4%BA%E6%84%8F%E5%9B%BE1.png" class="" title="This is an example image"><p>整个操作就完成了，可以愉快的玩耍了。很开心，是不是？</p><h3 id="三、填坑"><a href="#三、填坑" class="headerlink" title="三、填坑"></a>三、填坑</h3><h4 id="坑No-1-环境变量问题"><a href="#坑No-1-环境变量问题" class="headerlink" title="坑No.1 环境变量问题"></a>坑No.1 环境变量问题</h4><p>第二节中的安装方法是根据mainframer的github仓库Readme进行的尝试，事实上安装和配置完成后也不是那么一帆风顺，点击编译后的遇到一个找不到SDK位置问题：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* What went wrong:</span><br><span class="line">A problem occurred configuring project ':app'.</span><br><span class="line">&gt; SDK location not found. Define location with sdk.dir in the local.properties file or with an ANDROID_HOME environment variable.</span><br></pre></td></tr></tbody></table></figure><p>但是我在远程机器中添加了ANDROID_HOME变量，如下，但还是报错</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo $ANDROID_HOME</span><br><span class="line">/opt/android-sdk</span><br></pre></td></tr></tbody></table></figure><p>经过一轮搜索发现，原来mainframe使用的ssh登陆的shell是non-interactive的，在这种模式下，无法读取你定义在<code>~/.bashrc</code> <code>/etc/bashrc</code> <code>/etc/profile</code>等文件中的变量</p><p><strong>最终，有两种方法可以解决找不到环境变量的问题：</strong></p><p>第一种，配置~/.ssh/environment方法：</p><p>你需要通过下面方式，配置SDK的位置和JAVA的位置：</p><ol><li>首先，打开远程机器的SSHD配置文件，运行：<code>sudo vim /etc/ssh/sshd_config</code>.在打开的文件中查找这一行<code># PermitUserEnvironment no</code>，并将其改成<code>PermitUserEnvironment=yes</code></li><li>然后在~/.ssh目录下创建environment文件：<code>vim ~/.ssh/environment</code>，并将变量以key=value的形式写入，例如我的配置文件为：</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ANDROID_HOME=/home/calvinche/Android/Sdk</span><br><span class="line">JAVA_HOME=/home/calvinche/Android/jdk1.8.0_181/</span><br></pre></td></tr></tbody></table></figure><p>这样，本地机器通过ssh登陆后就能正确找到sdk和java的位置了。</p><p><strong>不过</strong>该方法不能像Shell一样用<code>path=path:/home/...</code>这种语法，所以只能访问到你配置的这几个有限的地址，很多命令还是没法使用。如果你的gradle脚本中使用了jar命令，那么还会提醒你找不到文件，所以<strong>建议使用下面的方法</strong>。</p><p>第二种，加载完整的远程环境变量：</p><p>在上一节的第3步中（3. 根据不通类型的代码配置开发环境（以Android为例）），在Parameters中运行的自定义命令前，加载一下远程机器的环境配置文件，命令如下：</p><p><code>source /etc/profile</code></p><p>例如我的配置为：</p><p><code>mainframer.sh "source /etc/profile &amp;&amp; bash ./gradlew :app:assembleLocal_Debug --stacktrace"</code></p><h4 id="坑No-2-Before-launch中总是自动添加Gradle-aware-Make"><a href="#坑No-2-Before-launch中总是自动添加Gradle-aware-Make" class="headerlink" title="坑No.2 Before launch中总是自动添加Gradle-aware Make"></a>坑No.2 Before launch中总是自动添加Gradle-aware Make</h4><p>遇到的第二个问题就是在Debug Configuration中的Before launch，我只是添加了自定义的一个external tool，但是经常发现Android Studio会自动给我加上<strong>Gradle-aware Make</strong>，导致每次远程编译结束又开始本地编辑一遍。</p><p>出现这个问题的原因是Android Studio发现before launch里没有Gradle-aware Make会以为软件出了问题，进而进行了自动修复，这个问题的解决办法就是修改Android Studio的配置文件，让它不要自动修复：</p><ul><li>打开Android Studio的选项卡Help，找到Edit Custom VM Options选项，打开后出现一个叫studio的文件</li><li>在文件的最后添加一行:-Dgradle.ide.gradle.run.configuration.fix.enabled=false</li></ul><p>用了一段时间了，暂时就发现这两个问题，❤️</p><h3 id="四、讨论"><a href="#四、讨论" class="headerlink" title="四、讨论"></a>四、讨论</h3><p>Mainframer很好的中和了我手中Mac笔记本的低配置和Windows台式机的不便携，将Mac的轻薄、便携和Windows的高配较好的结合起来。使我愉快的在使用小尺寸mac的同时，能得到最高的工作效率。但是这只是Mainframer的一个小领域应用，其实Mainframer可以用在更多实用的地方，比如使用集群作为远程机器，让大家可以连接进行远程编译等等。大家有什么想法，欢迎积极留言交流哈。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;一、故事背景（可略过）&quot;&gt;&lt;a href=&quot;#一、故事背景（可略过）&quot; class=&quot;headerlink&quot; title=&quot;一、故事背景（可略过）&quot;&gt;&lt;/a&gt;一、故事背景（可略过）&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;以前，世界上只有两种电脑：笔记本和台式机。&lt;/p&gt;
&lt;p&gt;上帝说，要有高性能的笔记本。于是，就有了MainFramer。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我就遇到了这种情况，上班后公司配的是MacBookPro的笔记本和一个Windows的台式机（PC），我曾尝试过使用MacBook作为主力机工作，MacOS的体验非常优秀，但是唯一的不足就是其在处理大型复杂任务时的速度远不如我那台高配的台式机，编译一次工程的时间差在3分钟左右，而我每天编译上20次就能差出一个小时，有这个时间提前让我下班多好。最重要的是，我只要一点击Build，整个机器就开始满负荷运行，除了温度飙升外，CPU也被占满，这时候开个网页都卡成了幻灯片。&lt;/p&gt;
&lt;p&gt;为了提高工作效率，我尝试一直用台式机工作，于是我的MBP吃灰了很久，这么优秀的笔记本放在那里吃灰实在是心疼。最关键的是，台式机让我完全没有&lt;strong&gt;工作流&lt;/strong&gt;的感觉，当我周末无聊想充电的时候，我发现我所有想看的东西都在公司，当我一个个软件打开，一个个网页从历史记录中找到后，我发现我已经没有了学习的欲望。这时候我非常想念用笔记本时那种“合盖走人”后，回家打开盖子发现我所有的思路都还在的感觉。&lt;/p&gt;
&lt;p&gt;于是我急切的找一种方法，让简单的任务在笔记本上来做，复杂的任务能够利用台式机完成，并且在体验上做到“无差别”。终于，我在浏览全球最大的同性社交网站时惊喜的发现了&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://github.com/gojuno/mainframer&quot;&gt;&lt;strong&gt;mainframer&lt;/strong&gt;&lt;/a&gt;，这是一个工具，可以将编译这件占内存和CPU的事从本地电脑放到远程电脑上来做。&lt;/p&gt;
&lt;p&gt;简单的说，你只需要一台本地机器（Local Machine：例如我的性能不咋地的MacBook）和一台远程机器（Remote Machine：性能强悍的台式机或者云主机），通过mainframer，就可以实现在本地机器上写代码，在远程机器上编译代码。你可以在笔记本上写代码，到了需要调试的时候，mainframer会快速同步代码到远程机器并进行编译，并将编译的结果返回到你的笔记本，这一切仿佛都是在你的笔记本上进行的，你可以正常的build和调试程序。这样一来，就可以享受笔记本的便捷，又能享受台式机的高性能了，美滋滋。&lt;/p&gt;
&lt;p&gt;下面就是我配置成功后，录制的在MacBookPro上写代码，在Linux发行版Manjaro上进行Build的视频：&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://www.bilibili.com/video/av63591281/&quot;&gt;传送门&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;video src=&quot;https://www.bilibili.com/ea30eaf0-ead5-4ad3-a44d-71bba3ca4dc0&quot; controls=&quot;controls&quot; style=&quot;max-width: 100%; display: block; margin-left: auto; margin-right: auto;&quot;&gt; your browser does not support the video tag &lt;/video&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="工具" scheme="https://chewenkai.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="日常总结" scheme="https://chewenkai.github.io/tags/%E6%97%A5%E5%B8%B8%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>VIM常用命令</title>
    <link href="https://chewenkai.github.io/%E6%97%A5%E5%B8%B8%E6%80%BB%E7%BB%93/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://chewenkai.github.io/%E6%97%A5%E5%B8%B8%E6%80%BB%E7%BB%93/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2018-03-30T04:13:20.000Z</published>
    <updated>2018-03-30T04:13:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>VIM在命令行环境中（比如操作VPS）非常实用，习惯之后对工作效率的提高大有裨益。但是剑一天不用，锈的也是很快的。前几天在终端中偶然发现了命令<code>vimtutor</code>，该教程非常巧妙简洁，整个教程操作一遍只需要半个小时左右，基本的操作就很熟悉了。现在将其小节汇总于下，方便记忆。</p><h3 id="浏览命令"><a href="#浏览命令" class="headerlink" title="浏览命令"></a>浏览命令</h3><ol><li><p>光标在屏幕文本中的移动既可以用箭头键，也可以使用 <code>hjkl</code> 字母键。<code>h (左移)       j (下行)       k (上行)     l (右移)</code></p></li><li><p>欲进入 Vim 编辑器(从命令行提示符)，请输入：vim 文件名 <code>&lt;回车&gt;</code></p></li><li><p>欲退出 Vim 编辑器，请输入 <code>&lt;ESC&gt;</code>   <code>:q!</code>   <code>&lt;回车&gt;</code> 放弃所有改动。或者输入 <code>&lt;ESC&gt;</code>   <code>:wq</code>   <code>&lt;回车&gt;</code> 保存改动。</p></li><li><p>在正常模式下删除光标所在位置的字符，请按： <code>x</code></p></li><li><p>欲插入或添加文本，请输入：<code>i   输入欲插入文本   &lt;ESC&gt;             在光标前插入文本</code><code>A   输入欲添加文本   &lt;ESC&gt;             在一行后添加文本</code></p></li></ol><p>特别提示：按下 <esc> 键会带您回到正常模式或者撤消一个不想输入或部分完整的命令。</esc></p><span id="more"></span><h3 id="删除和撤销"><a href="#删除和撤销" class="headerlink" title="删除和撤销"></a>删除和撤销</h3><ol><li><p>欲从当前光标删除至下一个单词，请输入：<code>dw</code></p></li><li><p>欲从当前光标删除至当前行末尾，请输入：<code>d$</code></p></li><li><p>欲删除整行，请输入：<code>dd</code></p></li><li><p>欲重复一个动作，请在它前面加上一个数字：<code>2w</code></p></li><li><p>在正常模式下修改命令的格式是：<code>operator</code>   <code>[number]</code>   <code>motion</code>其中：<code>operator</code> - 操作符，代表要做的事情，比如 d 代表删除<code>[number]</code> - 可以附加的数字，代表动作重复的次数<code>motion</code>   - 动作，代表在所操作的文本上的移动，例如 w 代表单词(word)，$ 代表行末等等。</p></li><li><p>欲移动光标到行首，请按数字0键：0</p></li><li><p>欲撤消以前的操作，请输入：<code>u</code> (小写的u)欲撤消在一行中所做的改动，请输入：<code>U</code> (大写的U)欲撤消以前的撤消命令，恢复以前的操作结果，请输入：<code>CTRL-R</code></p></li></ol><h3 id="更改类命令"><a href="#更改类命令" class="headerlink" title="更改类命令"></a>更改类命令</h3><ol><li><p>要重新置入已经删除的文本内容，请按小写字母 <code>p</code> 键。该操作可以将已删除的文本内容置于光标之后。如果最后一次删除的是一个整行，那么该行将置于当前光标所在行的下一行。</p></li><li><p>要替换光标所在位置的字符，请输入小写的 <code>r</code> 和要替换掉原位置字符的新字符即可。</p></li><li><p>更改类命令允许您改变从当前光标所在位置直到动作指示的位置中间的文本。比如输入 <code>ce</code> 可以替换当前光标到单词的末尾的内容；输入 <code>c$</code> 可以替换当前光标到行末的内容。</p></li><li><p>更改类命令的格式是：<code>c   [number]   motion</code></p></li></ol><h3 id="搜索、替换和跳转"><a href="#搜索、替换和跳转" class="headerlink" title="搜索、替换和跳转"></a>搜索、替换和跳转</h3><ol><li><p><code>CTRL-G</code> 用于显示当前光标所在位置和文件状态信息。<code>G</code> 用于将光标跳转至文件最后一行。先敲入一个行号然后输入大写 <code>G</code> 则是将光标移动至该行号代表的行。<code>gg</code> 用于将光标跳转至文件第一行。</p></li><li><p>输入 <code>/</code> 然后紧随一个字符串是在当前所编辑的文档中<strong>正向查找</strong>该字符串。输入 <code>?</code> 然后紧随一个字符串则是在当前所编辑的文档中<strong>反向查找</strong>该字符串。完成一次查找之后按 <code>n</code> 键是重复上一次的命令，可在<strong>同一方向</strong>上查找下一个匹配字符串所在；或者按大写 <code>N</code> 向<strong>相反方向</strong>查找下一匹配字符串所在。<code>CTRL-O</code> 带您跳转回较旧的位置，<code>CTRL-I</code> 则带您到较新的位置。</p></li><li><p>如果光标当前位置是括号(、)、[、]、{、}，按 <code>%</code> 会将光标移动到配对的括号上。</p></li><li><p>在一行内替换头一个字符串 old 为新的字符串 new，请输入  <code>:s/old/new</code>在一行内替换所有的字符串 old 为新的字符串 new，请输入  <code>:s/old/new/g</code>在两行内替换所有的字符串 old 为新的字符串 new，请输入  <code>:#,#s/old/new/g</code>在文件内替换所有的字符串 old 为新的字符串 new，请输入  <code>:%s/old/new/g</code>进行全文替换时询问用户确认每个替换需添加 c 标志        <code>:%s/old/new/gc</code></p></li></ol><h3 id="与外部的交互"><a href="#与外部的交互" class="headerlink" title="与外部的交互"></a>与外部的交互</h3><ol><li><code>:!command</code> 用于执行一个外部命令 command。请看一些实际例子：(MS-DOS)        |     (Unix)        | comment</li></ol><p>—————-|—————— |————-:!dir          |     :!ls          |  -  用于显示当前目录的内容。:!del FILENAME |     :!rm FILENAME |  -  用于删除名为 FILENAME 的文件。</p><ol><li><p><code>:w FILENAME</code>  可将当前 VIM 中正在编辑的文件保存到名为 FILENAME 的文件中。</p></li><li><p><code>v motion :w FILENAME</code> 可将当前编辑文件中可视模式下选中的内容保存到文件FILENAME 中。</p></li><li><p><code>:r FILENAME</code> 可提取磁盘文件 FILENAME 并将其插入到当前文件的光标位置后面。</p></li><li><p><code>:r !dir</code> 可以读取 dir 命令的输出并将其放置到当前文件的光标位置后面。</p></li></ol><h3 id="复制粘贴和插入"><a href="#复制粘贴和插入" class="headerlink" title="复制粘贴和插入"></a>复制粘贴和插入</h3><ol><li><p>输入小写的 <code>o</code> 可以在光标下方打开新的一行并进入插入模式。输入大写的 <code>O</code> 可以在光标上方打开新的一行。</p></li><li><p>输入小写的 <code>a</code> 可以在光标所在位置之后插入文本。输入大写的 <code>A</code> 可以在光标所在行的行末之后插入文本。</p></li><li><p><code>e</code> 命令可以使光标移动到单词末尾。</p></li><li><p>操作符 <code>y</code> 复制文本，<code>p</code> 粘贴先前复制的文本。</p></li><li><p>输入大写的 <code>R</code> 将进入替换模式(相当于按下<code>Insert</code>键)，直至按 <code>&lt;ESC&gt;</code> 键回到正常模式。</p></li><li><p>输入 <code>:set xxx</code> 可以设置 xxx 选项。一些有用的选项如下：‘ic’ ‘ignorecase’       查找时忽略字母大小写‘is’ ‘incsearch’        查找短语时显示部分匹配‘hls’ ‘hlsearch’        高亮显示所有的匹配短语选项名可以用完整版本，也可以用缩略版本。</p></li><li><p>在选项前加上 no 可以关闭选项：  :set noic</p></li></ol><h3 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h3><ol><li><p>输入 <code>:help</code> 或者按 <code>&lt;F1&gt;</code> 键或 <code>&lt;Help&gt;</code> 键可以打开帮助窗口。</p></li><li><p>输入 <code>:help cmd</code> 可以找到关于 cmd 命令的帮助。</p></li><li><p>输入 <code>CTRL-W</code> <code>CTRL-W</code>  可以使您在窗口之间跳转。</p></li><li><p>输入 <code>:q</code> 以关闭帮助窗口</p></li><li><p>您可以创建一个 vimrc 启动脚本文件用来保存您偏好的设置。</p></li><li><p>当输入 : 命令时，按 <code>CTRL-D</code> 可以查看可能的补全结果。按 <code>&lt;TAB&gt;</code> 可以使用一个补全。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;VIM在命令行环境中（比如操作VPS）非常实用，习惯之后对工作效率的提高大有裨益。但是剑一天不用，锈的也是很快的。前几天在终端中偶然发现了命令&lt;code&gt;vimtutor&lt;/code&gt;，该教程非常巧妙简洁，整个教程操作一遍只需要半个小时左右，基本的操作就很熟悉了。现在将其小节汇总于下，方便记忆。&lt;/p&gt;
&lt;h3 id=&quot;浏览命令&quot;&gt;&lt;a href=&quot;#浏览命令&quot; class=&quot;headerlink&quot; title=&quot;浏览命令&quot;&gt;&lt;/a&gt;浏览命令&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;光标在屏幕文本中的移动既可以用箭头键，也可以使用 &lt;code&gt;hjkl&lt;/code&gt; 字母键。
&lt;code&gt;h (左移)       j (下行)       k (上行)     l (右移)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;欲进入 Vim 编辑器(从命令行提示符)，请输入：vim 文件名 &lt;code&gt;&amp;lt;回车&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;欲退出 Vim 编辑器，请输入 &lt;code&gt;&amp;lt;ESC&amp;gt;&lt;/code&gt;   &lt;code&gt;:q!&lt;/code&gt;   &lt;code&gt;&amp;lt;回车&amp;gt;&lt;/code&gt; 放弃所有改动。
或者输入 &lt;code&gt;&amp;lt;ESC&amp;gt;&lt;/code&gt;   &lt;code&gt;:wq&lt;/code&gt;   &lt;code&gt;&amp;lt;回车&amp;gt;&lt;/code&gt; 保存改动。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在正常模式下删除光标所在位置的字符，请按： &lt;code&gt;x&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;欲插入或添加文本，请输入：
&lt;code&gt;i   输入欲插入文本   &amp;lt;ESC&amp;gt;             在光标前插入文本&lt;/code&gt;
&lt;code&gt;A   输入欲添加文本   &amp;lt;ESC&amp;gt;             在一行后添加文本&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;特别提示：按下 &lt;esc&gt; 键会带您回到正常模式或者撤消一个不想输入或部分完整
的命令。&lt;/esc&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="日常总结" scheme="https://chewenkai.github.io/categories/%E6%97%A5%E5%B8%B8%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="VIM" scheme="https://chewenkai.github.io/tags/VIM/"/>
    
  </entry>
  
  <entry>
    <title>Mac上双硬盘导致的盘符变化和权限问题引起的Vbox虚拟机启动失败</title>
    <link href="https://chewenkai.github.io/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/mac%E4%B8%8A%E5%8F%8C%E7%A1%AC%E7%9B%98%E5%AF%BC%E8%87%B4%E7%9A%84%E7%9B%98%E7%AC%A6%E5%8F%98%E5%8C%96%E5%92%8C%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98%E5%BC%95%E8%B5%B7%E7%9A%84vbox%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5/"/>
    <id>https://chewenkai.github.io/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/mac%E4%B8%8A%E5%8F%8C%E7%A1%AC%E7%9B%98%E5%AF%BC%E8%87%B4%E7%9A%84%E7%9B%98%E7%AC%A6%E5%8F%98%E5%8C%96%E5%92%8C%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98%E5%BC%95%E8%B5%B7%E7%9A%84vbox%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5/</id>
    <published>2018-03-05T12:53:57.000Z</published>
    <updated>2018-03-05T12:53:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在小米笔记本上安装了黑苹果，从Arch Linux上转到了MacOS High Sierra。说实话，虽然在操作上很多东西还不是很习惯，但是MacOS丰富的软件和漂亮的界面以及合理的逻辑非常讨人喜欢。</p><p>很快，我也遇到了一些问题，首先是经常用到的VirtualBox虚拟机启动物理硬盘上的Windows时遇到的问题：</p><ul><li><p>安装了双硬盘的笔记本在启动时设备符号是变化的，有时候是/dev/disk0，有时候则是/dev/disk1，导致保存的镜像文件（vmdk文件）需要重新生成。</p></li><li><p>Mac下只要重新挂载Windows分区所在的硬盘，权限也要重新授权。否则报错：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">VBoxManage: error: VMDK: could not open raw disk file '/dev/disk2'  </span><br><span class="line">VBoxManage: error: Error code VERR_RESOURCE_BUSY at /Users/vbox/tinderbox/4.3-mac-rel/src/VBox/Storage/VMDK.cpp(3390) in function int vmdkCreateRawImage(VMDKIMAGE*, VBOXHDDRAW*, uint64_t)</span><br><span class="line">VBoxManage: error: Cannot create the raw disk VMDK: VERR_RESOURCE_BUSY</span><br><span class="line">VBoxManage: error: The raw disk vmdk file was not created</span><br></pre></td></tr></tbody></table></figure></li></ul><span id="more"></span><p>索性写了一个简单的shell脚本，直接完成授权和生成vmdk文件的工作，顺便通过VBoxManager启动虚拟机。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> “开始更改虚拟机权限…”;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据diskutil list的输出，获取Windows所在磁盘的名称</span></span><br><span class="line">diskpos=<span class="string">"`diskutil list | grep 'Microsoft Basic Data Windows'`"</span>;</span><br><span class="line">length=<span class="variable">${#diskpos}</span>;</span><br><span class="line">disknumber=<span class="variable">${diskpos:`expr $length - 3`:1}</span>;</span><br><span class="line">disk_name=<span class="string">"disk<span class="variable">${disknumber}</span>"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载Windows所在磁盘</span></span><br><span class="line">diskutil umountDisk <span class="variable">$disk_name</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否卸载成功</span></span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"磁盘被占用，请关闭此磁盘打开的文件后重试"</span>;</span><br><span class="line">    <span class="built_in">exit</span>;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改权限</span></span><br><span class="line">sudo <span class="built_in">chown</span> <span class="variable">$USER</span> <span class="string">"/dev/<span class="variable">$disk_name</span>"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># END</span></span><br><span class="line">Echo <span class="string">"更改权限完成，开始启动虚拟机..."</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义VirtualBox中建立好的系统的名字</span></span><br><span class="line">sys_name=<span class="string">"Windows"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解除原来在SATA的PORT 0上的HDD媒体文件</span></span><br><span class="line">VBoxManage storageattach <span class="variable">$sys_name</span> --storagectl SATA --port 0 --<span class="built_in">type</span> hdd --medium none;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关联新的HDD媒体文件到SATA的PORT 0上</span></span><br><span class="line">VBoxManage storageattach <span class="variable">$sys_name</span> --storagectl SATA --port 0 --<span class="built_in">type</span> hdd --medium ~/VirtualBox\ VMs/disk<span class="variable">${disknumber}</span>.vmdk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动虚拟机</span></span><br><span class="line">VBoxManage startvm Windows</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><hr><h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><p>关于MAC下用VirtualBox启动Windows时报错“VERR_RESOURCE_BUSY”的问题 https://apple.stackexchange.com/questions/165153/how-do-i-install-mavericks-onto-external-hd-but-from-inside-virtualbox <a target="_blank" rel="noopener" href="https://apple.stackexchange.com/questions/165153/how-do-i-install-mavericks-onto-external-hd-but-from-inside-virtualbox">链接</a></p><p>VBoxManager的使用参考这里 https://www.shennongmin.org/?p=1993#comment-42 <a target="_blank" rel="noopener" href="https://www.shennongmin.org/?p=1993#comment-42">链接</a></p><p>VBoxManager官网文档 https://www.virtualbox.org/manual/ch08.html#vboxmanage-storageattach <a target="_blank" rel="noopener" href="https://www.virtualbox.org/manual/ch08.html#vboxmanage-storageattach">链接</a></p><p>macOS安装教程兼小米Pro安装过程记录 https://blog.daliansky.net/MacOS-installation-tutorial-XiaoMi-Pro-installation-process-records.html <a target="_blank" rel="noopener" href="https://blog.daliansky.net/MacOS-installation-tutorial-XiaoMi-Pro-installation-process-records.html">链接</a></p><p>小米笔记本Pro安装10.13随手记及EFI分享 https://blog.daliansky.net/XiaoMiPro-notebook-Installation-10.13-readily-remember-and-share-EFI.html <a target="_blank" rel="noopener" href="https://blog.daliansky.net/XiaoMiPro-notebook-Installation-10.13-readily-remember-and-share-EFI.html">链接</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在小米笔记本上安装了黑苹果，从Arch Linux上转到了MacOS High Sierra。说实话，虽然在操作上很多东西还不是很习惯，但是MacOS丰富的软件和漂亮的界面以及合理的逻辑非常讨人喜欢。&lt;/p&gt;
&lt;p&gt;很快，我也遇到了一些问题，首先是经常用到的VirtualBox虚拟机启动物理硬盘上的Windows时遇到的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;安装了双硬盘的笔记本在启动时设备符号是变化的，有时候是/dev/disk0，有时候则是/dev/disk1，导致保存的镜像文件（vmdk文件）需要重新生成。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mac下只要重新挂载Windows分区所在的硬盘，权限也要重新授权。否则报错：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;VBoxManage: error: VMDK: could not open raw disk file &#39;/dev/disk2&#39;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;VBoxManage: error: Error code VERR_RESOURCE_BUSY at /Users/vbox/tinderbox/4.3-mac-rel/src/VBox/Storage/VMDK.cpp(3390) in function int vmdkCreateRawImage(VMDKIMAGE*, VBOXHDDRAW*, uint64_t)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;VBoxManage: error: Cannot create the raw disk VMDK: VERR_RESOURCE_BUSY&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;VBoxManage: error: The raw disk vmdk file was not created&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="日常记录" scheme="https://chewenkai.github.io/categories/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="MacOS" scheme="https://chewenkai.github.io/tags/MacOS/"/>
    
    <category term="VirtualBox" scheme="https://chewenkai.github.io/tags/VirtualBox/"/>
    
  </entry>
  
  <entry>
    <title>Android面试相关知识点总结</title>
    <link href="https://chewenkai.github.io/%E6%97%A5%E5%B8%B8%E6%80%BB%E7%BB%93/android%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <id>https://chewenkai.github.io/%E6%97%A5%E5%B8%B8%E6%80%BB%E7%BB%93/android%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</id>
    <published>2018-01-24T08:51:01.000Z</published>
    <updated>2018-01-24T08:51:01.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android相关"><a href="#Android相关" class="headerlink" title="Android相关"></a>Android相关</h1><hr><h2 id="Activity和Fragment的生命周期"><a href="#Activity和Fragment的生命周期" class="headerlink" title="Activity和Fragment的生命周期"></a>Activity和Fragment的生命周期</h2><p><img src="http://bmob-cdn-3365.b0.upaiyun.com/2016/07/15/a47f448b4077cefe80571168e3f03eef.png"></p><h2 id="加速Activity启动"><a href="#加速Activity启动" class="headerlink" title="加速Activity启动"></a>加速Activity启动</h2><ul><li>精简onCreate中的代码</li><li>将耗时操作放到后台线程</li><li>优化布局文件（ Hierarchy Viewer， Layoutopt）</li><li>缓存ListView</li></ul><h2 id="Android多线程的几种方式"><a href="#Android多线程的几种方式" class="headerlink" title="Android多线程的几种方式"></a>Android多线程的几种方式</h2><ul><li>Handler.sendXXXMessage()</li><li>Handler.post(Runnable)</li><li>Activity.runOnUIThread(Runnable)</li><li>View.post(Runnable)</li><li>AsyncTask</li></ul><span id="more"></span><h2 id="布局的优化"><a href="#布局的优化" class="headerlink" title="布局的优化"></a>布局的优化</h2><ul><li>HierarchyViewer查看Layout层次</li><li>&lt;include&gt; 标签重用一些比较复杂的组件</li><li>&lt;merge&gt; 标签减少层次,避免嵌套过深的情况发生</li><li>使用ViewStub减少隐藏View的绘制</li></ul><h2 id="Android的几种缓存方法"><a href="#Android的几种缓存方法" class="headerlink" title="Android的几种缓存方法"></a>Android的几种缓存方法</h2><ul><li>内存缓存（使用LruCahe类，least recent used, 通过键值对的形式将对象储存在内存中，满了以后自动提出最不常用的对象）</li><li>磁盘缓存（使用DiskLurCache，数据库SQLite缓存，文件缓存）</li></ul><h2 id="Android-屏幕适配"><a href="#Android-屏幕适配" class="headerlink" title="Android 屏幕适配"></a>Android 屏幕适配</h2><h3 id="两个重要单位："><a href="#两个重要单位：" class="headerlink" title="两个重要单位："></a><em>两个重要单位：</em></h3><ul><li>密度无关像素(density-independent pixel, dp or dip):与终端上的实际物理像素点无关,可以保证在不同屏幕像素密度的设备上显示相同的效果。Android开发时用dp而不是px单位设置图片大小，是Android特有的单位。</li><li>独立比例像素(scale-independent pixel, sp or sip):Android开发时用此单位设置文字大小，可根据字体大小首选项进行缩放。<h3 id="屏幕适配要解决的问题："><a href="#屏幕适配要解决的问题：" class="headerlink" title="屏幕适配要解决的问题："></a><em>屏幕适配要解决的问题：</em></h3></li><li>使得“布局”、“控件”匹配不同的屏幕尺寸</li><li>使得“图片资源”匹配不同的屏幕密度一个图片归纳解决办法,转自<a target="_blank" rel="noopener" href="http://www.jianshu.com/p/ec5a1a30694b">这里</a>：<img src="http://upload-images.jianshu.io/upload_images/944365-ced9745859537daf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="归纳解决办法"></li></ul><h2 id="事件传递流程"><a href="#事件传递流程" class="headerlink" title="事件传递流程"></a>事件传递流程</h2><p>TODO</p><h2 id="自定义View"><a href="#自定义View" class="headerlink" title="自定义View"></a>自定义View</h2><ul><li>继承View，至少自定义两个构造函数</li><li>重写onMeasure方法：widthMeasureSpec中指定模式UNSPECIFIED，EXACTLY，AT_MOST，MATCH_PARENT对应EXACTLY、WRAP_CONTENT对应AT_MOST</li><li>重写onDraw：使用canvas和Paint类做图。</li><li>在res/values/styles.xml自定义属性</li></ul><h2 id="Android-OOM-处理"><a href="#Android-OOM-处理" class="headerlink" title="Android OOM 处理"></a>Android OOM 处理</h2><p><strong>原因：<a target="_blank" rel="noopener" href="http://hanhailong.com/2015/12/27/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8B%E5%B8%B8%E8%A7%81%E7%9A%84%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/">参考</a></strong></p><ul><li>单例造成的内存泄漏 (单例获取Activity的引用)</li><li>非静态内部类创建静态实例.(那为啥要用内部类？因为使用内部类能解决多继承问题)</li><li>Handler造成的内存泄漏(静态+弱引用+removeCallbacksAndMessages)</li><li>线程造成的内存泄漏</li><li>图片的处理（压缩加缓存，压缩使用BufferedImage类）</li><li>资源未关闭造成的内存泄漏(BraodcastReceiver，ContentObserver，File，Cursor，Stream，Bitmap)</li></ul><p><strong>发现：<a target="_blank" rel="noopener" href="https://segmentfault.com/a/1190000006884310">参考</a></strong></p><ul><li>反复操作观察内存变化</li><li>通过代码检测Activity泄漏</li><li>利用工具检测，如LeakCanary</li><li>adb shell dumpsys meminfo</li><li>通过Capture分析.hprof文件</li></ul><p><strong>处理：</strong></p><ul><li>图片处理优化</li><li>使用保守的Service （IntentSevice执行完任务后自动关闭）</li><li>当视图变为隐藏状态后释放内存</li><li>内存资源紧张时释放内存(onTrimMemory()回调方法)</li><li>使用优化后的数据容器(SparseArray)</li><li>知道内存的开销(类500字节, 实例12到16字节,char 16bits　byte 8bits short 16bits int 32bits　long 64bits float 32bits double 64bits)</li></ul><h2 id="性能的优化"><a href="#性能的优化" class="headerlink" title="性能的优化"></a>性能的优化</h2><p><strong>卡顿原因：</strong></p><ul><li>内存泄漏导致内存占用较高，导致JVM频繁触发GC</li><li>UI线程做耗时任务</li><li>UI OverDraw</li></ul><h2 id="进程-线程间通信：参考1-参考2"><a href="#进程-线程间通信：参考1-参考2" class="headerlink" title="进程/线程间通信：参考1  参考2"></a>进程/线程间通信：<a target="_blank" rel="noopener" href="https://my.oschina.net/u/248570/blog/53226">参考1</a> <a target="_blank" rel="noopener" href="http://www.jianshu.com/p/ac16f9702d68"> 参考2</a></h2><p>Linux上进程间通信: 套接口（Socket）, 管道（Pipe）,命名管道（named pipe）, 信号（Signal）, 信号量（semaphore）, 消息（Message）队列, 共享内存, 内存映射（mapped memory）Android的进程间通信大多基于Bindler，参见下面Binder机制。Android中线程间通信：共享变量（Sharepreferrence），使用管道流（Pipes），handle机制，runOnUiThread(Runnable)，View.postDelay(Runnable)，广播</p><h2 id="Handler机制"><a href="#Handler机制" class="headerlink" title="Handler机制"></a>Handler机制</h2><p>Handler，Looper，MessageQueue，Message，Messenger</p><h2 id="Binder机制"><a href="#Binder机制" class="headerlink" title="Binder机制"></a>Binder机制</h2><p>TODO</p><h2 id="Volley机制（参考这里）"><a href="#Volley机制（参考这里）" class="headerlink" title="Volley机制（参考这里）"></a>Volley机制（<a target="_blank" rel="noopener" href="http://huachao1001.github.io/article.html?MfvbNAAH">参考这里</a>）</h2><p>通过一个RequestQueue维护所有网络请求。具体是：1, RequestQueue的add函数接收到请求，判断其是否允许被缓存，如果不允许，则加入网络请求列队。2, 如果允许缓存，则判断等待列队中是否有相同地址的请求，如果有，就加入等待列队，等待列队在每完成一次请求后访问，移除等待列队中相同的请求，并讲剩余的请求加入缓存列队。3 如果没有相同的请求，则直接加入到缓存列队。缓存列队执行请求时先检查是否超时，如果超时则通过网络请求，如果未超时直接读取缓存。<img src="http://bmob-cdn-3365.b0.upaiyun.com/2016/07/23/7cd35e7d40a290e48068bf7cc187e203.png"></p><h2 id="GreenDao机制"><a href="#GreenDao机制" class="headerlink" title="GreenDao机制"></a>GreenDao机制</h2><h2 id="Picasso机制"><a href="#Picasso机制" class="headerlink" title="Picasso机制"></a>Picasso机制</h2><p>into会检查当前是否是在主线程上执行。如果我们没有提供一个图片资源并且有设置placeholder，那么就会把我们设置的placeholder显示出来，并中断执行。接下来就是创建了一个Request对象，我们在前面做得一些设置都会被封装到这个Request对象里面。检查我们要显示的图片是否可以直接在缓存中获取，如果有就直接显示出来好了。缓存没命中，那就只能费点事把源图片down下来了。这个过程是异步的，并且通过一个Action来完成请求前后的衔接工作。<img src="http://www.trinea.cn/wp-content/uploads/2015/10/overall-design-picasso.jpg?x24892"></p><h2 id="进程保活-参考这里"><a href="#进程保活-参考这里" class="headerlink" title="进程保活 (参考这里)"></a>进程保活 (<a target="_blank" rel="noopener" href="https://segmentfault.com/a/1190000006251859">参考这里</a>)</h2><p>进程等级：</p><ul><li>前台进程 (Foreground process)</li><li>可见进程 (Visible process)</li><li>服务进程 (Service process)</li><li>后台进程 (Background process)</li><li>空进程 (Empty process)</li></ul><p>进程保活方法：</p><ul><li>提供进程优先级，降低进程被杀死的概率<ul><li>利用 Activity 提升权限</li><li>利用 Notification 提升权限(startForeground)</li></ul></li><li>在进程被杀死后，进行拉活<ul><li>利用系统广播拉活</li><li>利用第三方应用广播拉活</li><li>利用系统Service机制拉活(onStartCommand()中返回Service.START_STICKY)</li><li>利用Native进程拉活(利用 Linux 中的 fork 机制创建 Native 进程，在 Native 进程中监控主进程的存活，当主进程挂掉后，在 Native 进程中立即对主进程进行拉活)</li><li>利用账号同步机制拉活</li></ul></li></ul><h2 id="四种启动模式"><a href="#四种启动模式" class="headerlink" title="四种启动模式"></a>四种启动模式</h2><p><strong>android:launchMode=:</strong>standard(默认)、singleTop、singleTask、singleInstance</p><p><strong>FLAG:</strong></p><ul><li><strong>FLAG_ACTIVITY_NEW_TASK：</strong> 与singleTask相同。</li><li><strong>FLAG_ACTIVITY_SINGLE_TOP：</strong> 与singleTop相同。</li><li><strong>FLAG_ACTIVITY_CLEAR_TOP：</strong> 清空目标Activity上层所有Activity。如果未设置launchMode（即默认），会清空包括当前Activity及其上面的activites，然后重新创建目标Activity。</li><li><strong>FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS：</strong> 具有这个标记的Activity不会出现在任务管理器的列表中，它等同于在XML中指定Activity的属性：android:excudeFromRecents=”true”</li></ul><h2 id="三种动画"><a href="#三种动画" class="headerlink" title="三种动画"></a>三种动画</h2><ul><li>帧动画 FrameAnimation:通过顺序的播放排列好的图片来实现</li><li>补间动画 TweenAnimation: 给出两个关键帧，在给定的时间内在两个关键帧间渐变(Alpha、Scale、Translate和Rotate)。</li><li>属性动画 Property Animation:插值器根据时间流逝计算当前属性值改变百分比以不断改变属性值。</li></ul><h2 id="Android长连接"><a href="#Android长连接" class="headerlink" title="Android长连接"></a>Android长连接</h2><ul><li>客户端不断的查询服务器，检索新内容，也就是所谓的pull 或者轮询方式　</li><li>客户端和服务器之间维持一个TCP/IP长连接，服务器向客户端push　</li><li>SMS的推送方式:服务器有新内容时，发送一条短信给客户端，客户端收到后从服务器中下载新内容</li></ul><h2 id="MVC和MVP模式-参考"><a href="#MVC和MVP模式-参考" class="headerlink" title="MVC和MVP模式 (参考)"></a>MVC和MVP模式 (<a target="_blank" rel="noopener" href="https://www.tianmaying.com/tutorial/AndroidMVC">参考</a>)</h2><p>*</p><h2 id="Looper中的死循环"><a href="#Looper中的死循环" class="headerlink" title="Looper中的死循环"></a>Looper中的死循环</h2><h2 id="TODO"><a href="#TODO" class="headerlink" title="// TODO"></a>// TODO</h2><h1 id="Java相关"><a href="#Java相关" class="headerlink" title="Java相关"></a>Java相关</h1><hr><h2 id="1-Java并发，线程相关"><a href="#1-Java并发，线程相关" class="headerlink" title="1. Java并发，线程相关"></a>1. Java并发，线程相关</h2><h3 id="什么是线程："><a href="#什么是线程：" class="headerlink" title="什么是线程："></a><em>什么是线程：</em></h3><ul><li>线程是一种轻量级进程，大多数情况下用于执行异步操作。</li><li>在一个Android 程序开始运行的时候，会单独启动一个进程，同时会产生一个UIThread线程（main线程）。</li><li>一个Android 程序默认情况下也只有一个进程，但一个进程下却可以有许多个线程。</li><li>默认的情况下，Service和Activity（还有Content Provider和Broadcast Receiver）会同时运行在进程的main线程中，是会相互阻塞的。<h3 id="线程和进程的区别："><a href="#线程和进程的区别：" class="headerlink" title="线程和进程的区别："></a><em>线程和进程的区别：</em></h3></li><li>地址空间:进程有自己独立的地址空间.进程至少有一个线程,进程内的所有线程共享进程的地址空间;</li><li>资源拥有:进程是资源分配和拥有的单位,同一个进程内的线程共享进程的资源;</li><li>线程是处理器调度的基本单位,但进程不是.</li><li>线程只需要很少的资源就可“轻装上阵”运行的优点，来弥补进程并发的“颗粒度”粗糙的缺点，提高系统资源利用率。<h3 id="volatile和Synchronized区别"><a href="#volatile和Synchronized区别" class="headerlink" title="volatile和Synchronized区别:"></a><em>volatile和Synchronized区别:</em></h3></li><li><strong>volatile:</strong>  它所修饰的变量不保留拷贝，直接访问主内存中的(保证可见性)。</li><li><strong>synchronized:</strong> 保证在同一时刻最多只有一个线程执行该段代码(保证原子性)。</li></ul><h3 id="ReetrankLock与synchronized比较参考"><a href="#ReetrankLock与synchronized比较参考" class="headerlink" title="ReetrankLock与synchronized比较参考"></a><em>ReetrankLock与synchronized比较</em><a target="_blank" rel="noopener" href="http://blog.csdn.net/ns_code/article/details/17487337">参考</a></h3><ul><li>synchronized阻塞同步，挂起线程和恢复线程的操作消耗性能大，ReentrendLock非阻塞同步,消耗小</li><li>ReentrendLock等待可中断，可实现公平锁，锁可以绑定多个条件。</li></ul><h3 id="原子性与可见性-参考这里"><a href="#原子性与可见性-参考这里" class="headerlink" title="原子性与可见性:(参考这里)"></a><em>原子性与可见性:</em>(<a target="_blank" rel="noopener" href="https://my.oschina.net/wangnian/blog/668490">参考这里</a>)</h3><ul><li><strong>原子性：</strong> 即一个操作或者多个操作 要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。</li><li><strong>可见性:</strong> 是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。</li></ul><h3 id="Callable-和-Runnable-的区别"><a href="#Callable-和-Runnable-的区别" class="headerlink" title="Callable 和 Runnable 的区别:"></a><em>Callable 和 Runnable 的区别:</em></h3><ul><li>Runnable的run()没有返回值,Callable的call()有返回值,这个返回值具体是通过实现Future接口的对象的get方法获取的，这个方法是会造成线程阻塞的.</li><li>Callable里面的call方法是可以抛出异常的，我们可以捕获异常进行处理</li></ul><h3 id="线程池的概念、好处、常见的线程池举例"><a href="#线程池的概念、好处、常见的线程池举例" class="headerlink" title="线程池的概念、好处、常见的线程池举例:"></a><em>线程池的概念、好处、常见的线程池举例:</em></h3><ul><li><p>线程池的好处：</p><ol><li>重用线程池中的线程，避免因为线程的创建和销毁所带来的性能开销。</li><li>有效控制线程池的最大并发数，避免大量的线程之间因互相抢占系统资源而导致的阻塞线程。</li><li>能对线程进行简单的管理，并提供定时执行以及指定间隔循环执行等功能。Android中线程池源自Java的Executor接口。真正的线程池实现为ThreadPoolExecutor。ThreadPoolExecutor它的构造方法提供了一系列参数来配置线程池。corePoolSize：线程池核心线程数量maximumPoolSize：线程池所能容纳的最大线程。keepAliveTime：非核心线程的闲置超长时间，超过这个时间，非核心线程就会被回收。unit：用于指定keepAliveTime参数的时间单位。workQueue：线程池中的任务队列threadFactory：线程工厂，为线程池提供创建新线程的功能。</li></ol></li><li><p>线程池的分类</p><ol><li><strong>FixedThreadPool</strong>Executors.newFixedThreadPool方法创建。他是一种固定线程数量的线程池，只有核心线程。这些线程不会被回收。除非线程池被关闭。</li><li><strong>CachedThreadPool</strong>Executors.newCachedThreadPool方法创建,它一种线程数量不固定的线程池。它只有非核心线程。并且它的线程都有超时机制，超过60秒闲置线程就会被回收。</li><li><strong>ScheduledThreadPool</strong>Executors.newScheduledThreadPool方法创建，它的核心数量是固定的，而非核心数量没有限制。当非核心线程闲置是会立刻回收。</li><li><strong>SingleThreadExecutor</strong>Executors.newSingleThreadExecutor方法创建，它只要一个核心线程，能确保所有任务都在一个线程中按顺序执行。它的意义在于统一所有的外界任务到一个线程中。是这些线程任务之间不需要处理线程同步的问题。</li></ol></li></ul><h3 id="请解释sleep-和wait-区别？"><a href="#请解释sleep-和wait-区别？" class="headerlink" title="请解释sleep()和wait()区别？"></a><em>请解释sleep()和wait()区别？</em></h3><ul><li>sleep()是Thread类的定义方法，wait()是Object类定义的方法;</li><li>sleep()可以设置休眠时间，时间一到自动唤醒，而wait()需要等待notify()进行唤醒</li><li>sleep()方法正在执行的线程主动让出CPU（然后CPU就可以去执行其他任务），在sleep指定时间后CPU再回到该线程继续往下执行(注意：sleep方法只让出了CPU，而并不会释放同步资源锁！！！)；</li><li>wait()方法则是指当前线程让自己暂时退让出同步资源锁，以便其他正在等待该资源的线程得到该资源进而运行，只有调用了notify()方法，之前调用wait()的线程才会解除wait状态，可以去参与竞争同步资源锁，进而得到执行。（注意：notify的作用相当于叫醒睡着的人，而并不会给他分配任务，就是说notify只是让之前调用wait的线程有权利重新参与线程的调度</li></ul><h2 id="2-JVM内存空间分区（参考这里）"><a href="#2-JVM内存空间分区（参考这里）" class="headerlink" title="2. JVM内存空间分区（参考这里）"></a>2. JVM内存空间分区（<a target="_blank" rel="noopener" href="http://blog.csdn.net/a910626/article/details/52318590">参考这里</a>）</h2><ul><li><strong>程序计数器(Program Counter Register):</strong> 程序计数器是当前线程所执行字节码的行号指示器</li><li><strong>JVM栈(VM Stack):</strong> JVM栈用于存放正在执行的方法，每有一个函数被调用，就会创建一个栈帧压入JVM栈，方法执行完成后，将其栈帧从JVM栈中弹出。所谓的栈帧，就是存放当前方法中的存储局部变量、操作数栈、动态链接、方法出口等信息的一个东西。</li><li><strong>本地方法栈(Native Method Stack):</strong> 本地方法栈与虚拟机栈所发挥的作用是类似的，其区别不过是本地方法栈则是为虚拟机使用到的native方法服务。</li><li><strong>堆(Heap):</strong> java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的是存放对象实例，几乎所有的对象实例都在这里分配内存。</li><li><strong>方法区(Method Area):</strong> 是各个线程共享的内存区域，它用于存放已经被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</li></ul><h2 id="3-GC算法（参考这里）"><a href="#3-GC算法（参考这里）" class="headerlink" title="3. GC算法（参考这里）"></a>3. GC算法（<a target="_blank" rel="noopener" href="http://www.cnblogs.com/smyhvae/p/4744233.html">参考这里</a>）</h2><p>内存回收针对的是内存空间分区中的 <strong>堆</strong> 和 <strong>方法区</strong> 。内存区域中的 <strong>程序计数器、虚拟机栈、本地方法栈</strong> 这3个区域随着线程而生，线程而灭，方法结束或者线程结束时，内存自然就跟着回收了，因此在这几个区域不需要过多考虑回收的问题。</p><ul><li><strong>引用计数算法：</strong> 老牌垃圾回收算法。无法处理循环引用，没有被Java采纳.</li><li><strong>根搜索算法:</strong>  在根搜索算法的基础上，现代虚拟机的实现当中，垃圾搜集的算法主要有三种，分别是标记-清除算法、复制算法、标记-整理算法。这三种算法都扩充了根搜索算法.</li><li><strong>标记-清除算法：</strong>  通过根节点，标记所有从根节点开始的可达对象。在清除阶段，清除所有未被标记的对象。(缺点：1 效率比较低 2 清理出来的空闲内存不连续)</li><li><strong>复制算法：</strong> 从根节点，将可达对象复制到新的内存空间中，然后清除原来的内存空间。（清理后的空间是连续的，但是此方法需要较大的内存空间）</li><li><strong>标记-压缩算法：</strong> 标记步骤同标记-清除法，压缩是指移动所有存活的对象，且按照内存地址次序依次排列。最后将排列后末端内存地址以后的内存全部回收。（效率也不高）</li></ul><h2 id="4-Java中的强引用、软引用、弱引用和虚引用"><a href="#4-Java中的强引用、软引用、弱引用和虚引用" class="headerlink" title="4.  Java中的强引用、软引用、弱引用和虚引用"></a>4.  Java中的强引用、软引用、弱引用和虚引用</h2><ul><li><strong>目的：</strong> 对象的生命周期，以及利于 JVM 的垃圾回收</li><li><strong>强引用：</strong> 如果一个对象具有强引用，它就不会被垃圾回收器回收。</li><li><strong>软引用：</strong> 如果一个对象（如 s）只具有软引用，则内存空间足够，垃圾回收器就不会回收它；如果内存空间不足了，就会回收这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。软引用可用来实现内存敏感的高速缓存。</li><li><strong>弱引用：</strong> 弱引用与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。</li><li><strong>虚引用：</strong> 虚引用”顾名思义，就是形同虚设，与其他几种引用都不同，虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。 虚引用主要用来跟踪对象被垃圾回收器回收的活动。</li></ul><h2 id="5-JAVA的多态-百度作业帮面试，融360面试"><a href="#5-JAVA的多态-百度作业帮面试，融360面试" class="headerlink" title="5. JAVA的多态(百度作业帮面试，融360面试)"></a>5. JAVA的多态(百度作业帮面试，融360面试)</h2><h3 id="什么是多态"><a href="#什么是多态" class="headerlink" title="什么是多态"></a>什么是多态</h3><ul><li>面向对象的三大特性：封装、继承、多态。从一定角度来看，封装和继承几乎都是为多态而准备的。这是我们最后一个概念，也是最重要的知识点。</li><li>多态的定义：指允许不同类的对象对同一消息做出响应。即同一消息可以根据发送对象的不同而采用多种不同的行为方式。（发送消息就是函数调用）</li><li>实现多态的技术称为：动态绑定（dynamic binding），是指在执行期间判断所引用对象的实际类型，根据其实际的类型调用其相应的方法。</li><li>多态的作用：消除类型之间的耦合关系。</li></ul><p>现实中，关于多态的例子不胜枚举。比方说按下 F1 键这个动作，如果当前在 Flash 界面下弹出的就是 AS 3 的帮助文档；如果当前在 Word 下弹出的就是 Word 帮助；在 Windows 下弹出的就是 Windows 帮助和支持。同一个事件发生在不同的对象上会产生不同的结果。</p><h3 id="多态存在的三个必要条件"><a href="#多态存在的三个必要条件" class="headerlink" title="多态存在的三个必要条件"></a>多态存在的三个必要条件</h3><ul><li>一、要有继承；</li><li>二、要有重写；</li><li>三、父类引用指向子类对象。</li></ul><h3 id="多态的好处："><a href="#多态的好处：" class="headerlink" title="多态的好处："></a>多态的好处：</h3><ul><li>1.可替换性（substitutability）。多态对已存在代码具有可替换性。例如，多态对圆Circle类工作，对其他任何圆形几何体，如圆环，也同样工作。</li><li>2.可扩充性（extensibility）。多态对代码具有可扩充性。增加新的子类不影响已存在类的多态性、继承性，以及其他特性的运行和操作。实际上新加子类更容易获得多态功能。例如，在实现了圆锥、半圆锥以及半球体的多态基础上，很容易增添球体类的多态性。</li><li>3.接口性（interface-ability）。多态是超类通过方法签名，向子类提供了一个共同接口，由子类来完善或者覆盖它而实现的。如图8.3 所示。图中超类Shape规定了两个实现多态的接口方法，computeArea()以及computeVolume()。子类，如Circle和Sphere为了实现多态，完善或者覆盖这两个接口方法。</li><li>4.灵活性（flexibility）。它在应用中体现了灵活多样的操作，提高了使用效率。</li><li>5.简化性（simplicity）。多态简化对应用软件的代码编写和修改过程，尤其在处理大量对象的运算和操作时，这个特点尤为突出和重要。</li></ul><h3 id="Java中多态的实现方式："><a href="#Java中多态的实现方式：" class="headerlink" title="Java中多态的实现方式："></a>Java中多态的实现方式：</h3><p><strong>接口实现，继承父类进行方法重写，同一个类中进行方法重载。</strong></p><h2 id="6-static"><a href="#6-static" class="headerlink" title="6.static"></a>6.static</h2><h3 id="静态内部类与非静态内部类区别"><a href="#静态内部类与非静态内部类区别" class="headerlink" title="静态内部类与非静态内部类区别"></a>静态内部类与非静态内部类区别</h3><ul><li>静态内部类不需要有指向外部类的引用，但非静态内部类需要持有对外部类的引用</li><li>非静态内部类能够访问外部类的静态和非静态成员，静态类不能访问外部类的非静态成员，它只能访问外部类的静态成员</li><li>一个非静态内部类不能脱离外部类实体被创建,而静态内部类不需要外部类的对象就可创建。</li></ul><h2 id="7-Java中的修饰符"><a href="#7-Java中的修饰符" class="headerlink" title="7.Java中的修饰符"></a>7.Java中的修饰符</h2><h3 id="访问修饰符（参考）"><a href="#访问修饰符（参考）" class="headerlink" title="访问修饰符（参考）"></a>访问修饰符（<a target="_blank" rel="noopener" href="http://henry-cong.iteye.com/blog/1140277">参考</a>）</h3><p><strong>public：</strong> Java语言中访问限制最宽的修饰符，一般称之为“公共的”。被其修饰的类、属性以及方法不　　　　　仅可以跨类访问，而且允许跨包（package）访问。<strong>private:</strong> Java语言中对访问权限限制的最窄的修饰符，一般称之为“私有的”。被其修饰的类、属性以　　　　　及方法只能被该类的对象访问，其子类不能访问，更不能允许跨包访问。<strong>protect:</strong> 介于public 和 private 之间的一种访问修饰符，一般称之为“保护形”。被其修饰的类、　　　　　属性以及方法只能被类本身的方法及子类访问，即使子类在不同的包中也可以访问。<strong>default:</strong> 即不加任何访问修饰符，通常称为“默认访问模式“。该模式下，只允许在同一个包中进行访　　　　　问。</p><h2 id="8-类的加载机制-参考"><a href="#8-类的加载机制-参考" class="headerlink" title="8.类的加载机制 (参考)"></a>8.类的加载机制 (<a target="_blank" rel="noopener" href="http://www.jianshu.com/p/061274672c44">参考</a>)</h2><p><strong>双亲委派模型：</strong> 如果一个类加载器收到类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器完成。每个类加载器都是如此，只有当父加载器在自己的搜索范围内找不到指定的类时（即ClassNotFoundException），子加载器才会尝试自己去加载。</p><p><strong>自上而下的加载器顺序：</strong> Bootstrap ClassLoader(启动类加载器)，Extension ClassLoader(扩展类加载器)，Applicaiton ClassLoader(应用程序类加载器)，User ClassLoader（用户自己实现的加载器）<img src="http://upload-images.jianshu.io/upload_images/689802-bc4898e54c6ee6fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><h1 id="9-Java的注解原理"><a href="#9-Java的注解原理" class="headerlink" title="9. Java的注解原理"></a>9. Java的注解原理</h1><p>// TODO</p><h1 id="10-Java集合框架图"><a href="#10-Java集合框架图" class="headerlink" title="10. Java集合框架图"></a>10. Java集合框架图</h1><p><img src="https://uploadfiles.nowcoder.com/images/20160801/740942_1470042423855_86F5A9F9F791DD7EA7C96F158F0FEA87"></p><hr><h1 id="网络相关"><a href="#网络相关" class="headerlink" title="网络相关"></a>网络相关</h1><hr><h2 id="http协议-参考这里"><a href="#http协议-参考这里" class="headerlink" title="http协议(参考这里)"></a>http协议(<a target="_blank" rel="noopener" href="http://www.blogjava.net/zjusuyong/articles/304788.html">参考这里</a>)</h2><h3 id="什么是http协议"><a href="#什么是http协议" class="headerlink" title="什么是http协议"></a>什么是http协议</h3><p>http协议是超文本传输协议，是一种基于请求与相应模式的、无状态的、应用层协议，常基于TCP的连接方式。</p><h3 id="http协议特点"><a href="#http协议特点" class="headerlink" title="http协议特点"></a>http协议特点</h3><p>http协议主要有以下五个特点：</p><ul><li>支持客户/服务器模式</li><li>简单快速：客户想服务器请求服务时，只需要传递方法和路径，请求方法常用的有GET、HEAD、POST。由于HTTP协议简单，使得HTTP服务器程序规模小，因而通信速度快。</li><li>灵活：HTTP允许传输任意类型数据对象。正在传输的类型由Content-Type加以标记。</li><li>无连接：无连接含义是限制在每次连接只处理一个请求。服务器处理完客户请求，并收到客户应答后，即断开连接。</li><li>无状态：HTTP协议是无状态协议。协议对于事务没有记忆能力，缺少状态以为着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大，另一方面，在服务器不需要先前信息时应答会较快。<h3 id="http请求消息"><a href="#http请求消息" class="headerlink" title="http请求消息"></a>http请求消息</h3>请求消息包括：请求行、消息报头、请求正文组成。</li></ul><p><img src="https://i.imgur.com/TZGiZid.jpg"></p><p><strong>请求方法</strong>包括：</p><ul><li>GET     请求获取Request-URI所标识的资源</li><li>POST    在Request-URI所标识的资源后附加新的数据</li><li>HEAD    请求获取由Request-URI所标识的资源的响应消息报头</li><li>PUT     请求服务器存储一个资源，并用Request-URI作为其标识</li><li>DELETE  请求服务器删除Request-URI所标识的资源</li><li>TRACE   请求服务器回送收到的请求信息，主要用于测试或诊断</li><li>CONNECT 保留将来使用</li><li>OPTIONS 请求查询服务器的性能，或者查询与资源相关的选项和需求<h3 id="http响应消息"><a href="#http响应消息" class="headerlink" title="http响应消息"></a>http响应消息</h3>HTTP响应也是由三个部分组成，分别是：状态行、消息报头、响应正文。</li></ul><p><img src="https://i.imgur.com/TA4ZTPa.png"></p><p>状态行：状态行由 HTTP 协议版本字段、状态码和状态码的描述文本 3 个部分组成，他们之间使用空格隔开;</p><h3 id="http请求-相应步骤"><a href="#http请求-相应步骤" class="headerlink" title="http请求/相应步骤"></a>http请求/相应步骤</h3><p><strong>以下是 HTTP 请求/响应的步骤：</strong></p><p>　　● 客户端连接到web服务器：HTTP 客户端与web服务器建立一个 TCP 连接;</p><p>　　● 客户端向服务器发起 HTTP 请求：通过已建立的TCP 连接，客户端向服务器发送一个请求报文;</p><p>　　● 服务器接收 HTTP 请求并返回 HTTP 响应：服务器解析请求，定位请求资源，服务器将资源副本写到 TCP 连接，由客户端读取;</p><p>　　● 释放 TCP 连接：若connection 模式为close，则服务器主动关闭TCP 连接，客户端被动关闭连接，释放TCP 连接;若connection 模式为keepalive，则该连接会保持一段时间，在该时间内可以继续接收请求;</p><p>　　● 客户端浏览器解析HTML内容：客户端将服务器响应的 html 文本解析并显示;</p><p><strong>在浏览器地址栏键入URL，按下回车之后会经历以下流程：</strong></p><p>　　1、浏览器向 DNS 服务器请求解析该 URL 中的域名所对应的 IP 地址;</p><p>　　2、解析出 IP 地址后，根据该 IP 地址和默认端口 80，和服务器建立 TCP 连接;</p><p>　　3、浏览器发出读取文件(URL 中域名后面部分对应的文件)的HTTP 请求，该请求报文作为 TCP 三次握手的第三个报文的数据发送给服务器;</p><p>　　4、服务器对浏览器请求作出响应，并把对应的 html 文本发送给浏览器;</p><p>　　5、释放 TCP 连接;</p><p>　　6、浏览器将该 html 文本并显示内容;</p><h3 id="http协议状态码"><a href="#http协议状态码" class="headerlink" title="http协议状态码"></a>http协议状态码</h3><p>状态码由三位数字组成，第一位数字表示响应的类型，常用的状态码有五大类如下所示：</p><p>　　1xx：表示服务器已接收了客户端请求，客户端可继续发送请求;</p><p>　　2xx：表示服务器已成功接收到请求并进行处理;</p><p>　　3xx：表示服务器要求客户端重定向;</p><p>　　4xx：表示客户端的请求有非法内容;</p><p>　　5xx：表示服务器未能正常处理客户端的请求而出现意外错误;</p><p>常见状态码描述文本有如下取值：</p><p>　　200 OK：表示客户端请求成功;</p><p>　　400 Bad Request：表示客户端请求有语法错误，不能被服务器所理解;</p><p>　　401 Unauthonzed：表示请求未经授权，该状态代码必须与 WWW-Authenticate 报头域一起使用;</p><p>　　403 Forbidden：表示服务器收到请求，但是拒绝提供服务，通常会在响应正文中给出不提供服务的原因;</p><p>　　404 Not Found：请求的资源不存在，例如，输入了错误的URL;</p><p>　　500 Internal Server Error：表示服务器发生不可预期的错误，导致无法完成客户端的请求;</p><p>　　503 Service Unavailable：表示服务器当前不能够处理客户端的请求，在一段时间之后，服务器可能会恢复正常;</p><h3 id="Get与Post区别"><a href="#Get与Post区别" class="headerlink" title="Get与Post区别"></a>Get与Post区别</h3><p><strong>1.提交</strong></p><ul><li>GET提交，请求的数据会附在URL之后（就是把数据放置在HTTP协议头中），以?分割URL和传输数据，多个参数用&amp;连接；</li><li>POST提交：把提交的数据放置在是HTTP包的包体中。</li></ul><blockquote><p>因此，GET提交的数据会在地址栏中显示出来，而POST提交，地址栏不会改变</p></blockquote><p><strong>2.传输数据的大小</strong>：首先声明：HTTP协议没有对传输的数据大小进行限制，HTTP协议规范也没有对URL长度进行限制。</p><p>而在实际开发中存在的限制主要有：</p><ul><li>GET:特定浏览器和服务器对URL长度有限制，例如 IE对URL长度的限制是2083字节(2K+35)。对于其他浏览器，如Netscape、FireFox等，理论上没有长度限制，其限制取决于操作系 统的支持。</li></ul><blockquote><p>因此对于GET提交时，传输数据就会受到URL长度的 限制。</p></blockquote><ul><li>POST:由于不是通过URL传值，理论上数据不受 限。但实际各个WEB服务器会规定对post提交数据大小进行限制，Apache、IIS6都有各自的配置。</li></ul><p><strong>3.安全性</strong></p><p>　　POST的安全性要比GET的安全性高。比如：通过GET提交数据，用户名和密码将明文出现在URL上，因为:</p><ul><li>登录页面有可能被浏览器缓存；</li><li>其他人查看浏览器的历史纪录，那么别人就可以拿到你的账号和密码了.</li><li>使用GET提交数据还可能会造成Cross-site request forgery攻击</li></ul><p><strong>4.Http get,post,soap协议都是在http上运行的</strong></p><ul><li><p>get：请求参数是作为一个key/value对的序列（查询字符串）附加到URL上的查询字符串的长度受到web浏览器和web服务器的限制（如IE最多支持2048个字符），不适合传输大型数据集同时，它很不安全</p></li><li><p>post：请求参数是在http标题的一个不同部分（名为entity body）传输的，这一部分用来传输表单信息，因此必须将Content-type设置为:application/x-www-form- urlencoded。post设计用来支持web窗体上的用户字段，其参数也是作为key/value对传输。但是：它不支持复杂数据类型，因为post没有定义传输数据结构的语义和规则。</p></li><li><p>soap：是http post的一个专用版本，遵循一种特殊的xml消息格式Content-type设置为: text/xml 任何数据都可以xml化。</p></li></ul><p>###http协议与https协议区别</p><ul><li>https协议需要到ca申请证书，一般免费证书很少，需要交费。</li><li>http是超文本传输协议，信息是明文传输，https 则是具有安全性的ssl加密传输协议。</li><li>http和https使用的是完全不同的连接方式用的端口也不一样,前者是80,后者是443。</li><li>http的连接很简单,是无状态的。</li><li>HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议 要比http协议安全。</li></ul><h2 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h2><p>TCP协议报头：</p><p><img src="http://upload-images.jianshu.io/upload_images/2964446-ab077ff3902529a3.jpg?imageMogr2/auto-orient/strip"></p><p>###URG ACK PSH RST SYN FIN字段作用</p><ul><li><p>URG：紧急标志。紧急标志为”1”表明该位有效。</p></li><li><p>ACK：确认标志。表明确认编号栏有效。大多数情况下该标志位是置位的。TCP报头内的确认编号栏内包含的确认编号（w+1）为下一个预期的序列编号，同时提示远端系统已经成功接收所有数据。</p></li><li><p>PSH：推标志。该标志置位时，接收端不将该数据进行队列处理，而是尽可能快地将数据转由应用处理。在处理Telnet或rlogin等交互模式的连接时，该标志总是置位的。</p></li><li><p>RST：复位标志。用于复位相应的TCP连接。</p></li><li><p>SYN：同步标志。表明同步序列编号栏有效。该标志仅在三次握手建立TCP连接时有效。它提示TCP连接的服务端检查序列编号，该序列编号为TCP连接初始端（一般是客户端）的初始序列编号。在这里，可以把TCP序列编号看作是一个范围从0到4，294，967，295的32位计数器。通过TCP连接交换的数据中每一个字节都经过序列编号。在TCP报头中的序列编号栏包括了TCP分段中第一个字节的序列编号。</p></li><li><p>FIN：结束标志。</p><h3 id="TCP三次握手连接"><a href="#TCP三次握手连接" class="headerlink" title="TCP三次握手连接"></a>TCP三次握手连接</h3><p><img src="http://upload-images.jianshu.io/upload_images/2964446-aa923712d5218eeb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p></li><li><p>第一次握手：Client将标志位SYN置为1，随机产生一个值seq=J，并将该数据包发送给Server，Client进入SYN_SENT状态，等待Server确认。</p></li><li><p>第二次握手：Server收到数据包后由标志位SYN=1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给Client以确认连接请求，Server进入SYN_RCVD状态。</p></li><li><p>第三次握手：Client收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给Server，Server检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了。</p></li></ul><p>简单来说，就是</p><ol><li>建立连接时，客户端发送SYN包（SYN=i）到服务器，并进入到SYN-SEND状态，等待服务器确认</li><li>服务器收到SYN包，必须确认客户的SYN（ack=i+1）,同时自己也发送一个SYN包（SYN=k）,即SYN+ACK包，此时服务器进入SYN-RECV状态</li><li>客户端收到服务器的SYN+ACK包，向服务器发送确认报ACK（ack=k+1）,此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手，客户端与服务器开始传送数据。###TCP四次挥手断开连接<img src="http://upload-images.jianshu.io/upload_images/2964446-2b9562b3a8b72fb2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></li></ol><p>　　由于TCP连接时全双工的，因此，每个方向都必须要单独进行关闭，这一原则是当一方完成数据发送任务后，发送一个FIN来终止这一方向的连接，收到一个FIN只是意味着这一方向上没有数据流动了，即不会再收到数据了，但是在这个TCP连接上仍然能够发送数据，直到这一方向也发送了FIN。首先进行关闭的一方将执行主动关闭，而另一方则执行被动关闭，上图描述的即是如此。</p><ul><li><p>第一次挥手：Client发送一个FIN，用来关闭Client到Server的数据传送，Client进入FIN_WAIT_1状态。</p></li><li><p>第二次挥手：Server收到FIN后，发送一个ACK给Client，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号），Server进入CLOSE_WAIT状态。</p></li><li><p>第三次挥手：Server发送一个FIN，用来关闭Server到Client的数据传送，Server进入LAST_ACK状态。</p></li><li><p>第四次挥手：Client收到FIN后，Client进入TIME_WAIT状态，接着发送一个ACK给Server，确认序号为收到序号+1，Server进入CLOSED状态，完成四次挥手。</p><h3 id="Tcp为什么要三次握手，四次挥手"><a href="#Tcp为什么要三次握手，四次挥手" class="headerlink" title="Tcp为什么要三次握手，四次挥手"></a>Tcp为什么要三次握手，四次挥手</h3><p>一段通俗的解释</p></li></ul><p>三次握手：</p><p>A:“喂，你听得到吗？”A-&gt;SYN_SEND</p><p>B:“我听得到呀，你听得到我吗？”应答与请求同时发出 B-&gt;SYN_RCVD | A-&gt;ESTABLISHED</p><p>A:“我能听到你，今天balabala……”B-&gt;ESTABLISHED</p><p>四次挥手：</p><p>A:“喂，我不说了。”A-&gt;FIN_WAIT1</p><p>B:“我知道了。等下，上一句还没说完。Balabala…..”B-&gt;CLOSE_WAIT | A-&gt;FIN_WAIT2（此处可能没有就是恰好B也发送完了，并且此处不在四次握手内，是正常通信的消息）</p><p>B:”好了，说完了，我也不说了。”B-&gt;LAST_ACK</p><p>A:”我知道了。”A-&gt;TIME_WAIT | B-&gt;CLOSED</p><p>A等待2MSL,保证B收到了消息,否则重说一次”我知道了”,A-&gt;CLOSED</p><h3 id="TCP与UDP区别"><a href="#TCP与UDP区别" class="headerlink" title="TCP与UDP区别"></a>TCP与UDP区别</h3><ol><li>基于连接与无连接；</li><li>对系统资源的要求（TCP较多，UDP少）；</li><li>UDP程序结构较简单；</li><li>TCP流模式与UDP数据报模式 ；</li><li>TCP保证数据正确性，UDP可能丢包，TCP保证数据顺序，UDP不保证。<h2 id="TCP、UDP的区别"><a href="#TCP、UDP的区别" class="headerlink" title="TCP、UDP的区别"></a>TCP、UDP的区别</h2>TCP是面向连接的，可靠的，传输大量数据，速度慢。UDP相反。<h2 id="TCP的三次握手、四次挥手"><a href="#TCP的三次握手、四次挥手" class="headerlink" title="TCP的三次握手、四次挥手"></a>TCP的三次握手、四次挥手</h2></li></ol><ul><li>三次握手： 为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误</li><li>四次挥手：TCP是全双工模式，这就意味着，<ul><li>当主机1发出FIN报文段时，告诉主机2，它的数据已经全部发送完毕了,但是，这个时候主机1还是可以接受来自主机2的数据；</li><li>当主机2返回ACK报文段时，表示它已经知道主机1没有数据发送了，但是主机2还是可以发送数据到主机1的；</li><li>当主机2也发送了FIN报文段时，这个时候就表示主机2也没有数据要发送了;</li><li>当主机1返回ACK报文段之后彼此就会愉快的中断这次TCP连接。<h2 id="HTTP的特点"><a href="#HTTP的特点" class="headerlink" title="HTTP的特点"></a>HTTP的特点</h2></li></ul></li><li>支持客户/服务器模式。</li><li>简单快速：客户向服务器请求服务时，只需传送请求方法(GET、HEAD、POST)和路径。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。</li><li>灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。</li><li>无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</li><li>无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。<h2 id="HTTP与HTTPS的区别"><a href="#HTTP与HTTPS的区别" class="headerlink" title="HTTP与HTTPS的区别"></a>HTTP与HTTPS的区别</h2></li></ul><hr><h1 id="算法相关（参考这里）"><a href="#算法相关（参考这里）" class="headerlink" title="算法相关（参考这里）"></a>算法相关（<a target="_blank" rel="noopener" href="https://getpocket.com/a/read/982518844">参考这里</a>）</h1><hr><ul><li><strong>二位数组查找：</strong> 对数组进行排序，没一行从左到右递增，每一列从上往下递增。然后从右上角开始，比较与target的大小，如果等于，结束查找；如果大于target，则删除此列，如果小于target，删除此行；然后从剩下的数组右上角开始查找。</li><li><strong>替换字符串中空格（替换数组中的元素x）：</strong> 先遍历一遍，统计字符串A中空格个数，然后计算替换后的总长度，生成新的长度的空字符串B。一个指针指向B的结尾，一个指向A的结尾，从后往前遍历A，遇到空格就在B中插入要替换的字符。</li><li><strong>从尾到头打印链表（栈的使用）：</strong> 利用栈的先进后出原则</li><li><strong>二进制中1的个数：</strong> 如果一个整数不为0，那么这个整数至少有一位是1。如果我们把这个整数减1，那么原来处在整数最右边的1就会变为0，原来在1后面的所有的0都会变成1(如果最右边的1后面还有0的话)。其余所有位将不会受到影响。接着让原整数与减一后的数按位与（n &amp;=(n-1)），清除该数最右边的1，循环知道此数变为0.</li><li><strong>数值的整数次方：</strong> a^n=a^(n/2)*a^(n/2)，(n为偶数)；或者 a^n = a^ ((n-1)/2)*a^((n-1)/2)*a，(n为奇数)</li></ul><hr><h1 id="数据库相关"><a href="#数据库相关" class="headerlink" title="数据库相关"></a>数据库相关</h1><hr><h2 id="三范式"><a href="#三范式" class="headerlink" title="三范式"></a><em>三范式</em></h2><p>即：属性唯一，记录唯一和表唯一</p><ul><li>第一范式（1NF）：数据库表中的字段都是单一属性，不可再分。这个单一属性由基本类型构成，包括整数、实数、字符型、逻辑型、日期型等。</li><li>第二范式（2NF）：数据库表中不存在非关键字段对任意候选关键字段的部分函数依赖（部分函数依赖指的是存在组合关键字中某些字段决定非关键字段的情况），也即所有非关键字段都完全依赖任意组候选关键字。</li><li>第三范式（3NF）：在第二范式基础上，数据表中如果不存在非关键字段对任一候选字段的传递函数依赖则符合第三范式。所谓传递函数依赖，指的是如 果存在”A → B → C”的决定关系，则C传递函数依赖于A。因此，满足第三范式的数据库表应该不存在如下依赖关系： 关键字段 → 非关键字段 x → 非关键字段y</li></ul><h2 id="数据库基本语法"><a href="#数据库基本语法" class="headerlink" title="数据库基本语法"></a><em>数据库基本语法</em></h2><h3 id="HAVING和WHERE对于分组查询的区别"><a href="#HAVING和WHERE对于分组查询的区别" class="headerlink" title="HAVING和WHERE对于分组查询的区别"></a>HAVING和WHERE对于分组查询的区别</h3><p>HAVING子句对GROUP BY子句设置条件的方式与WHERE子句和SELECT语句交互的方式类似。WHERE子句搜索条件在进行分组操作之前应用；而HAVING搜索条件在进行分组操作之后应用。HAVING语法与WHERE语法类似，但HAVING可以包含聚合函数。HAVING子句可以引用选择列表中出现的任意项。</p><h3 id="Full-outer-join，left-join-right-join，inner-join区别-参考这里"><a href="#Full-outer-join，left-join-right-join，inner-join区别-参考这里" class="headerlink" title="Full outer join，left join, right join，inner join区别(参考这里)"></a>Full outer join，left join, right join，inner join区别(<a target="_blank" rel="noopener" href="http://www.cnblogs.com/logon/p/3748020.html">参考这里</a>)</h3><h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><p>1.概念：包括左向外联接、右向外联接或完整外部联接</p><p>2.左连接：left join 或 left outer join，左向外联接的结果集包括 LEFT OUTER 子句中指定的左表的所有行，而不仅仅是联接列所匹配的行。如果左表的某行在右表中没有匹配行，则在相关联的结果集行中右表的所有选择列表列均为空值(null)。</p><p>3.右连接：right join 或 right outer join。右向外联接是左向外联接的反向联接。将返回右表的所有行。如果右表的某行在左表中没有匹配行，则将为左表返回空值。</p><p>4.完整外部联接:full join 或 full outer join，完整外部联接返回左表和右表中的所有行。当某行在另一个表中没有匹配行时，则另一个表的选择列表列包含空值。如果表之间有匹配行，则整个结果集行包含基表的数据值。</p><h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><p>1.概念：内联接是用比较运算符比较要联接列的值的联接</p><p>2.内连接：join 或 inner join，只返回符合条件的列。</p><h4 id="交叉连接"><a href="#交叉连接" class="headerlink" title="交叉连接"></a>交叉连接</h4><p>1.概念：没有 WHERE 子句的交叉联接将产生联接所涉及的表的笛卡尔积。第一个表的行数乘以第二个表的行数等于笛卡尔积结果集的大小。</p><p>2.交叉连接：cross join</p><h3 id="查询-更多语句参考此处"><a href="#查询-更多语句参考此处" class="headerlink" title="查询(更多语句参考此处)"></a>查询(<a target="_blank" rel="noopener" href="http://blog.csdn.net/zhanghaotian2011/article/details/8904365">更多语句参考此处</a>)</h3><ul><li>查询数据库表最后一条记录(ID自增)<figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT top 1 * FROM Table_Name ORDERBY ID DESC</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Table_Name WHERE ID=(SELECT MAX(ID) FROM Table_Name)</span><br></pre></td></tr></tbody></table></figure></li><li>查询数据库表A中31-40条记录<figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT top 10 * FROM A WHERE ID not in(SELECT top 30 ID FROM A)</span><br></pre></td></tr></tbody></table></figure></li><li>查询员工平均工资大于3000的部门名称<figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT Dept_Name FROM t_Dept WHERE ID in(SELECT Dept_ID FROM t_Salary GROUP BY Dept_ID HAVING avg(Salary)&gt;3000)</span><br></pre></td></tr></tbody></table></figure></li></ul><hr><h1 id="数据库相关-1"><a href="#数据库相关-1" class="headerlink" title="数据库相关"></a>数据库相关</h1><hr><h2 id="B树（百度作业帮面试）"><a href="#B树（百度作业帮面试）" class="headerlink" title="B树（百度作业帮面试）"></a>B树（百度作业帮面试）</h2><h3 id="1-B树"><a href="#1-B树" class="headerlink" title="1.B树"></a>1.B树</h3><p>　　Ｂ树及Ｂ－树，是一种自平衡的树，能够<strong>保持数据有序</strong>。这种数据结构能够让查找数据、顺序访问、插入数据及删除的动作，都在对数时间内完成。</p><p>　　B树，概括来说是一个一般化的<strong>二叉查找树</strong>（binary search tree），可以拥有<strong>多于2个子节点</strong>。与自平衡二叉查找树不同，B树为系统大块数据的读写操作做了优化。B树减少定位记录时所经历的中间过程，从而加快存取速度。B树这种数据结构可以用来描述外部存储。这种数据结构常被应用在数据库和文件系统的实作上。</p><h4 id="1-1-B-树的性质"><a href="#1-1-B-树的性质" class="headerlink" title="1.1　B-树的性质"></a>1.1　B-树的性质</h4><p>M为树的阶数，B-树或为空树，否则满足下列条件：</p><p>1.　定义任意非叶子结点最多只有M个儿子；且M&gt;2；</p><p>2.　根结点的儿子数为[2, M]；</p><p>3.　除根结点以外的非叶子结点的儿子数为[M/2, M]；</p><p>4.　每个结点存放至少M/2-1（取上整）和至多M-1个关键字；（至少2个关键字）</p><p>5.　非叶子结点的关键字个数=指向儿子的指针个数-1；</p><p>6.　非叶子结点的关键字：K[1], K[2], …, K[M-1]；且K[i] &lt; K[i+1]；</p><p>7.　非叶子结点的指针：P[1], P[2], …, P[M]；其中P[1]指向关键字小于K[1]的子树，P[M]指向关键字大于K[M-1]的子树，其它P[i]指向关键字属于(K[i-1], K[i])的子树；</p><p>8.　所有叶子结点位于同一层；</p><p>如：（M=3）<img src="http://img.blog.csdn.net/20160612115550177" alt="这里写图片描述"></p><p>　　B-树的搜索，从根结点开始，对结点内的关键字（有序）序列进行二分查找，如果命中则结束，否则进入查询关键字所属范围的儿子结点；重复，直到所对应的儿子指针为空，或已经是叶子结点。</p><h4 id="1-２-B树的运用场景"><a href="#1-２-B树的运用场景" class="headerlink" title="1.２　B树的运用场景"></a>1.２　B树的运用场景</h4><ul><li><p>保持<strong>键值有序</strong>，以顺序遍历</p></li><li><p>使用<strong>层次化的索引来最小化磁盘读取</strong></p></li><li><p>使用<strong>不完全填充</strong>的块来加速插入和删除</p></li><li><p>通过优雅的遍历算法来保持<strong>索引平衡</strong></p></li></ul><p> 另外，B树通过保证内部节点至少半满来<strong>最小化空间浪费</strong>。一棵B树可以处理任意数目的插入和删除。</p><h3 id="２-B＋树"><a href="#２-B＋树" class="headerlink" title="２.　B＋树"></a>２.　B＋树</h3><p>　　B+ 树是一种树数据结构，是一个<strong>n叉树</strong>，每个节点通常有多个孩子，一颗B+树包含<strong>根节点、内部节点和叶子节点</strong>。根节点可能是一个叶子节点，也可能是一个包含两个或两个以上孩子节点的节点。</p><p>　　B+ 树通常用于<strong>数据库和操作系统的文件系统</strong>中。NTFS, ReiserFS, NSS, XFS, JFS, ReFS 和BFS等文件系统都在使用B+树作为<strong>元数据索引</strong>。B+ 树的特点是能够保持<strong>数据稳定有序</strong>，其插入与修改拥有较稳定的对数时间复杂度。B+ 树元素自底向上插入。</p><h4 id="２-1-B＋树的性质"><a href="#２-1-B＋树的性质" class="headerlink" title="２.1　B＋树的性质"></a>２.1　B＋树的性质</h4><p>B+树是B-树的变体，也是一种多路搜索树，其定义基本与B-树同，除了：</p><p>１.　非叶子结点的子树指针与关键字个数相同；</p><p>２.　非叶子结点的子树指针P[i]，指向关键字值属于[K[i], K[i+1])的子树（B-树是开区间）；</p><p>３.　为所有叶子结点增加一个链指针；</p><p>４.　所有关键字都在叶子结点出现；</p><p><img src="http://img.blog.csdn.net/20160612134221890" alt="这里写图片描述">　</p><h4 id="２-２-B＋树与B树的区别"><a href="#２-２-B＋树与B树的区别" class="headerlink" title="２.２　B＋树与Ｂ树的区别"></a>２.２　B＋树与Ｂ树的区别</h4><p>1.　所有关键字都出现在叶子结点的链表中（稠密索引），且链表中的关键字恰好是有序的；</p><p>2.　不可能在非叶子结点命中；</p><p>3.　非叶子结点相当于是叶子结点的索引（稀疏索引），叶子结点相当于是存储（关键字）数据的数据层；</p><p>4.　<strong>更适合文件索引系统</strong>；</p><p>　　 B+的搜索与B-树也基本相同，区别是B+树只有达到叶子结点才命中（B-树可以在非叶子结点命中），其性能也等价于在关键字全集做一次二分查找；</p><h3 id="３-B-树"><a href="#３-B-树" class="headerlink" title="３.　B*树"></a>３.　B*树</h3><p>B+树的变体，在B+树的非根和非叶子结点再增加指向兄弟的指针；</p><p><img src="http://img.blog.csdn.net/20160612134707432" alt="这里写图片描述">　</p><p>　　 B*树定义了非叶子结点关键字个数至少为(2/3)*M，即块的最低使用率为2/3（代替B+树的1/2）；</p><p>B+树的分裂：　　</p><blockquote><p>当一个结点满时，分配一个新的结点，并将原结点中1/2的数据复制到新结点，最后在父结点中增加新结点的指针；B+树的分裂只影响原结点和父结点，而不会影响兄弟结点，所以它不需要指向兄弟的指针；</p></blockquote><p>B*树的分裂：</p><blockquote><p>当一个结点满时，如果它的下一个兄弟结点未满，那么将一部分数据移到兄弟结点中，再在原结点插入关键字，最后修改父结点中兄弟结点的关键字（因为兄弟结点的关键字范围改变了）；如果兄弟也满了，则在原结点与兄弟结点之间增加新结点，并各复制1/3的数据到新结点，最后在父结点增加新结点的指针；</p></blockquote><p>所以，B*树分配新结点的概率比B+树要低，<strong>空间使用率更高</strong>；</p><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h3><ul><li><p>B-树：　　　　多路搜索树，每个结点存储M/2到M个关键字，非叶子结点存储指向关键字范围的子结点；所有关键字在整颗树中出现，且只出现一次，非叶子结点可以命中；</p></li><li><p>B+树：</p></li></ul><p>　　在B-树基础上，为叶子结点增加链表指针，所有关键字都在叶子结点中出现，非叶子结点作为叶子结点的索引；B+树总是到叶子结点才命中；</p><ul><li>B*树：</li></ul><p>　　在B+树基础上，为非叶子结点也增加链表指针，将结点的最低利用率从1/2提高到2/3；</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ol><li><h2 id="了解哪些加密算法-参考"><a href="#了解哪些加密算法-参考" class="headerlink" title="了解哪些加密算法 (参考)"></a>了解哪些加密算法 (<a target="_blank" rel="noopener" href="http://www.cnblogs.com/MikeChen/archive/2011/04/22/2024574.html">参考</a>)</h2></li></ol><ul><li>对称加密 ： DES、3DES、Blowfish、IDEA、RC4、RC5、RC6和AES （归纳 DES, RC*, AES）</li><li>非对称加密: RSA、ECC（移动设备用）、Diffie-Hellman、El Gamal、DSA</li><li>Hash算法加密（不可逆向解密）：MD2、MD4、MD5、HAVAL、SHA</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Android相关&quot;&gt;&lt;a href=&quot;#Android相关&quot; class=&quot;headerlink&quot; title=&quot;Android相关&quot;&gt;&lt;/a&gt;Android相关&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;Activity和Fragment的生命周期&quot;&gt;&lt;a href=&quot;#Activity和Fragment的生命周期&quot; class=&quot;headerlink&quot; title=&quot;Activity和Fragment的生命周期&quot;&gt;&lt;/a&gt;Activity和Fragment的生命周期&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://bmob-cdn-3365.b0.upaiyun.com/2016/07/15/a47f448b4077cefe80571168e3f03eef.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;加速Activity启动&quot;&gt;&lt;a href=&quot;#加速Activity启动&quot; class=&quot;headerlink&quot; title=&quot;加速Activity启动&quot;&gt;&lt;/a&gt;加速Activity启动&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;精简onCreate中的代码&lt;/li&gt;
&lt;li&gt;将耗时操作放到后台线程&lt;/li&gt;
&lt;li&gt;优化布局文件（ Hierarchy Viewer， Layoutopt）&lt;/li&gt;
&lt;li&gt;缓存ListView&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Android多线程的几种方式&quot;&gt;&lt;a href=&quot;#Android多线程的几种方式&quot; class=&quot;headerlink&quot; title=&quot;Android多线程的几种方式&quot;&gt;&lt;/a&gt;Android多线程的几种方式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Handler.sendXXXMessage()&lt;/li&gt;
&lt;li&gt;Handler.post(Runnable)&lt;/li&gt;
&lt;li&gt;Activity.runOnUIThread(Runnable)&lt;/li&gt;
&lt;li&gt;View.post(Runnable)&lt;/li&gt;
&lt;li&gt;AsyncTask&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="日常总结" scheme="https://chewenkai.github.io/categories/%E6%97%A5%E5%B8%B8%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="Andoird" scheme="https://chewenkai.github.io/tags/Andoird/"/>
    
    <category term="面试" scheme="https://chewenkai.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>编程题之数串</title>
    <link href="https://chewenkai.github.io/%E6%97%A5%E5%B8%B8%E6%80%BB%E7%BB%93/%E7%BC%96%E7%A8%8B%E9%A2%98%E4%B9%8B%E6%95%B0%E4%B8%B2/"/>
    <id>https://chewenkai.github.io/%E6%97%A5%E5%B8%B8%E6%80%BB%E7%BB%93/%E7%BC%96%E7%A8%8B%E9%A2%98%E4%B9%8B%E6%95%B0%E4%B8%B2/</id>
    <published>2017-09-01T13:00:02.000Z</published>
    <updated>2017-09-01T13:00:02.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题目描述</strong>设有n个正整数，将他们连接成一排，组成一个最大的多位整数。如:n=3时，3个整数13,312,343,连成的最大整数为34331213。如:n=4时,4个整数7,13,4,246连接成的最大整数为7424613。<strong>输入描述:</strong>有多组测试样例，每组测试样例包含两行，第一行为一个整数N（N&lt;=100），第二行包含N个数(每个数不超过1000，空格分开)。<strong>输出描述:</strong>每组数据输出一个表示最大的整数。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">示例1</span><br><span class="line">输入</span><br><span class="line"></span><br><span class="line">2</span><br><span class="line">12 123</span><br><span class="line">4</span><br><span class="line">7 13 4 246</span><br><span class="line">输出</span><br><span class="line"></span><br><span class="line">12312</span><br><span class="line">7424613</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><p>首先，本题可以理解为对N个数进行排序，只不过排序的标准不是数值的大小，而是两个字符串组合到一起转化成整形后的数值大小，所以只需要随便采用一种排序方法，在比较大小时改成比较字符串组合的大小就行。话不多说，上代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by kevin on 17-9-5.</span></span><br><span class="line"><span class="comment"> * Mail: chewenkaich@gmail.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 获取输入</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> Integer.valueOf(in.nextLine().trim());</span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">100</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">inStr</span> <span class="operator">=</span> in.nextLine().trim();</span><br><span class="line">        String[] dataStr = inStr.split(<span class="string">" "</span>);</span><br><span class="line">        <span class="type">int</span>[] data = <span class="keyword">new</span> <span class="title class_">int</span>[dataStr.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dataStr.length; i++) {</span><br><span class="line">            data[i] = Integer.valueOf(dataStr[i]);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 此处为一个冒泡排序，也可以使用其他快排，归并等其他高效排序方法</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">pass</span> <span class="operator">=</span> data.length - <span class="number">1</span>; pass &gt;= <span class="number">0</span>; pass--) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; pass; i++) {</span><br><span class="line">                <span class="keyword">if</span> (!is1stBiggerThan2nd(data[i], data[i + <span class="number">1</span>])) { <span class="comment">// 第i个数“小于”第i+1个数</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">tem</span> <span class="operator">=</span> data[i + <span class="number">1</span>];</span><br><span class="line">                    data[i + <span class="number">1</span>] = data[i];</span><br><span class="line">                    data[i] = tem;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出结果</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> each : data) {</span><br><span class="line">            result += String.valueOf(each);</span><br><span class="line">        }</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从两个整数组合起来较大时，其中的第一个整数，例如，</span></span><br><span class="line"><span class="comment">     * a=3489, b=3423</span></span><br><span class="line"><span class="comment">     * 因为a组合b = 34893423 &gt; b组合a = 34233489，所以返回a</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true, a+b &gt; b+a; false, a+b &lt; b+a</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">is1stBiggerThan2nd</span><span class="params">(Integer a, Integer b)</span> {</span><br><span class="line">        <span class="keyword">if</span> (Integer.valueOf(String.valueOf(a) + String.valueOf(b)) &gt; Integer.valueOf(String.valueOf(b) + String.valueOf(a)))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>最终程序运行结果如下运行时间：169ms占用内存：13040k如果有任何问题，欢迎指正。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;题目描述&lt;/strong&gt;
设有n个正整数，将他们连接成一排，组成一个最大的多位整数。
如:n=3时，3个整数13,312,343,连成的最大整数为34331213。
如:n=4时,4个整数7,13,4,246连接成的最大整数为7424613。
&lt;strong&gt;输入描述:&lt;/strong&gt;
有多组测试样例，每组测试样例包含两行，第一行为一个整数N（N&amp;lt;=100），第二行包含N个数(每个数不超过1000，空格分开)。
&lt;strong&gt;输出描述:&lt;/strong&gt;
每组数据输出一个表示最大的整数。&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;示例1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输入&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12 123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7 13 4 246&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12312&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7424613&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="日常总结" scheme="https://chewenkai.github.io/categories/%E6%97%A5%E5%B8%B8%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="算法" scheme="https://chewenkai.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="牛客" scheme="https://chewenkai.github.io/tags/%E7%89%9B%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>摆动排序-归并排序-归并排序</title>
    <link href="https://chewenkai.github.io/%E6%97%A5%E5%B8%B8%E6%80%BB%E7%BB%93/%E6%91%86%E5%8A%A8%E6%8E%92%E5%BA%8F-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    <id>https://chewenkai.github.io/%E6%97%A5%E5%B8%B8%E6%80%BB%E7%BB%93/%E6%91%86%E5%8A%A8%E6%8E%92%E5%BA%8F-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</id>
    <published>2017-08-08T13:00:02.000Z</published>
    <updated>2017-08-08T13:00:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="摆动排序"><a href="#摆动排序" class="headerlink" title="- 摆动排序"></a>- 摆动排序</h3><p>给你一个没有排序的数组，请将原数组就地重新排列满足如下性质:</p><pre><code>nums[0] &lt;= nums[1] &gt;= nums[2] &lt;= nums[3]....</code></pre><p>答案：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums a list of integer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">wiggleSort</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;nums.length; i++){</span><br><span class="line">            <span class="keyword">if</span> ((i%<span class="number">2</span>==<span class="number">1</span> &amp;&amp; nums[i-<span class="number">1</span>]&gt;nums[i])||</span><br><span class="line">            (i%<span class="number">2</span>==<span class="number">0</span> &amp;&amp; nums[i-<span class="number">1</span>]&lt;nums[i]))</span><br><span class="line">                swap(nums, i-<span class="number">1</span>, i);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Swap two values</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        nums[j] = temp;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="-归并排序"></a>-归并排序</h3><p>原理：<img src="http://bubkoo.qiniudn.com/merge-sort-animation.gif"><img src="http://bubkoo.qiniudn.com/merge-sort-example-300px.gif">给一组整数，按照升序排序。样例:给出 [3, 2, 1, 4, 5], 排序后的结果为 [1, 2, 3, 4, 5]。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by kevin on 17-8-21.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MergeSort</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructive function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    MergeSort(<span class="type">int</span> target[]){</span><br><span class="line">        internalMergeSort(target, <span class="number">0</span>, target.length-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> value :</span><br><span class="line">                target) {</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  Split the dataset and iterator</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target  the target array</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> left  left pointer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> right  right pointer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">internalMergeSort</span><span class="params">(<span class="type">int</span> target[], <span class="type">int</span> left, <span class="type">int</span> right)</span>{</span><br><span class="line">        <span class="keyword">if</span> (left &lt; right){</span><br><span class="line">            <span class="type">int</span> <span class="variable">middle</span> <span class="operator">=</span> (left + right)/<span class="number">2</span>;</span><br><span class="line">            System.out.println(left+<span class="string">"-"</span>+middle+<span class="string">"-"</span>+right);</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                internalMergeSort(target, left, middle);</span><br><span class="line">                internalMergeSort(target, middle+<span class="number">1</span>, right);</span><br><span class="line">            }<span class="keyword">catch</span> (StackOverflowError e){</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            merge(target, left, middle, right);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Merge sets</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target the target array</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> left  left pointer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> middle the middle</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> right  right pointer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span> target[], <span class="type">int</span> left, <span class="type">int</span> middle, <span class="type">int</span> right)</span>{</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span>left;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> middle+<span class="number">1</span>;  <span class="comment">// Notice the m need to start from middle+1</span></span><br><span class="line">        <span class="type">int</span> result[] = <span class="keyword">new</span> <span class="title class_">int</span>[right-left+<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(l&lt;=middle &amp;&amp; m &lt;= right){</span><br><span class="line">            <span class="keyword">if</span> (target[l]&gt;target[m])</span><br><span class="line">                result[k++] = target[m++];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                result[k++]= target[l++];</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(l&lt;=middle){</span><br><span class="line">            result[k++] = target[l++];</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (m &lt;= right){</span><br><span class="line">            result[k++] = target[m++];</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=left; i&lt;=right;i++){  <span class="comment">// Notice the i need be iterated from left to right</span></span><br><span class="line">            target[i] = result[i-left];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * main</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title function_">main</span> <span class="params">(String args[])</span>{</span><br><span class="line">        <span class="type">int</span> target[] = { <span class="number">51</span>, <span class="number">46</span>, <span class="number">20</span>, <span class="number">18</span>, <span class="number">65</span>, <span class="number">97</span>, <span class="number">82</span>, <span class="number">30</span>, <span class="number">77</span>, <span class="number">50</span> };</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> value :</span><br><span class="line">                target) {</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MergeSort</span>(target);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="-快速排序"></a>-快速排序</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by kevin on 17-8-22.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuickSort</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">QuickSort</span><span class="params">(<span class="type">int</span>[] targetArr)</span> {</span><br><span class="line">        recursionMethod(targetArr, <span class="number">0</span>, targetArr.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> r : targetArr) {</span><br><span class="line">            System.out.println(r);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">recursionMethod</span><span class="params">(<span class="type">int</span>[] partArr, <span class="type">int</span> start, <span class="type">int</span> end)</span> {</span><br><span class="line">        <span class="keyword">if</span> (start &gt;= end) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pivot</span> <span class="operator">=</span> (start + end) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pivotValue</span> <span class="operator">=</span> partArr[pivot];</span><br><span class="line">        <span class="type">int</span> <span class="variable">lefP</span> <span class="operator">=</span> start;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rigP</span> <span class="operator">=</span> end;</span><br><span class="line">        <span class="comment">// left pointer move to right, and right pointer move to left.</span></span><br><span class="line">        <span class="comment">// left pointer stopped moving when encounter a number larger than or equal with pivot.</span></span><br><span class="line">        <span class="comment">// right pointer stopped moving when encounter a number smaller than pivot.</span></span><br><span class="line">        <span class="keyword">while</span> (lefP &lt;= rigP) {</span><br><span class="line">            <span class="comment">// moving left pointer</span></span><br><span class="line">            <span class="keyword">while</span> (lefP &lt;= rigP &amp;&amp; partArr[lefP] &lt; pivotValue)</span><br><span class="line">                lefP++;</span><br><span class="line">            <span class="keyword">while</span> (lefP &lt;= rigP &amp;&amp; partArr[rigP] &gt; pivotValue)</span><br><span class="line">                rigP--;</span><br><span class="line">            <span class="comment">// Now, lefP point at a bigger value, and rigP point at a littler value.</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (lefP &lt;= rigP) {</span><br><span class="line">                <span class="comment">// Then swap these two values.</span></span><br><span class="line">                swapValues(partArr, lefP, rigP);</span><br><span class="line">                <span class="comment">// move pointer</span></span><br><span class="line">                lefP++;</span><br><span class="line">                rigP--;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        recursionMethod(partArr, start, rigP);</span><br><span class="line">        recursionMethod(partArr, lefP, end);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">swapValues</span><span class="params">(<span class="type">int</span>[] partArr, <span class="type">int</span> left, <span class="type">int</span> right)</span> {</span><br><span class="line">        <span class="comment">// swap the left larger value and the right smaller value.</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> partArr[left];</span><br><span class="line">        partArr[left] = partArr[right];</span><br><span class="line">        partArr[right] = temp;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> {</span><br><span class="line">        <span class="type">int</span> target[] = {<span class="number">51</span>, <span class="number">46</span>, <span class="number">20</span>, <span class="number">18</span>, <span class="number">65</span>, <span class="number">97</span>, <span class="number">82</span>, <span class="number">30</span>, <span class="number">77</span>, <span class="number">50</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">77</span>, <span class="number">8</span>, <span class="number">32</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">754</span>, <span class="number">7347</span>, <span class="number">2352</span>, <span class="number">656</span>, <span class="number">75467</span>, <span class="number">2534</span>, <span class="number">6436</span>, <span class="number">2342</span>, <span class="number">73</span>, <span class="number">25</span>, <span class="number">253</span>, <span class="number">654</span>, <span class="number">2542</span>,</span><br><span class="line">                <span class="number">34252</span>, <span class="number">6453</span>, <span class="number">345</span>, <span class="number">736</span>, <span class="number">5623</span>, <span class="number">2345234</span>, <span class="number">25</span>, <span class="number">34534</span>, <span class="number">456</span>, <span class="number">7456</span>, <span class="number">776</span>, <span class="number">567</span>, <span class="number">4564</span>, <span class="number">34</span>, <span class="number">345</span>, <span class="number">456</span>, <span class="number">345</span>, <span class="number">2</span>, <span class="number">745</span>, <span class="number">453</span>, <span class="number">7643625</span>, <span class="number">25</span>};</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">QuickSort</span>(target);</span><br><span class="line">        } <span class="keyword">catch</span> (StackOverflowError e) {</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;排序&quot;&gt;&lt;a href=&quot;#排序&quot; class=&quot;headerlink&quot; title=&quot;排序&quot;&gt;&lt;/a&gt;排序&lt;/h2&gt;&lt;h3 id=&quot;摆动排序&quot;&gt;&lt;a href=&quot;#摆动排序&quot; class=&quot;headerlink&quot; title=&quot;- 摆动排序&quot;&gt;&lt;/a&gt;- 摆动排序&lt;/h3&gt;&lt;p&gt;给你一个没有排序的数组，请将原数组就地重新排列满足如下性质:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nums[0] &amp;lt;= nums[1] &amp;gt;= nums[2] &amp;lt;= nums[3]....
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;答案：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Solution&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; nums a list of integer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;wiggleSort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;[] nums)&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i&amp;lt;nums.length; i++){&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((i%&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;==&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; nums[i-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&amp;gt;nums[i])||&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (i%&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; nums[i-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&amp;lt;nums[i]))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                swap(nums, i-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * Swap two values&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;[] nums, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; j)&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; nums[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        nums[i] = nums[j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        nums[j] = temp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="日常总结" scheme="https://chewenkai.github.io/categories/%E6%97%A5%E5%B8%B8%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="排序" scheme="https://chewenkai.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
    <category term="算法" scheme="https://chewenkai.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据结构之二叉树相关</title>
    <link href="https://chewenkai.github.io/%E9%9D%A2%E8%AF%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9B%B8%E5%85%B3/"/>
    <id>https://chewenkai.github.io/%E9%9D%A2%E8%AF%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9B%B8%E5%85%B3/</id>
    <published>2017-07-08T13:00:02.000Z</published>
    <updated>2017-07-08T13:00:02.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h4 id="二叉树的相关术语"><a href="#二叉树的相关术语" class="headerlink" title="二叉树的相关术语:"></a>二叉树的相关术语:</h4><p><strong>树的结点</strong>:包含一个数据元素及若干指向子树的分支；<strong>孩子结点</strong>:结点的子树的根称为该结点的孩子；<strong>双亲结点</strong>:B 结点是A 结点的孩子，则A结点是B 结点的双亲；<strong>兄弟结点</strong>:同一双亲的孩子结点； 堂兄结点:同一层上结点；<strong>祖先结点</strong>: 从根到该结点的所经分支上的所有结点子孙结点:以某结点为根的子树中任一结点都称为该结点的子孙<strong>结点层</strong>:根结点的层定义为1；根的孩子为第二层结点，依此类推；<strong>树的深度</strong>:树中最大的结点层<strong>结点的度</strong>:结点子树的个数<strong>树的度</strong>: 树中最大的结点度。<strong>叶子结点</strong>:也叫终端结点，是度为 0 的结点；<strong>分枝结点</strong>:度不为0的结点；<strong>有序树</strong>:子树有序的树，如:家族树；<strong>无序树</strong>:不考虑子树的顺序；<a target="_blank" rel="noopener" href="http://baike.baidu.com/item/%E4%BA%8C%E5%8F%89%E6%A0%91#2_2">参考</a></p><span id="more"></span><h4 id="二叉树相关知识点"><a href="#二叉树相关知识点" class="headerlink" title="二叉树相关知识点:"></a>二叉树相关知识点:</h4><ul><li><p>在二叉树中每个节点最多有两个子节点，一般称为左子节点和右子节点（或左孩子和右孩子），并且二叉树的子树有左右之分，其次序不能任意颠倒。</p></li><li><p>二叉树是递归定义的，因此，与二叉树有关的题目基本都可以用递归思想解决。</p></li></ul><h4 id="二叉树相关面试题目"><a href="#二叉树相关面试题目" class="headerlink" title="二叉树相关面试题目:"></a>二叉树相关面试题目:</h4><p>参考网上的<a target="_blank" rel="noopener" href="http://blog.csdn.net/luckyxiaoqiang/article/details/7518888">相关面试题</a>，添加了自己的理解（括号部分），并将代码改为java实现。</p><p><em>注意，在递归过程中，若一共有n种情况，要有m(m&lt;n)种情况用于控制递归停止，n-m个条件用于递归。</em></p><p>首先，二叉树的Java定义如下:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 二叉树定义</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinaryTree</span>{</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">rootNode</span> <span class="operator">=</span> <span class="literal">null</span>;  <span class="comment">// 根节点</span></span><br><span class="line">    <span class="type">BinaryTree</span> <span class="variable">leftNode</span> <span class="operator">=</span> <span class="literal">null</span>;  <span class="comment">// 左子节点</span></span><br><span class="line">    <span class="type">BinaryTree</span> <span class="variable">rightNode</span> <span class="operator">=</span> <span class="literal">null</span>;  <span class="comment">// 右子节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BinaryTree</span> <span class="params">(<span class="type">int</span> rootNode, BinaryTree leftNode, BinaryTree rightNode)</span>{  <span class="comment">// 构造函数</span></span><br><span class="line">      <span class="built_in">this</span>.rootNode=rootNode</span><br><span class="line">      <span class="built_in">this</span>.leftNode=leftNode</span><br><span class="line">      <span class="built_in">this</span>.rightNode=rightNode</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol><li><strong>求二叉树中的节点个数</strong>递归解法:</li></ol><ul><li>如果二叉树为空，节点个数为0</li><li>如果二叉树不为空，二叉树节点个数 = 左子树节点个数 + 右子树节点个数 + 1</li></ul><p>参考代码如下:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getNodeNum</span><span class="params">(BinaryTree bt)</span>{</span><br><span class="line">    <span class="comment">// 如果二叉树为空，节点个数为0</span></span><br><span class="line">    <span class="keyword">if</span>(bt.rootNode == <span class="literal">null</span>)  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果二叉树不为空，二叉树节点个数 = 左子树节点个数 + 右子树节点个数 + 1</span></span><br><span class="line">    <span class="keyword">return</span> getNodeNum(bt.leftNode) + getNodeNum(bt.rightNode) + <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li><strong>求二叉树的深度</strong>递归解法:</li></ol><ul><li>如果二叉树为空，二叉树的深度为0</li><li>如果二叉树不为空，二叉树的深度 = max(左子树深度， 右子树深度) + 1参考代码如下:<figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getBTDeep</span><span class="params">(BinaryTree bt)</span>{</span><br><span class="line">    <span class="comment">// 如果二叉树为空，二叉树的深度为0</span></span><br><span class="line">    <span class="keyword">if</span>(bt.rootNode == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果二叉树不为空，二叉树的深度 = max(左子树深度， 右子树深度) + 1</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">leftDeep</span> <span class="operator">=</span> getBTDeep(bt.leftDeep);</span><br><span class="line">    <span class="type">long</span> <span class="variable">rightDeep</span> <span class="operator">=</span> getBTDeep(bt.rightDeep);</span><br><span class="line">    <span class="keyword">return</span> leftDeep&gt;rightDeep ? (leftDeep + <span class="number">1</span>) : (rightDeep + <span class="number">1</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><ol start="3"><li><strong>前序、中序和后序遍历</strong>前序遍历递归解法:</li></ol><ul><li>如果二叉树为空，空操作</li><li>如果二叉树不为空，访问根节点，再前序遍历左子树，再前序遍历右子树参考代码如下:<figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preOrderTraverse</span><span class="params">(BinaryTree bt)</span>{</span><br><span class="line">    <span class="keyword">if</span> (bt.rootNode == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    doSomeThing(bt.rootNode);</span><br><span class="line">    preOrderTraverse(bt.leftNode);</span><br><span class="line">    preOrderTraverse(bt.rightNode);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>中序和后序雷同。</li></ul><ol start="4"><li><p><strong>分层遍历二叉树（按层次从上往下，从左往右）</strong>相当于广度优先搜索，使用队列实现。队列初始化，将根节点压入队列。当队列不为空，进行如下操作:弹出一个节点，访问，若左子节点或右子节点不为空，将其压入队列。参考代码如下:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">levelTraverse</span><span class="params">(BinaryTree bt)</span>{</span><br><span class="line">    <span class="keyword">if</span>(bt.rootNode == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    LinkedList&lt;BinaryTree&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;BinaryTree&gt;();  <span class="comment">// LinkedList实现了Java的Queen接口</span></span><br><span class="line">    queue.addLast(bt);</span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()){</span><br><span class="line">        popBT = queue.pollFirst();</span><br><span class="line">        <span class="keyword">if</span> (bt.leftNode != <span class="literal">null</span>)</span><br><span class="line">            queue.addLast(bt.leftNode);</span><br><span class="line">        <span class="keyword">if</span> (bt.rightNode != <span class="literal">null</span>)</span><br><span class="line">            queue.addLast(bt.rightNode);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>将二叉查找树变为有序的双向链表</strong>要求不能创建新节点，只调整指针。递归解法:（1）如果二叉树查找树为空，不需要转换，对应双向链表的第一个节点是NULL，最后一个节点是NULL（2）如果二叉查找树不为空:如果左子树为空，对应双向有序链表的第一个节点是根节点，左边不需要其他操作；如果左子树不为空，转换左子树，二叉查找树对应双向有序链表的第一个节点就是左子树转换后双向有序链表的第一个节点，同时将根节点和左子树转换后的双向有序链 表的最后一个节点连接；如果右子树为空，对应双向有序链表的最后一个节点是根节点，右边不需要其他操作；如果右子树不为空，对应双向有序链表的最后一个节点就是右子树转换后双向有序链表的最后一个节点，同时将根节点和右子树转换后的双向有序链表的第一个节点连接。参考代码如下:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">TODO</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> {  </span><br><span class="line">    <span class="keyword">private</span> TreeNode head=<span class="literal">null</span>;  </span><br><span class="line">    <span class="keyword">private</span> TreeNode tail=<span class="literal">null</span>;  </span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">Convert</span><span class="params">(TreeNode pRootOfTree)</span> {  </span><br><span class="line">        visit(pRootOfTree);  </span><br><span class="line">        <span class="keyword">return</span> head;  </span><br><span class="line">    }  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(TreeNode root)</span> {    </span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) {    </span><br><span class="line">            <span class="keyword">return</span>;    </span><br><span class="line">        }    </span><br><span class="line">        visit(root.left);    </span><br><span class="line">        createList(root);    </span><br><span class="line">        visit(root.right);    </span><br><span class="line">    }    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createList</span><span class="params">(TreeNode cur)</span>{    </span><br><span class="line">        cur.left=tail;<span class="comment">//把当前的节点接到链表的尾部     </span></span><br><span class="line">        <span class="keyword">if</span>(tail!=<span class="literal">null</span>){<span class="comment">//双向连接     </span></span><br><span class="line">            tail.right=cur;     </span><br><span class="line">        }<span class="keyword">else</span>{     </span><br><span class="line">            head=cur;     </span><br><span class="line">        }     </span><br><span class="line">        tail=cur;<span class="comment">//更新尾结点为当前结点，或者说:尾结点后移     </span></span><br><span class="line">    }    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>求二叉树第K层的节点个数</strong>递归解法:</p></li></ol><ul><li>如果二叉树为空或者k&lt;1返回0 (不是k层，或节点不存在，不计数)</li><li>如果二叉树不为空并且k==1，返回1 （第k层，计数+1）</li><li>如果二叉树不为空且k&gt;1，返回左子树中k-1层的节点个数与右子树k-1层节点个数之和 （递归寻找第k层）参考代码如下:<figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNodeNumOfKthLevel</span><span class="params">(BinaryTree bt, <span class="type">int</span> k)</span>{</span><br><span class="line">    <span class="comment">// 如果二叉树为空或者k&lt;1返回0</span></span><br><span class="line">    <span class="keyword">if</span> (bt.rootNode == <span class="literal">null</span> || k&lt;<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 如果二叉树不为空并且k==1，返回1</span></span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果二叉树不为空且k&gt;1，返回左子树中k-1层的节点个数与右子树k-1层节点个数之和</span></span><br><span class="line">    <span class="comment">// 解释:通过控制k来控制递归，即每一层K都减一，最后到达k-1层时k减为1，停止递归。</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">leftNum</span> <span class="operator">=</span> getNodeNumOfKthLevel(bt.leftNode, k-<span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">rightNum</span> <span class="operator">=</span> getNodeNumOfKthLevel(bt.rightNode, k-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> leftNum + rightNum;  <span class="comment">// 返回左右孩子节点下的节点个数</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><ol start="7"><li><strong>求二叉树中叶子节点的个数</strong>递归解法:</li></ol><ul><li>如果二叉树为空，返回0 （节点不存在）</li><li>如果二叉树不为空且左右子树为空，返回1 （节点为叶子节点，计数+1）</li><li>如果二叉树不为空，且左右子树不同时为空，返回左子树中叶子节点个数加上右子树中叶子节点个数 （节点不是叶子节点，递归寻找叶子节点）参考代码如下:<figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLeafNodeNum</span><span class="params">(BinaryTree bt)</span>{</span><br><span class="line">    <span class="comment">// 如果二叉树为空，返回0</span></span><br><span class="line">    <span class="keyword">if</span> (bt.rootNode == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果二叉树不为空且左右子树为空，返回1</span></span><br><span class="line">    <span class="keyword">if</span> (bt.rootNode != <span class="literal">null</span> &amp;&amp; bt.leftNode == <span class="literal">null</span> &amp;&amp; bt.rightNode == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果二叉树不为空，且左右子树不同时为空，返回左子树中叶子节点个数加上右子树中叶子节点个数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">leftNum</span> <span class="operator">=</span> getLeafNodeNum(bt.leftNode);</span><br><span class="line">    <span class="type">int</span> <span class="variable">rightNum</span> <span class="operator">=</span> getLeafNodeNum(bt.rightNode);</span><br><span class="line">    <span class="keyword">return</span> leftNum + rightNum;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><ol start="8"><li><strong>判断两棵二叉树是否结构相同</strong>不考虑数据内容。结构相同意味着对应的左子树和对应的右子树都结构相同。递归解法:</li></ol><ul><li>如果两棵二叉树都为空，返回真 (判断根节点)</li><li>如果两棵二叉树一棵为空，另一棵不为空，返回假 (判断根节点)</li><li>如果两棵二叉树都不为空，如果对应的左子树和右子树都同构返回真，其他返回假 (递归判断孩子节点)参考代码如下:<figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">structureCmp</span><span class="params">(BinaryTree bt1, BinaryTree bt2)</span>{</span><br><span class="line">    <span class="comment">// 如果两棵二叉树都为空，返回真</span></span><br><span class="line">    <span class="keyword">if</span> (bt1.rootNode == <span class="literal">null</span> &amp;&amp; bt2.rootNode == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果两棵二叉树一棵为空，另一棵不为空，返回假</span></span><br><span class="line">    <span class="keyword">if</span> (bt1.rootNode == <span class="literal">null</span> || bt2.rootNode == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果两棵二叉树都不为空，如果对应的左子树和右子树都同构返回真，其他返回假</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">leftCmp</span> <span class="operator">=</span> structureCmp(bt1.leftNode, bt2.leftNode);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">rightCmp</span> <span class="operator">=</span> structureCmp(bt1.rightNode, bt2.rightNode);</span><br><span class="line">    <span class="keyword">return</span> leftCmp &amp;&amp; rightCmp;</span><br></pre></td></tr></tbody></table></figure></li></ul><ol start="8"><li>扩展 <strong>判断两棵二叉树是否相同（结构+数值）</strong>对上述问题（8）的扩展，考虑数据内容。递归解法:</li></ol><ul><li>如果两棵二叉树都为空，返回真 (判断根节点结构)</li><li>如果两棵二叉树一棵为空，另一棵不为空，返回假 (判断根节点结构)</li><li>如果两棵二叉树都不为空，判断值不相等，返回假 (判断根节点值)</li><li>如果两棵二叉树都不为空，判断值相等，判断对应的左子树和右子树都返回真则返回真，其他返回假 (递归判断孩子节点的结构和值)参考代码如下:<figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">structureCmp</span><span class="params">(BinaryTree bt1, BinaryTree bt2)</span>{</span><br><span class="line">    <span class="comment">// 如果两棵二叉树都为空，返回真</span></span><br><span class="line">    <span class="keyword">if</span> (bt1.rootNode == <span class="literal">null</span> &amp;&amp; bt2.rootNode == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果两棵二叉树一棵为空，另一棵不为空，返回假</span></span><br><span class="line">    <span class="keyword">if</span> (bt1.rootNode == <span class="literal">null</span> || bt2.rootNode == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果两棵二叉树都不为空，判断值不相等，返回假 (判断根节点值)</span></span><br><span class="line">    <span class="keyword">if</span> (bt1.rootNode != bt2.rootNode)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果两棵二叉树都不为空，判断值相等，判断对应的左子树和右子树都返回真则返回真，其他返回假 (递归判断孩子节点的结构和值)</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">leftCmp</span> <span class="operator">=</span> structureCmp(bt1.leftNode, bt2.leftNode);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">rightCmp</span> <span class="operator">=</span> structureCmp(bt1.rightNode, bt2.rightNode);</span><br><span class="line">    <span class="keyword">return</span> leftCmp &amp;&amp; rightCmp;</span><br></pre></td></tr></tbody></table></figure></li></ul><ol start="9"><li><strong>判断二叉树是不是平衡二叉树</strong></li></ol><p><em>平衡二叉树（Self-balancing binary search tree）又被称为AVL树（有别于AVL算法），且具有以下性质：它是一 棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。</em></p><p>递归解法：</p><ul><li>如果二叉树为空，返回真</li><li>如果二叉树不为空，如果左子树和右子树都是AVL树并且左子树和右子树高度相差不大于1，返回真，其他返回假</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">UNB</span> <span class="operator">=</span> -<span class="number">1</span>;  <span class="comment">// 定义一个不可能的树的高度作为不平衡的代表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isBalanced</span><span class="params">(BinaryTree bt)</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> balanceJudge(bt);</span><br><span class="line">    <span class="comment">// 判断数的高度，如果为-1，则数不平衡，否则树是平衡的。</span></span><br><span class="line">    <span class="keyword">if</span>(result != UNB)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 判断是否平衡，返回的为当前树的高度</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">balanceJudge</span><span class="params">(BinaryTree bt)</span>{</span><br><span class="line">    <span class="keyword">if</span>(bt.rootNode==<span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> balanceJudge(bt.leftNode);</span><br><span class="line">    <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> balanceJudge(bt.rightNode);</span><br><span class="line">    <span class="keyword">if</span>(l==UNB || r== UNB || Math.abs(l-r)&gt;<span class="number">1</span>) <span class="keyword">return</span> UNB;  <span class="comment">// 如果左树或右树有任何一个不平衡，或者高度相差超过1，则整个二叉树不平衡</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>+(l&gt;r?l:r);  <span class="comment">// 平衡，返回深度，深度为左右子树中最深的树的深度</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="10"><li><strong>求二叉树的镜像</strong>递归解法：</li></ol><ul><li>如果二叉树为空，返回空</li><li>如果二叉树不为空，求左子树和右子树的镜像，然后交换左子树和右子树</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> BinaryTree <span class="title function_">mirrorBT</span><span class="params">(BinaryTree bt)</span>{</span><br><span class="line">    <span class="keyword">if</span>(bt.rootNode==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">BinaryTree</span> <span class="variable">leftTree</span> <span class="operator">=</span> mirrorBT(bt.leftNode);</span><br><span class="line">    <span class="type">BinaryTree</span> <span class="variable">rightTree</span> <span class="operator">=</span> mirrorBT(bt.rightNode);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 交换左右子树</span></span><br><span class="line">    bt.leftNode = rightTree;</span><br><span class="line">    bt.rightNode = leftTree;</span><br><span class="line">    <span class="keyword">return</span> bt;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">&lt;hr&gt;
&lt;h4 id=&quot;二叉树的相关术语&quot;&gt;&lt;a href=&quot;#二叉树的相关术语&quot; class=&quot;headerlink&quot; title=&quot;二叉树的相关术语:&quot;&gt;&lt;/a&gt;二叉树的相关术语:&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;树的结点&lt;/strong&gt;:包含一个数据元素及若干指向子树的分支；
&lt;strong&gt;孩子结点&lt;/strong&gt;:结点的子树的根称为该结点的孩子；
&lt;strong&gt;双亲结点&lt;/strong&gt;:B 结点是A 结点的孩子，则A结点是B 结点的双亲；
&lt;strong&gt;兄弟结点&lt;/strong&gt;:同一双亲的孩子结点； 堂兄结点:同一层上结点；
&lt;strong&gt;祖先结点&lt;/strong&gt;: 从根到该结点的所经分支上的所有结点子孙结点:以某结点为根的子树中任一结点都称为该结点的子孙
&lt;strong&gt;结点层&lt;/strong&gt;:根结点的层定义为1；根的孩子为第二层结点，依此类推；
&lt;strong&gt;树的深度&lt;/strong&gt;:树中最大的结点层
&lt;strong&gt;结点的度&lt;/strong&gt;:结点子树的个数
&lt;strong&gt;树的度&lt;/strong&gt;: 树中最大的结点度。
&lt;strong&gt;叶子结点&lt;/strong&gt;:也叫终端结点，是度为 0 的结点；
&lt;strong&gt;分枝结点&lt;/strong&gt;:度不为0的结点；
&lt;strong&gt;有序树&lt;/strong&gt;:子树有序的树，如:家族树；
&lt;strong&gt;无序树&lt;/strong&gt;:不考虑子树的顺序；
&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;http://baike.baidu.com/item/%E4%BA%8C%E5%8F%89%E6%A0%91#2_2&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="面试" scheme="https://chewenkai.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="数据结构" scheme="https://chewenkai.github.io/categories/%E9%9D%A2%E8%AF%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="日常总结" scheme="https://chewenkai.github.io/tags/%E6%97%A5%E5%B8%B8%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
